0x40000000 A PERIPHERAL TIM2
0x40000000 B  REGISTER CR1: TIM2 control register 1
0x40000000 C   FIELD 00w01 CEN (rw): Counter enable Note: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. CEN is cleared automatically in one-pulse mode, when an update event occurs.
0x40000000 C   FIELD 01w01 UDIS (rw): Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.
0x40000000 C   FIELD 02w01 URS (rw): Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller
0x40000000 C   FIELD 03w01 OPM (rw): One-pulse mode
0x40000000 C   FIELD 04w01 DIR (rw): Direction Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode.
0x40000000 C   FIELD 05w02 CMS (rw): Center-aligned mode selection Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1)
0x40000000 C   FIELD 07w01 ARPE (rw): Auto-reload preload enable
0x40000000 C   FIELD 08w02 CKD (rw): Clock division This bit-field indicates the division ratio between the timer clock (tim_ker_ck) frequency and sampling clock used by the digital filters (tim_etr_in, tim_tix),
0x40000000 C   FIELD 11w01 UIFREMAP (rw): UIF status bit remapping
0x40000000 C   FIELD 12w01 DITHEN (rw): Dithering Enable Note: The DITHEN bit can only be modified when CEN bit is reset.
0x40000004 B  REGISTER CR2: TIM2 control register 2
0x40000004 C   FIELD 03w01 CCDS (rw): Capture/compare DMA selection
0x40000004 C   FIELD 04w03 MMS_L (rw): Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.
0x40000004 C   FIELD 07w01 TI1S (rw): tim_ti1 selection
0x40000004 C   FIELD 25w01 MMS_H (rw): Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.
0x40000008 B  REGISTER SMCR: TIM2 slave mode control register
0x40000008 C   FIELD 00w03 SMS_L (rw): Slave mode selection When external signals are selected the active edge of the trigger signal (tim_trgi) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Note: The gated mode must not be used if tim_ti1f_ed is selected as the trigger input (TS=00100). Indeed, tim_ti1f_ed outputs 1 pulse for each transition on tim_ti1f, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the tim_trgo signal must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.
0x40000008 C   FIELD 03w01 OCCS (rw): OCREF clear selection This bit is used to select the OCREF clear source Note: If the OCREF clear selection feature is not supported, this bit is reserved and forced by hardware to '0'. .
0x40000008 C   FIELD 04w03 TS_L (rw): Trigger selection This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for product specific implementation details. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.
0x40000008 C   FIELD 07w01 MSM (rw): Master/Slave mode
0x40000008 C   FIELD 08w04 ETF (rw): External trigger filter This bit-field then defines the frequency used to sample tim_etrp signal and the length of the digital filter applied to tim_etrp. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:
0x40000008 C   FIELD 12w02 ETPS (rw): External trigger prescaler External trigger signal tim_etrp frequency must be at most 1/4 of tim_ker_ck frequency. A prescaler can be enabled to reduce tim_etrp frequency. It is useful when inputting fast external clocks on tim_etr_in.
0x40000008 C   FIELD 14w01 ECE (rw): External clock enable This bit enables External clock mode 2. Note: Setting the ECE bit has the same effect as selecting external clock mode 1 with tim_trgi connected to tim_etrf (SMS=111 and TS=00111). It is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, tim_trgi must not be connected to tim_etrf in this case (TS bits must not be 00111). If external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is tim_etrf.
0x40000008 C   FIELD 15w01 ETP (rw): External trigger polarity This bit selects whether tim_etr_in or tim_etr_in is used for trigger operations
0x40000008 C   FIELD 16w01 SMS_H (rw): Slave mode selection When external signals are selected the active edge of the trigger signal (tim_trgi) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Note: The gated mode must not be used if tim_ti1f_ed is selected as the trigger input (TS=00100). Indeed, tim_ti1f_ed outputs 1 pulse for each transition on tim_ti1f, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the tim_trgo signal must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.
0x40000008 C   FIELD 20w02 TS_H (rw): Trigger selection This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for product specific implementation details. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.
0x40000008 C   FIELD 24w01 SMSPE (rw): SMS preload enable This bit selects whether the SMS[3:0] bitfield is preloaded
0x40000008 C   FIELD 25w01 SMSPS (rw): SMS preload source This bit selects whether the events that triggers the SMS[3:0] bitfield transfer from preload to active
0x4000000C B  REGISTER DIER: TIM2 DMA/Interrupt enable register
0x4000000C C   FIELD 00w01 UIE (rw): Update interrupt enable
0x4000000C C   FIELD 01w01 CC1IE (rw): Capture/Compare 1 interrupt enable
0x4000000C C   FIELD 02w01 CC2IE (rw): Capture/Compare 2 interrupt enable
0x4000000C C   FIELD 03w01 CC3IE (rw): Capture/Compare 3 interrupt enable
0x4000000C C   FIELD 04w01 CC4IE (rw): Capture/Compare 4 interrupt enable
0x4000000C C   FIELD 06w01 TIE (rw): Trigger interrupt enable
0x4000000C C   FIELD 08w01 UDE (rw): Update DMA request enable
0x4000000C C   FIELD 09w01 CC1DE (rw): Capture/Compare 1 DMA request enable
0x4000000C C   FIELD 10w01 CC2DE (rw): Capture/Compare 2 DMA request enable
0x4000000C C   FIELD 11w01 CC3DE (rw): Capture/Compare 3 DMA request enable
0x4000000C C   FIELD 12w01 CC4DE (rw): Capture/Compare 4 DMA request enable
0x4000000C C   FIELD 14w01 TDE (rw): Trigger DMA request enable
0x4000000C C   FIELD 20w01 IDXIE (rw): Index interrupt enable
0x4000000C C   FIELD 21w01 DIRIE (rw): Direction change interrupt enable
0x4000000C C   FIELD 22w01 IERRIE (rw): Index error interrupt enable
0x4000000C C   FIELD 23w01 TERRIE (rw): Transition error interrupt enable
0x40000010 B  REGISTER SR: TIM2 status register
0x40000010 C   FIELD 00w01 UIF (rw): Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow or underflow and if UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by a trigger event (refer to the synchro control register description), if URS=0 and UDIS=0 in the TIMx_CR1 register.
0x40000010 C   FIELD 01w01 CC1IF (rw): Capture/compare 1 interrupt flag
0x40000010 C   FIELD 02w01 CC2IF (rw): Capture/compare 2 interrupt flag
0x40000010 C   FIELD 03w01 CC3IF (rw): Capture/compare 3 interrupt flag
0x40000010 C   FIELD 04w01 CC4IF (rw): Capture/compare 4 interrupt flag
0x40000010 C   FIELD 06w01 TIF (rw): Trigger interrupt flag This flag is set by hardware on the TRG trigger event (active edge detected on tim_trgi input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software.
0x40000010 C   FIELD 09w01 CC1OF (rw): Capture/Compare 1 overcapture flag
0x40000010 C   FIELD 10w01 CC2OF (rw): Capture/Compare 2 overcapture flag
0x40000010 C   FIELD 11w01 CC3OF (rw): Capture/Compare 3 overcapture flag
0x40000010 C   FIELD 12w01 CC4OF (rw): Capture/Compare 4 overcapture flag
0x40000010 C   FIELD 20w01 IDXF (rw): Index interrupt flag This flag is set by hardware when an index event is detected. It is cleared by software by writing it to '0'.
0x40000010 C   FIELD 21w01 DIRF (rw): Direction change interrupt flag This flag is set by hardware when the direction changes in encoder mode (DIR bit value in TIMx_CR is changing). It is cleared by software by writing it to '0'.
0x40000010 C   FIELD 22w01 IERRF (rw): Index error interrupt flag This flag is set by hardware when an index error is detected. It is cleared by software by writing it to '0'.
0x40000010 C   FIELD 23w01 TERRF (rw): Transition error interrupt flag This flag is set by hardware when a transition error is detected in encoder mode. It is cleared by software by writing it to '0'.
0x40000014 B  REGISTER EGR: TIM2 event generation register
0x40000014 C   FIELD 00w01 UG (wo): Update generation This bit can be set by software, it is automatically cleared by hardware.
0x40000014 C   FIELD 01w01 CC1G (wo): Capture/compare 1 generation
0x40000014 C   FIELD 02w01 CC2G (wo): Capture/compare 2 generation
0x40000014 C   FIELD 03w01 CC3G (wo): Capture/compare 3 generation
0x40000014 C   FIELD 04w01 CC4G (wo): Capture/compare 4 generation
0x40000014 C   FIELD 06w01 TG (wo): Trigger generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.
0x40000018 B  REGISTER CCMR1_Input: TIM2 capture/compare mode register 1 [alternate]
0x40000018 B  REGISTER CCMR1_Output: TIM2 capture/compare mode register 1 [alternate]
0x40000018 C   FIELD 00w02 CC1S (rw): Capture/Compare 1 selection
0x40000018 C   FIELD 00w02 CC1S (rw): Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).
0x40000018 C   FIELD 02w01 OC1FE (rw): Output compare 1 fast enable
0x40000018 C   FIELD 02w02 IC1PSC (rw): Input capture 1 prescaler
0x40000018 C   FIELD 03w01 OC1PE (rw): Output compare 1 preload enable
0x40000018 C   FIELD 04w03 OC1M (rw): Output compare 1 mode
0x40000018 C   FIELD 04w04 IC1F (rw): Input capture 1 filter
0x40000018 C   FIELD 07w01 OC1CE (rw): Output compare 1 clear enable
0x40000018 C   FIELD 08w02 CC2S (rw): Capture/Compare 2 selection
0x40000018 C   FIELD 08w02 CC2S (rw): Capture/compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).
0x40000018 C   FIELD 10w01 OC2FE (rw): Output compare 2 fast enable
0x40000018 C   FIELD 10w02 IC2PSC (rw): Input capture 2 prescaler
0x40000018 C   FIELD 11w01 OC2PE (rw): Output compare 2 preload enable
0x40000018 C   FIELD 12w03 OC2M (rw): Output compare 2 mode
0x40000018 C   FIELD 12w04 IC2F (rw): Input capture 2 filter
0x40000018 C   FIELD 15w01 OC2CE (rw): Output compare 2 clear enable
0x40000018 C   FIELD 16w01 OC1M_3 (rw): Output compare 1 mode, bit 3
0x40000018 C   FIELD 24w01 OC2M_3 (rw): Output compare 2 mode, bit 3
0x4000001C B  REGISTER CCMR2_Input: TIM2 capture/compare mode register 2 [alternate]
0x4000001C B  REGISTER CCMR2_Output: TIM2 capture/compare mode register 2 [alternate]
0x4000001C C   FIELD 00w02 CC3S (=TIM2.CCMR1_Output.CC%sS) (rw): Capture/Compare 3 selection
0x4000001C C   FIELD 00w02 CC3S (rw): Capture/Compare 3 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC3S bits are writable only when the channel is OFF (CC3E = 0 in TIMx_CCER).
0x4000001C C   FIELD 02w01 OC3FE (=TIM2.CCMR1_Output.OC%sFE) (rw): Output compare 3 fast enable
0x4000001C C   FIELD 02w02 IC3PSC (=TIM2.CCMR1_Input.IC%sPSC) (rw): Input capture 3 prescaler
0x4000001C C   FIELD 03w01 OC3PE (=TIM2.CCMR1_Output.OC%sPE) (rw): Output compare 3 preload enable
0x4000001C C   FIELD 04w03 OC3M (=TIM2.CCMR1_Output.OC%sM) (rw): Output compare 3 mode
0x4000001C C   FIELD 04w04 IC3F (=TIM2.CCMR1_Input.IC%sF) (rw): Input capture 3 filter
0x4000001C C   FIELD 07w01 OC3CE (=TIM2.CCMR1_Output.OC%sCE) (rw): Output compare 3 clear enable
0x4000001C C   FIELD 08w02 CC4S (=TIM2.CCMR1_Output.CC%sS) (rw): Capture/Compare 4 selection
0x4000001C C   FIELD 08w02 CC4S (rw): Capture/Compare 4 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC4S bits are writable only when the channel is OFF (CC4E = 0 in TIMx_CCER).
0x4000001C C   FIELD 10w01 OC4FE (=TIM2.CCMR1_Output.OC%sFE) (rw): Output compare 4 fast enable
0x4000001C C   FIELD 10w02 IC4PSC (=TIM2.CCMR1_Input.IC%sPSC) (rw): Input capture 4 prescaler
0x4000001C C   FIELD 11w01 OC4PE (=TIM2.CCMR1_Output.OC%sPE) (rw): Output compare 4 preload enable
0x4000001C C   FIELD 12w03 OC4M (=TIM2.CCMR1_Output.OC%sM) (rw): Output compare 4 mode
0x4000001C C   FIELD 12w04 IC4F (=TIM2.CCMR1_Input.IC%sF) (rw): Input capture 4 filter
0x4000001C C   FIELD 15w01 OC4CE (=TIM2.CCMR1_Output.OC%sCE) (rw): Output compare 4 clear enable
0x4000001C C   FIELD 16w01 OC3M_3 (=TIM2.CCMR1_Output.OC%sM_3) (rw): Output compare 3 mode, bit 3
0x4000001C C   FIELD 24w01 OC4M_3 (=TIM2.CCMR1_Output.OC%sM_3) (rw): Output compare 4 mode, bit 3
0x40000020 B  REGISTER CCER: TIM2 capture/compare enable register
0x40000020 C   FIELD 00w01 CC1E (rw): Capture/Compare 1 output enable
0x40000020 C   FIELD 01w01 CC1P (rw): Capture/Compare 1 output Polarity
0x40000020 C   FIELD 03w01 CC1NP (rw): Capture/Compare 1 output Polarity
0x40000020 C   FIELD 04w01 CC2E (rw): Capture/Compare 2 output enable
0x40000020 C   FIELD 05w01 CC2P (rw): Capture/Compare 2 output Polarity
0x40000020 C   FIELD 07w01 CC2NP (rw): Capture/Compare 2 output Polarity
0x40000020 C   FIELD 08w01 CC3E (rw): Capture/Compare 3 output enable
0x40000020 C   FIELD 09w01 CC3P (rw): Capture/Compare 3 output Polarity
0x40000020 C   FIELD 11w01 CC3NP (rw): Capture/Compare 3 output Polarity
0x40000020 C   FIELD 12w01 CC4E (rw): Capture/Compare 4 output enable
0x40000020 C   FIELD 13w01 CC4P (rw): Capture/Compare 4 output Polarity
0x40000020 C   FIELD 15w01 CC4NP (rw): Capture/Compare 4 output Polarity
0x40000024 B  REGISTER CNT: TIM2 counter
0x40000024 C   FIELD 00w32 CNT (rw): Non-dithering mode (DITHEN = 0) The register holds the counter value. Dithering mode (DITHEN = 1) The register holds the non-dithered part. The fractional part is not available.
0x40000024 C   FIELD 31w01 UIFCPY (ro): Read-only copy of the UIF bit of the TIMx_ISR register
0x40000028 B  REGISTER PSC: TIM2 prescaler
0x40000028 C   FIELD 00w16 PSC (rw): Prescaler value The counter clock frequency tim_cnt_ck is equal to ftim_psc_ck / (PSC[15:0] + 1). PSC contains the value to be loaded in the active prescaler register at each update event (including when the counter is cleared through UG bit of TIMx_EGR register or through trigger controller when configured in 'reset mode').
0x4000002C B  REGISTER ARR: TIM2 auto-reload register
0x4000002C C   FIELD 00w32 ARR (rw): Auto-reload value ARR is the value to be loaded in the actual auto-reload register. Refer to the for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null. Non-dithering mode (DITHEN = 0) The register holds the auto-reload value. Dithering mode (DITHEN = 1) The register holds the integer part in ARR[31:4]. The ARR[3:0] bitfield contains the dithered part.
0x40000034 B  REGISTER CCR1: capture/compare register
0x40000034 C   FIELD 00w32 CCR (rw): Capture/Compare value
0x40000038 B  REGISTER CCR2: capture/compare register
0x40000038 C   FIELD 00w32 CCR (rw): Capture/Compare value
0x4000003C B  REGISTER CCR3: capture/compare register
0x4000003C C   FIELD 00w32 CCR (rw): Capture/Compare value
0x40000040 B  REGISTER CCR4: capture/compare register
0x40000040 C   FIELD 00w32 CCR (rw): Capture/Compare value
0x40000058 B  REGISTER ECR: TIM2 timer encoder control register
0x40000058 C   FIELD 00w01 IE (rw): Index enable This bit indicates if the Index event resets the counter.
0x40000058 C   FIELD 01w02 IDIR (rw): Index direction This bit indicates in which direction the Index event resets the counter. Note: The IDR[1:0] bitfield must be written when IE bit is reset (index disabled).
0x40000058 C   FIELD 03w02 IBLK (rw): Index blanking This bit indicates if the Index event is conditioned by the tim_ti3 input
0x40000058 C   FIELD 05w01 FIDX (rw): First index This bit indicates if the first index only is taken into account
0x40000058 C   FIELD 06w02 IPOS (rw): Index positioning In quadrature encoder mode (SMS[3:0] = 0001, 0010, 0011, 1110, 1111), this bit indicates in which AB input configuration the Index event resets the counter. In directional clock mode or clock plus direction mode (SMS[3:0] = 1010, 1011, 1100, 1101), these bits indicates on which level the Index event resets the counter. In bidirectional clock mode, this applies for both clock inputs. x0: Index resets the counter when clock is 0 x1: Index resets the counter when clock is 1 Note: IPOS[1] bit is not significant
0x40000058 C   FIELD 16w08 PW (rw): Pulse width This bitfield defines the pulse duration, as following: tPW = PW[7:0] x tPWG
0x40000058 C   FIELD 24w03 PWPRSC (rw): Pulse width prescaler This bitfield sets the clock prescaler for the pulse generator, as following: tPWG = (2(PWPRSC[2:0])) x ttim_ker_ck
0x4000005C B  REGISTER TISEL: TIM2 timer input selection register
0x4000005C C   FIELD 00w04 TI1SEL (rw): Selects tim_ti1[0..15] input ... Refer to for product specific implementation.
0x4000005C C   FIELD 08w04 TI2SEL (rw): Selects tim_ti2[0..15] input ... Refer to for product specific implementation.
0x4000005C C   FIELD 16w04 TI3SEL (rw): Selects tim_ti3[0..15] input ... Refer to for product specific implementation.
0x4000005C C   FIELD 24w04 TI4SEL (rw): Selects tim_ti4[0..15] input ... Refer to for product specific implementation.
0x40000060 B  REGISTER AF1: TIM2 alternate function register 1
0x40000060 C   FIELD 14w04 ETRSEL (rw): etr_in source selection These bits select the etr_in input source. ... Refer to for product specific implementation.
0x40000064 B  REGISTER AF2: TIM2 alternate function register 2
0x40000064 C   FIELD 16w03 OCRSEL (rw): ocref_clr source selection These bits select the ocref_clr input source. ... Refer to for product specific implementation.
0x400003DC B  REGISTER DCR: TIM2 DMA control register
0x400003DC C   FIELD 00w05 DBA (rw): DMA base address This 5-bits vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ...
0x400003DC C   FIELD 08w05 DBL (rw): DMA burst length This 5-bit vector defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below). ... Example: Let us consider the following transfer: DBL = 7 bytes & DBA = TIM2_CR1. If DBL = 7 bytes and DBA = TIM2_CR1 represents the address of the byte to be transferred, the address of the transfer should be given by the following equation: (TIMx_CR1 address) + DBA + (DMA index), where DMA index = DBL In this example, 7 bytes are added to (TIMx_CR1 address) + DBA, which gives us the address from/to which the data are copied. In this case, the transfer is done to 7 registers starting from the following address: (TIMx_CR1 address) + DBA According to the configuration of the DMA Data Size, several cases may occur: If the DMA Data Size is configured in half-words, 16-bit data are transferred to each of the 7 registers. If the DMA Data Size is configured in bytes, the data are also transferred to 7 registers: the first register contains the first MSB byte, the second register, the first LSB byte and so on. So with the transfer Timer, one also has to specify the size of data transferred by DMA.
0x400003DC C   FIELD 16w04 DBSS (rw): DMA burst source selection This bitfield defines the interrupt source that triggers the DMA burst transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address). Others: reserved
0x400003E0 B  REGISTER DMAR: TIM2 DMA address for full transfer
0x400003E0 C   FIELD 00w32 DMAB (rw): DMA register for burst accesses A read or write operation to the DMAR register accesses the register located at the address (TIMx_CR1 address) + (DBA + DMA index) x 4 where TIMx_CR1 address is the address of the control register 1, DBA is the DMA base address configured in TIMx_DCR register, DMA index is automatically controlled by the DMA transfer, and ranges from 0 to DBL (DBL configured in TIMx_DCR).
0x40000400 A PERIPHERAL TIM3
0x40000400 B  REGISTER CR1: TIM3 control register 1
0x40000400 C   FIELD 00w01 CEN (rw): Counter enable Note: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware. CEN is cleared automatically in one-pulse mode, when an update event occurs.
0x40000400 C   FIELD 01w01 UDIS (rw): Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.
0x40000400 C   FIELD 02w01 URS (rw): Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller
0x40000400 C   FIELD 03w01 OPM (rw): One-pulse mode
0x40000400 C   FIELD 04w01 DIR (rw): Direction Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode.
0x40000400 C   FIELD 05w02 CMS (rw): Center-aligned mode selection Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1)
0x40000400 C   FIELD 07w01 ARPE (rw): Auto-reload preload enable
0x40000400 C   FIELD 08w02 CKD (rw): Clock division This bit-field indicates the division ratio between the timer clock (tim_ker_ck) frequency and sampling clock used by the digital filters (tim_etr_in, tim_tix),
0x40000400 C   FIELD 11w01 UIFREMAP (rw): UIF status bit remapping
0x40000400 C   FIELD 12w01 DITHEN (rw): Dithering Enable Note: The DITHEN bit can only be modified when CEN bit is reset.
0x40000404 B  REGISTER CR2: TIM3 control register 2
0x40000404 C   FIELD 03w01 CCDS (rw): Capture/compare DMA selection
0x40000404 C   FIELD 04w03 MMS_L (rw): Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.
0x40000404 C   FIELD 07w01 TI1S (rw): tim_ti1 selection
0x40000404 C   FIELD 25w01 MMS_H (rw): Master mode selection These bits allow to select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: tim_trgo, except if the master/slave mode is selected (see the MSM bit description in TIMx_SMCR register). Others: Reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.
0x40000408 B  REGISTER SMCR: TIM3 slave mode control register
0x40000408 C   FIELD 00w03 SMS_L (rw): Slave mode selection When external signals are selected the active edge of the trigger signal (tim_trgi) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Note: The gated mode must not be used if tim_ti1f_ed is selected as the trigger input (TS=00100). Indeed, tim_ti1f_ed outputs 1 pulse for each transition on tim_ti1f, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the tim_trgo signal must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.
0x40000408 C   FIELD 03w01 OCCS (rw): OCREF clear selection This bit is used to select the OCREF clear source Note: If the OCREF clear selection feature is not supported, this bit is reserved and forced by hardware to '0'. .
0x40000408 C   FIELD 04w03 TS_L (rw): Trigger selection This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for product specific implementation details. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.
0x40000408 C   FIELD 07w01 MSM (rw): Master/Slave mode
0x40000408 C   FIELD 08w04 ETF (rw): External trigger filter This bit-field then defines the frequency used to sample tim_etrp signal and the length of the digital filter applied to tim_etrp. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:
0x40000408 C   FIELD 12w02 ETPS (rw): External trigger prescaler External trigger signal tim_etrp frequency must be at most 1/4 of tim_ker_ck frequency. A prescaler can be enabled to reduce tim_etrp frequency. It is useful when inputting fast external clocks on tim_etr_in.
0x40000408 C   FIELD 14w01 ECE (rw): External clock enable This bit enables External clock mode 2. Note: Setting the ECE bit has the same effect as selecting external clock mode 1 with tim_trgi connected to tim_etrf (SMS=111 and TS=00111). It is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, tim_trgi must not be connected to tim_etrf in this case (TS bits must not be 00111). If external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is tim_etrf.
0x40000408 C   FIELD 15w01 ETP (rw): External trigger polarity This bit selects whether tim_etr_in or tim_etr_in is used for trigger operations
0x40000408 C   FIELD 16w01 SMS_H (rw): Slave mode selection When external signals are selected the active edge of the trigger signal (tim_trgi) is linked to the polarity selected on the external input (see Input Control register and Control Register description. Note: The gated mode must not be used if tim_ti1f_ed is selected as the trigger input (TS=00100). Indeed, tim_ti1f_ed outputs 1 pulse for each transition on tim_ti1f, whereas the gated mode checks the level of the trigger signal. Note: The clock of the slave peripherals (timer, ADC, ...) receiving the tim_trgo signal must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.
0x40000408 C   FIELD 20w02 TS_H (rw): Trigger selection This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See for product specific implementation details. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.
0x40000408 C   FIELD 24w01 SMSPE (rw): SMS preload enable This bit selects whether the SMS[3:0] bitfield is preloaded
0x40000408 C   FIELD 25w01 SMSPS (rw): SMS preload source This bit selects whether the events that triggers the SMS[3:0] bitfield transfer from preload to active
0x4000040C B  REGISTER DIER: TIM3 DMA/Interrupt enable register
0x4000040C C   FIELD 00w01 UIE (rw): Update interrupt enable
0x4000040C C   FIELD 01w01 CC1IE (rw): Capture/Compare 1 interrupt enable
0x4000040C C   FIELD 02w01 CC2IE (rw): Capture/Compare 2 interrupt enable
0x4000040C C   FIELD 03w01 CC3IE (rw): Capture/Compare 3 interrupt enable
0x4000040C C   FIELD 04w01 CC4IE (rw): Capture/Compare 4 interrupt enable
0x4000040C C   FIELD 06w01 TIE (rw): Trigger interrupt enable
0x4000040C C   FIELD 08w01 UDE (rw): Update DMA request enable
0x4000040C C   FIELD 09w01 CC1DE (rw): Capture/Compare 1 DMA request enable
0x4000040C C   FIELD 10w01 CC2DE (rw): Capture/Compare 2 DMA request enable
0x4000040C C   FIELD 11w01 CC3DE (rw): Capture/Compare 3 DMA request enable
0x4000040C C   FIELD 12w01 CC4DE (rw): Capture/Compare 4 DMA request enable
0x4000040C C   FIELD 14w01 TDE (rw): Trigger DMA request enable
0x4000040C C   FIELD 20w01 IDXIE (rw): Index interrupt enable
0x4000040C C   FIELD 21w01 DIRIE (rw): Direction change interrupt enable
0x4000040C C   FIELD 22w01 IERRIE (rw): Index error interrupt enable
0x4000040C C   FIELD 23w01 TERRIE (rw): Transition error interrupt enable
0x40000410 B  REGISTER SR: TIM3 status register
0x40000410 C   FIELD 00w01 UIF (rw): Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow or underflow and if UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by a trigger event (refer to the synchro control register description), if URS=0 and UDIS=0 in the TIMx_CR1 register.
0x40000410 C   FIELD 01w01 CC1IF (rw): Capture/compare 1 interrupt flag
0x40000410 C   FIELD 02w01 CC2IF (rw): Capture/compare 2 interrupt flag
0x40000410 C   FIELD 03w01 CC3IF (rw): Capture/compare 3 interrupt flag
0x40000410 C   FIELD 04w01 CC4IF (rw): Capture/compare 4 interrupt flag
0x40000410 C   FIELD 06w01 TIF (rw): Trigger interrupt flag This flag is set by hardware on the TRG trigger event (active edge detected on tim_trgi input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software.
0x40000410 C   FIELD 09w01 CC1OF (rw): Capture/Compare 1 overcapture flag
0x40000410 C   FIELD 10w01 CC2OF (rw): Capture/Compare 2 overcapture flag
0x40000410 C   FIELD 11w01 CC3OF (rw): Capture/Compare 3 overcapture flag
0x40000410 C   FIELD 12w01 CC4OF (rw): Capture/Compare 4 overcapture flag
0x40000410 C   FIELD 20w01 IDXF (rw): Index interrupt flag This flag is set by hardware when an index event is detected. It is cleared by software by writing it to '0'.
0x40000410 C   FIELD 21w01 DIRF (rw): Direction change interrupt flag This flag is set by hardware when the direction changes in encoder mode (DIR bit value in TIMx_CR is changing). It is cleared by software by writing it to '0'.
0x40000410 C   FIELD 22w01 IERRF (rw): Index error interrupt flag This flag is set by hardware when an index error is detected. It is cleared by software by writing it to '0'.
0x40000410 C   FIELD 23w01 TERRF (rw): Transition error interrupt flag This flag is set by hardware when a transition error is detected in encoder mode. It is cleared by software by writing it to '0'.
0x40000414 B  REGISTER EGR: TIM3 event generation register
0x40000414 C   FIELD 00w01 UG (wo): Update generation This bit can be set by software, it is automatically cleared by hardware.
0x40000414 C   FIELD 01w01 CC1G (wo): Capture/compare 1 generation
0x40000414 C   FIELD 02w01 CC2G (wo): Capture/compare 2 generation
0x40000414 C   FIELD 03w01 CC3G (wo): Capture/compare 3 generation
0x40000414 C   FIELD 04w01 CC4G (wo): Capture/compare 4 generation
0x40000414 C   FIELD 06w01 TG (wo): Trigger generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.
0x40000418 B  REGISTER CCMR1_Input: TIM3 capture/compare mode register 1 [alternate]
0x40000418 B  REGISTER CCMR1_Output: TIM3 capture/compare mode register 1 [alternate]
0x40000418 C   FIELD 00w02 CC1S (rw): Capture/Compare 1 selection
0x40000418 C   FIELD 00w02 CC1S (rw): Capture/Compare 1 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = 0 in TIMx_CCER).
0x40000418 C   FIELD 02w01 OC1FE (rw): Output compare 1 fast enable
0x40000418 C   FIELD 02w02 IC1PSC (rw): Input capture 1 prescaler
0x40000418 C   FIELD 03w01 OC1PE (rw): Output compare 1 preload enable
0x40000418 C   FIELD 04w03 OC1M (rw): Output compare 1 mode
0x40000418 C   FIELD 04w04 IC1F (rw): Input capture 1 filter
0x40000418 C   FIELD 07w01 OC1CE (rw): Output compare 1 clear enable
0x40000418 C   FIELD 08w02 CC2S (rw): Capture/Compare 2 selection
0x40000418 C   FIELD 08w02 CC2S (rw): Capture/compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER).
0x40000418 C   FIELD 10w01 OC2FE (rw): Output compare 2 fast enable
0x40000418 C   FIELD 10w02 IC2PSC (rw): Input capture 2 prescaler
0x40000418 C   FIELD 11w01 OC2PE (rw): Output compare 2 preload enable
0x40000418 C   FIELD 12w03 OC2M (rw): Output compare 2 mode
0x40000418 C   FIELD 12w04 IC2F (rw): Input capture 2 filter
0x40000418 C   FIELD 15w01 OC2CE (rw): Output compare 2 clear enable
0x40000418 C   FIELD 16w01 OC1M_3 (rw): Output compare 1 mode, bit 3
0x40000418 C   FIELD 24w01 OC2M_3 (rw): Output compare 2 mode, bit 3
0x4000041C B  REGISTER CCMR2_Input: TIM3 capture/compare mode register 2 [alternate]
0x4000041C B  REGISTER CCMR2_Output: TIM3 capture/compare mode register 2 [alternate]
0x4000041C C   FIELD 00w02 CC3S (=TIM3.CCMR1_Output.CC%sS) (rw): Capture/Compare 3 selection
0x4000041C C   FIELD 00w02 CC3S (rw): Capture/Compare 3 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC3S bits are writable only when the channel is OFF (CC3E = 0 in TIMx_CCER).
0x4000041C C   FIELD 02w01 OC3FE (=TIM3.CCMR1_Output.OC%sFE) (rw): Output compare 3 fast enable
0x4000041C C   FIELD 02w02 IC3PSC (=TIM3.CCMR1_Input.IC%sPSC) (rw): Input capture 3 prescaler
0x4000041C C   FIELD 03w01 OC3PE (=TIM3.CCMR1_Output.OC%sPE) (rw): Output compare 3 preload enable
0x4000041C C   FIELD 04w03 OC3M (=TIM3.CCMR1_Output.OC%sM) (rw): Output compare 3 mode
0x4000041C C   FIELD 04w04 IC3F (=TIM3.CCMR1_Input.IC%sF) (rw): Input capture 3 filter
0x4000041C C   FIELD 07w01 OC3CE (=TIM3.CCMR1_Output.OC%sCE) (rw): Output compare 3 clear enable
0x4000041C C   FIELD 08w02 CC4S (=TIM3.CCMR1_Output.CC%sS) (rw): Capture/Compare 4 selection
0x4000041C C   FIELD 08w02 CC4S (rw): Capture/Compare 4 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC4S bits are writable only when the channel is OFF (CC4E = 0 in TIMx_CCER).
0x4000041C C   FIELD 10w01 OC4FE (=TIM3.CCMR1_Output.OC%sFE) (rw): Output compare 4 fast enable
0x4000041C C   FIELD 10w02 IC4PSC (=TIM3.CCMR1_Input.IC%sPSC) (rw): Input capture 4 prescaler
0x4000041C C   FIELD 11w01 OC4PE (=TIM3.CCMR1_Output.OC%sPE) (rw): Output compare 4 preload enable
0x4000041C C   FIELD 12w03 OC4M (=TIM3.CCMR1_Output.OC%sM) (rw): Output compare 4 mode
0x4000041C C   FIELD 12w04 IC4F (=TIM3.CCMR1_Input.IC%sF) (rw): Input capture 4 filter
0x4000041C C   FIELD 15w01 OC4CE (=TIM3.CCMR1_Output.OC%sCE) (rw): Output compare 4 clear enable
0x4000041C C   FIELD 16w01 OC3M_3 (=TIM3.CCMR1_Output.OC%sM_3) (rw): Output compare 3 mode, bit 3
0x4000041C C   FIELD 24w01 OC4M_3 (=TIM3.CCMR1_Output.OC%sM_3) (rw): Output compare 4 mode, bit 3
0x40000420 B  REGISTER CCER: TIM3 capture/compare enable register
0x40000420 C   FIELD 00w01 CC1E (rw): Capture/Compare 1 output enable
0x40000420 C   FIELD 01w01 CC1P (rw): Capture/Compare 1 output Polarity
0x40000420 C   FIELD 03w01 CC1NP (rw): Capture/Compare 1 output Polarity
0x40000420 C   FIELD 04w01 CC2E (rw): Capture/Compare 2 output enable
0x40000420 C   FIELD 05w01 CC2P (rw): Capture/Compare 2 output Polarity
0x40000420 C   FIELD 07w01 CC2NP (rw): Capture/Compare 2 output Polarity
0x40000420 C   FIELD 08w01 CC3E (rw): Capture/Compare 3 output enable
0x40000420 C   FIELD 09w01 CC3P (rw): Capture/Compare 3 output Polarity
0x40000420 C   FIELD 11w01 CC3NP (rw): Capture/Compare 3 output Polarity
0x40000420 C   FIELD 12w01 CC4E (rw): Capture/Compare 4 output enable
0x40000420 C   FIELD 13w01 CC4P (rw): Capture/Compare 4 output Polarity
0x40000420 C   FIELD 15w01 CC4NP (rw): Capture/Compare 4 output Polarity
0x40000424 B  REGISTER CNT: TIM3 counter
0x40000424 C   FIELD 00w16 CNT (rw): Counter value' Non-dithering mode (DITHEN = 0) The register holds the counter value. Dithering mode (DITHEN = 1) The register holds the non-dithered part in CNT[15:0]. The fractional part is not available.
0x40000424 C   FIELD 31w01 UIFCPY (rw): Value depends on IUFREMAP in TIMx_CR1. If UIFREMAP = 0 Reserved If UIFREMAP = 1 UIFCPY: UIF Copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register
0x40000428 B  REGISTER PSC: TIM3 prescaler
0x40000428 C   FIELD 00w16 PSC (rw): Prescaler value The counter clock frequency tim_cnt_ck is equal to ftim_psc_ck / (PSC[15:0] + 1). PSC contains the value to be loaded in the active prescaler register at each update event (including when the counter is cleared through UG bit of TIMx_EGR register or through trigger controller when configured in 'reset mode').
0x4000042C B  REGISTER ARR: TIM3 auto-reload register
0x4000042C C   FIELD 00w20 ARR (rw): Low Auto-reload value ARR is the value to be loaded in the actual auto-reload register. Refer to the for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null. Non-dithering mode (DITHEN = 0) The register holds the auto-reload value. Dithering mode (DITHEN = 1) The register holds the integer part in ARR[19:4]. The ARR[3:0] bitfield contains the dithered part.
0x40000434 B  REGISTER CCR1: capture/compare register
0x40000434 C   FIELD 00w20 CCR (rw): Capture/Compare value
0x40000438 B  REGISTER CCR2: capture/compare register
0x40000438 C   FIELD 00w20 CCR (rw): Capture/Compare value
0x4000043C B  REGISTER CCR3: capture/compare register
0x4000043C C   FIELD 00w20 CCR (rw): Capture/Compare value
0x40000440 B  REGISTER CCR4: capture/compare register
0x40000440 C   FIELD 00w20 CCR (rw): Capture/Compare value
0x40000458 B  REGISTER ECR: TIM3 timer encoder control register
0x40000458 C   FIELD 00w01 IE (rw): Index enable This bit indicates if the Index event resets the counter.
0x40000458 C   FIELD 01w02 IDIR (rw): Index direction This bit indicates in which direction the Index event resets the counter. Note: The IDR[1:0] bitfield must be written when IE bit is reset (index disabled).
0x40000458 C   FIELD 03w02 IBLK (rw): Index blanking This bit indicates if the Index event is conditioned by the tim_ti3 input
0x40000458 C   FIELD 05w01 FIDX (rw): First index This bit indicates if the first index only is taken into account
0x40000458 C   FIELD 06w02 IPOS (rw): Index positioning In quadrature encoder mode (SMS[3:0] = 0001, 0010, 0011, 1110, 1111), this bit indicates in which AB input configuration the Index event resets the counter. In directional clock mode or clock plus direction mode (SMS[3:0] = 1010, 1011, 1100, 1101), these bits indicates on which level the Index event resets the counter. In bidirectional clock mode, this applies for both clock inputs. x0: Index resets the counter when clock is 0 x1: Index resets the counter when clock is 1 Note: IPOS[1] bit is not significant
0x40000458 C   FIELD 16w08 PW (rw): Pulse width This bitfield defines the pulse duration, as following: tPW = PW[7:0] x tPWG
0x40000458 C   FIELD 24w03 PWPRSC (rw): Pulse width prescaler This bitfield sets the clock prescaler for the pulse generator, as following: tPWG = (2(PWPRSC[2:0])) x ttim_ker_ck
0x4000045C B  REGISTER TISEL: TIM3 timer input selection register
0x4000045C C   FIELD 00w04 TI1SEL (rw): Selects tim_ti1[0..15] input ... Refer to for product specific implementation.
0x4000045C C   FIELD 08w04 TI2SEL (rw): Selects tim_ti2[0..15] input ... Refer to for product specific implementation.
0x4000045C C   FIELD 16w04 TI3SEL (rw): Selects tim_ti3[0..15] input ... Refer to for product specific implementation.
0x4000045C C   FIELD 24w04 TI4SEL (rw): Selects tim_ti4[0..15] input ... Refer to for product specific implementation.
0x40000460 B  REGISTER AF1: TIM3 alternate function register 1
0x40000460 C   FIELD 14w04 ETRSEL (rw): etr_in source selection These bits select the etr_in input source. ... Refer to for product specific implementation.
0x40000464 B  REGISTER AF2: TIM3 alternate function register 2
0x40000464 C   FIELD 16w03 OCRSEL (rw): ocref_clr source selection These bits select the ocref_clr input source. ... Refer to for product specific implementation.
0x400007DC B  REGISTER DCR: TIM3 DMA control register
0x400007DC C   FIELD 00w05 DBA (rw): DMA base address This 5-bits vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ...
0x400007DC C   FIELD 08w05 DBL (rw): DMA burst length This 5-bit vector defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below). ... Example: Let us consider the following transfer: DBL = 7 bytes & DBA = TIM2_CR1. If DBL = 7 bytes and DBA = TIM2_CR1 represents the address of the byte to be transferred, the address of the transfer should be given by the following equation: (TIMx_CR1 address) + DBA + (DMA index), where DMA index = DBL In this example, 7 bytes are added to (TIMx_CR1 address) + DBA, which gives us the address from/to which the data are copied. In this case, the transfer is done to 7 registers starting from the following address: (TIMx_CR1 address) + DBA According to the configuration of the DMA Data Size, several cases may occur: If the DMA Data Size is configured in half-words, 16-bit data are transferred to each of the 7 registers. If the DMA Data Size is configured in bytes, the data are also transferred to 7 registers: the first register contains the first MSB byte, the second register, the first LSB byte and so on. So with the transfer Timer, one also has to specify the size of data transferred by DMA.
0x400007DC C   FIELD 16w04 DBSS (rw): DMA burst source selection This bitfield defines the interrupt source that triggers the DMA burst transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address). Others: reserved
0x400007E0 B  REGISTER DMAR: TIM3 DMA address for full transfer
0x400007E0 C   FIELD 00w32 DMAB (rw): DMA register for burst accesses A read or write operation to the DMAR register accesses the register located at the address (TIMx_CR1 address) + (DBA + DMA index) x 4 where TIMx_CR1 address is the address of the control register 1, DBA is the DMA base address configured in TIMx_DCR register, DMA index is automatically controlled by the DMA transfer, and ranges from 0 to DBL (DBL configured in TIMx_DCR).
0x40001000 A PERIPHERAL TIM6
0x40001000 B  REGISTER CR1: TIM6 control register 1
0x40001000 C   FIELD 00w01 CEN (rw): Counter enable CEN is cleared automatically in one-pulse mode, when an update event occurs.
0x40001000 C   FIELD 01w01 UDIS (rw): Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.
0x40001000 C   FIELD 02w01 URS (rw): Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller
0x40001000 C   FIELD 03w01 OPM (rw): One-pulse mode
0x40001000 C   FIELD 07w01 ARPE (rw): Auto-reload preload enable
0x40001000 C   FIELD 11w01 UIFREMAP (rw): UIF status bit remapping
0x40001000 C   FIELD 12w01 DITHEN (rw): Dithering enable Note: The DITHEN bit can only be modified when CEN bit is reset.
0x40001004 B  REGISTER CR2: TIM6 control register 2
0x40001004 C   FIELD 04w03 MMS (rw): Master mode selection These bits are used to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows: Note: The clock of the slave timer or he peripheral receiving the tim_trgo must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.
0x4000100C B  REGISTER DIER: TIM6 DMA/Interrupt enable register
0x4000100C C   FIELD 00w01 UIE (rw): Update interrupt enable
0x4000100C C   FIELD 08w01 UDE (rw): Update DMA request enable
0x40001010 B  REGISTER SR: TIM6 status register
0x40001010 C   FIELD 00w01 UIF (rw): Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. On counter overflow if UDIS = 0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in the TIMx_EGR register, if URS = 0 and UDIS = 0 in the TIMx_CR1 register.
0x40001014 B  REGISTER EGR: TIM6 event generation register
0x40001014 C   FIELD 00w01 UG (wo): Update generation This bit can be set by software, it is automatically cleared by hardware.
0x40001024 B  REGISTER CNT: TIM6 counter
0x40001024 C   FIELD 00w16 CNT (rw): Counter value Non-dithering mode (DITHEN = 0) The register holds the counter value. Dithering mode (DITHEN = 1) The register only holds the non-dithered part in CNT[15:0]. The fractional part is not available.
0x40001024 C   FIELD 31w01 UIFCPY (ro): UIF copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in TIMx_CR1 is reset, bit 31 is reserved and read as 0.
0x40001028 B  REGISTER PSC: TIM6 prescaler
0x40001028 C   FIELD 00w16 PSC (rw): Prescaler value The counter clock frequency ftim_cnt_ck is equal to ftim_psc_ck / (PSC[15:0] + 1). PSC contains the value to be loaded into the active prescaler register at each update event. (including when the counter is cleared through UG bit of TIMx_EGR register.
0x4000102C B  REGISTER ARR: TIM6 auto-reload register
0x4000102C C   FIELD 00w20 ARR (rw): Auto-reload value ARR is the value to be loaded into the actual auto-reload register. Refer to for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null. Non-dithering mode (DITHEN = 0) The register holds the auto-reload value in ARR[15:0]. The ARR[19:16] bits are reserved. Dithering mode (DITHEN = 1) The register holds the integer part in ARR[19:4]. The ARR[3:0] bitfield contains the dithered part.
0x40001400 A PERIPHERAL TIM7
0x40001400 B  REGISTER CR1: TIM7 control register 1
0x40001400 C   FIELD 00w01 CEN (rw): Counter enable CEN is cleared automatically in one-pulse mode, when an update event occurs.
0x40001400 C   FIELD 01w01 UDIS (rw): Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.
0x40001400 C   FIELD 02w01 URS (rw): Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller
0x40001400 C   FIELD 03w01 OPM (rw): One-pulse mode
0x40001400 C   FIELD 07w01 ARPE (rw): Auto-reload preload enable
0x40001400 C   FIELD 11w01 UIFREMAP (rw): UIF status bit remapping
0x40001400 C   FIELD 12w01 DITHEN (rw): Dithering enable Note: The DITHEN bit can only be modified when CEN bit is reset.
0x40001404 B  REGISTER CR2: TIM7 control register 2
0x40001404 C   FIELD 04w03 MMS (rw): Master mode selection These bits are used to select the information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows: Note: The clock of the slave timer or he peripheral receiving the tim_trgo must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.
0x4000140C B  REGISTER DIER: TIM7 DMA/Interrupt enable register
0x4000140C C   FIELD 00w01 UIE (rw): Update interrupt enable
0x4000140C C   FIELD 08w01 UDE (rw): Update DMA request enable
0x40001410 B  REGISTER SR: TIM7 status register
0x40001410 C   FIELD 00w01 UIF (rw): Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. On counter overflow if UDIS = 0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in the TIMx_EGR register, if URS = 0 and UDIS = 0 in the TIMx_CR1 register.
0x40001414 B  REGISTER EGR: TIM7 event generation register
0x40001414 C   FIELD 00w01 UG (wo): Update generation This bit can be set by software, it is automatically cleared by hardware.
0x40001424 B  REGISTER CNT: TIM7 counter
0x40001424 C   FIELD 00w16 CNT (rw): Counter value Non-dithering mode (DITHEN = 0) The register holds the counter value. Dithering mode (DITHEN = 1) The register only holds the non-dithered part in CNT[15:0]. The fractional part is not available.
0x40001424 C   FIELD 31w01 UIFCPY (ro): UIF copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in TIMx_CR1 is reset, bit 31 is reserved and read as 0.
0x40001428 B  REGISTER PSC: TIM7 prescaler
0x40001428 C   FIELD 00w16 PSC (rw): Prescaler value The counter clock frequency ftim_cnt_ck is equal to ftim_psc_ck / (PSC[15:0] + 1). PSC contains the value to be loaded into the active prescaler register at each update event. (including when the counter is cleared through UG bit of TIMx_EGR register.
0x4000142C B  REGISTER ARR: TIM7 auto-reload register
0x4000142C C   FIELD 00w20 ARR (rw): Auto-reload value ARR is the value to be loaded into the actual auto-reload register. Refer to for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null. Non-dithering mode (DITHEN = 0) The register holds the auto-reload value in ARR[15:0]. The ARR[19:16] bits are reserved. Dithering mode (DITHEN = 1) The register holds the integer part in ARR[19:4]. The ARR[3:0] bitfield contains the dithered part.
0x40002C00 A PERIPHERAL WWDG
0x40002C00 B  REGISTER CR: WWDG control register
0x40002C00 C   FIELD 00w07 T (rw): 7-bit counter (MSB to LSB) These bits contain the value of the watchdog counter, decremented every (4096 x 2WDGTB[2:0]) PCLK cycles. A reset is produced when it is decremented from 0x40 to 0x3F (T6 becomes cleared).
0x40002C00 C   FIELD 07w01 WDGA (rw): Activation bit This bit is set by software and only cleared by hardware after a reset. When WDGA = 1, the watchdog can generate a reset.
0x40002C04 B  REGISTER CFR: WWDG configuration register
0x40002C04 C   FIELD 00w07 W (rw): 7-bit window value These bits contain the window value to be compared with the down-counter.
0x40002C04 C   FIELD 09w01 EWI (rw): Early wakeup interrupt When set, an interrupt occurs whenever the counter reaches the value 0x40. This interrupt is only cleared by hardware after a reset.
0x40002C04 C   FIELD 11w03 WDGTB: Timer base The timebase of the prescaler can be modified as follows:
0x40002C08 B  REGISTER SR: WWDG status register
0x40002C08 C   FIELD 00w01 EWIF (rw): Early wakeup interrupt flag This bit is set by hardware when the counter has reached the value 0x40. It must be cleared by software by writing '0'. Writing '1' has no effect. This bit is also set if the interrupt is not enabled.
0x40003000 A PERIPHERAL IWDG
0x40003000 B  REGISTER KR: IWDG key register
0x40003000 C   FIELD 00w16 KEY (wo): Key value (write only, read 0x0000) These bits must be written by software at regular intervals with the key value 0xAAAA, otherwise the watchdog generates a reset when the counter reaches 0. Writing the key value 0x5555 to enable access to the IWDG_PR, IWDG_RLR and IWDG_WINR registers (see ) Writing the key value 0xCCCC starts the watchdog (except if the hardware watchdog option is selected)
0x40003004 B  REGISTER PR: IWDG prescaler register
0x40003004 C   FIELD 00w04 PR (rw): Prescaler divider These bits are write access protected see . They are written by software to select the prescaler divider feeding the counter clock. PVU bit of the must be reset in order to be able to change the prescaler divider. Others: divider / 1024 Note: Reading this register returns the prescaler value from the VDD voltage domain. This value may not be up to date/valid if a write operation to this register is ongoing. For this reason the value read from this register is valid only when the PVU bit in the status register (IWDG_SR) is reset.
0x40003008 B  REGISTER RLR: IWDG reload register
0x40003008 C   FIELD 00w12 RL (rw): Watchdog counter reload value These bits are write access protected see . They are written by software to define the value to be loaded in the watchdog counter each time the value 0xAAAA is written in the . The watchdog counter counts down from this value. The timeout period is a function of this value and the prescaler.clock. It is not recommended to set RL[11:0] to a value lower than 2. The RVU bit in the must be reset to be able to change the reload value. Note: Reading this register returns the reload value from the VDD voltage domain. This value may not be up to date/valid if a write operation to this register is ongoing on it. For this reason the value read from this register is valid only when the RVU bit in the status register (IWDG_SR) is reset.
0x4000300C B  REGISTER SR: IWDG status register
0x4000300C C   FIELD 00w01 PVU (ro): Watchdog prescaler value update This bit is set by hardware to indicate that an update of the prescaler value is ongoing. It is reset by hardware when the prescaler update operation is completed in the VDD voltage domain (takes up to three periods of the IWDG kernel clock iwdg_ker_ck). The prescaler value can be updated only when PVU bit is reset.
0x4000300C C   FIELD 01w01 RVU (ro): Watchdog counter reload value update This bit is set by hardware to indicate that an update of the reload value is ongoing. It is reset by hardware when the reload value update operation is completed in the VDD voltage domain (takes up to three periods of the IWDG kernel clock iwdg_ker_ck). The reload value can be updated only when RVU bit is reset.
0x4000300C C   FIELD 02w01 WVU (ro): Watchdog counter window value update This bit is set by hardware to indicate that an update of the window value is ongoing. It is reset by hardware when the reload value update operation is completed in the VDD voltage domain (takes up to three periods of the IWDG kernel clock iwdg_ker_ck). The window value can be updated only when WVU bit is reset. This bit is generated only if generic 'window' = 1
0x4000300C C   FIELD 03w01 EWU (ro): Watchdog interrupt comparator value update This bit is set by hardware to indicate that an update of the interrupt comparator value (EWIT[11:0]) or an update of the EWIE is ongoing. It is reset by hardware when the update operation is completed in the VDD voltage domain (takes up to three periods of the IWDG kernel clock iwdg_ker_ck). The EWIT[11:0] and EWIE fields can be updated only when EWU bit is reset.
0x4000300C C   FIELD 08w01 ONF (ro): Watchdog enable status bit. Set to ‘1’ by hardware as soon as the IWDG is started. In software mode, it remains to '1' until the IWDG is reset. In hardware mode, this bit is always set to '1'.
0x4000300C C   FIELD 14w01 EWIF (ro): Watchdog early interrupt flag This bit is set to '1' by hardware in order to indicate that an early interrupt is pending. This bit must be cleared by the software by writing the bit EWIC of IWDG_EWCR register to '1'.
0x40003010 B  REGISTER WINR: IWDG window register
0x40003010 C   FIELD 00w12 WIN (rw): Watchdog counter window value These bits are write access protected, see , they contain the high limit of the window value to be compared with the downcounter. To prevent a reset, the IWDCNT downcounter must be reloaded when its value is lower than WIN[11:0]+1 and greater than 1. The WVU bit in the must be reset to be able to change the reload value. Note: Reading this register returns the reload value from the VDD voltage domain. This value may not be valid if a write operation to this register is ongoing. For this reason the value read from this register is valid only when the WVU bit in the (IWDG_SR) is reset.
0x40003014 B  REGISTER EWCR: IWDG early wakeup interrupt register
0x40003014 C   FIELD 00w12 EWIT (rw): Watchdog counter window value These bits are write access protected (see ). They are written by software to define at which position of the IWDCNT down-counter the early wakeup interrupt must be generated. The early interrupt is generated when the IWDCNT is lower or equal to EWIT[11:0] - 1. EWIT[11:0] must be bigger than 1. An interrupt is generated only if EWIE = 1. The EWU bit in the must be reset to be able to change the reload value. Note: Reading this register returns the Early wakeup comparator value and the Interrupt enable bit from the VDD voltage domain. This value may not be up to date/valid if a write operation to this register is ongoing, hence the value read from this register is valid only when the EWU bit in the is reset.
0x40003014 C   FIELD 14w01 EWIC (wo): Watchdog early interrupt acknowledge The software must write a 1 into this bit in order to acknowledge the early wakeup interrupt and to clear the EWIF flag. Writing 0 has not effect, reading this flag returns a 0.
0x40003014 C   FIELD 15w01 EWIE (rw): Watchdog early interrupt enable Set and reset by software. The EWU bit in the must be reset to be able to change the value of this bit.
0x40003400 A PERIPHERAL OPAMP1
0x40003400 B  REGISTER OPAMP1_CSR: OPAMP1 control/status register
0x40003400 C   FIELD 00w01 OPAEN (rw): Operational amplifier Enable Note: If OPAMP1 is unconnected in a specific package, it must remain disabled (keep OPAMP1_CSR register default value).
0x40003400 C   FIELD 01w01 FORCE_VP (rw): Force internal reference on VP (reserved for test)
0x40003400 C   FIELD 02w02 VP_SEL (rw): Non inverted input selection
0x40003400 C   FIELD 05w02 VM_SEL (rw): Inverting input selection
0x40003400 C   FIELD 08w01 OPAHSM (rw): Operational amplifier high-speed mode The operational amplifier must be disable to change this configuration.
0x40003400 C   FIELD 11w01 CALON (rw): Calibration mode enabled
0x40003400 C   FIELD 12w02 CALSEL (rw): Calibration selection It is used to select the offset calibration bus used to generate the internal reference voltage when CALON = 1 or FORCE_VP= 1.
0x40003400 C   FIELD 14w04 PGA_GAIN (rw): Operational amplifier Programmable amplifier gain value
0x40003400 C   FIELD 18w01 USERTRIM (rw): User trimming enable This bit allows to switch from 'factory' AOP offset trimmed values to 'user' AOP offset trimmed values This bit is active for both mode normal and high-power.
0x40003400 C   FIELD 29w01 TSTREF (rw): OPAMP calibration reference voltage output control (reserved for test)
0x40003400 C   FIELD 30w01 CALOUT (ro): Operational amplifier calibration output OPAMP output status flag. During the calibration mode, OPAMP is used as comparator.
0x40003404 B  REGISTER OPAMP1_OTR: OPAMP1 trimming register in normal mode
0x40003404 C   FIELD 00w05 TRIMOFFSETN (rw): Trim for NMOS differential pairs
0x40003404 C   FIELD 08w05 TRIMOFFSETP (rw): Trim for PMOS differential pairs
0x40003408 B  REGISTER OPAMP1_HSOTR: OPAMP1 trimming register in high-speed mode
0x40003408 C   FIELD 00w05 TRIMHSOFFSETN (rw): High-speed mode trim for NMOS differential pairs
0x40003408 C   FIELD 08w05 TRIMHSOFFSETP (rw): High-speed mode trim for PMOS differential pairs
0x4000340C B  REGISTER OPAMP_OR: OPAMP option register
0x40003800 A PERIPHERAL SPI2
0x40003800 B  REGISTER CR1: SPI/I2S control register 1
0x40003800 C   FIELD 00w01 SPE (rw): serial peripheral enable This bit is set by and cleared by software. When SPE=1, SPI data transfer is enabled, SPI_CFG1 and SPI_CFG2 configuration registers, CRCPOLY, UDRDR, IOLOCK bit in the SPI_CR1 register are write protected. They can be changed only when SPE=0. When SPE=0 any SPI operation is stopped and disabled, all the pending requests of the events with enabled interrupt are blocked except the MODF interrupt request (but their pending still propagates the request of the spi_plck clock), the SS output is deactivated at master, the RDY signal keeps not ready status at slave, the internal state machine is reseted, all the FIFOs content is flushed, CRC calculation initialized, receive data register is read zero. SPE is cleared and cannot be set when MODF error flag is active.
0x40003800 C   FIELD 08w01 MASRX (rw): master automatic suspension in Receive mode This bit is set and cleared by software to control continuous SPI transfer in master receiver mode and automatic management in order to avoid overrun condition. When SPI communication is suspended by hardware automatically, it could happen that few bits of next frame are already clocked out due to internal synchronization delay. This is why, the automatic suspension is not quite reliable when size of data drops below 8 bits. In this case, a safe suspension can be achieved by combination with delay inserted between data frames applied when MIDI parameter keeps a non zero value; sum of data size and the interleaved SPI cycles should always produce interval at length of 8 SPI clock periods at minimum. After software clearing of the SUSP bit, the communication resumes and continues by subsequent bits transaction without any next constraint. Prior the SUSP bit is cleared, the user must release the RxFIFO space as much as possible by reading out all the data packets available at RxFIFO based on the RXP flag indication to prevent any subsequent suspension.
0x40003800 C   FIELD 09w01 CSTART (rw): master transfer start This bit can be set by software if SPI is enabled only to start an SPI or I2S/PCM communication. In SPI mode, it is cleared by hardware when end of transfer (EOT) flag is set or when a transaction suspend request is accepted. In I2S/PCM mode, it is also cleared by hardware as described in the . In SPI mode, the bit is taken into account at master mode only. If transmission is enabled, communication starts or continues only if any data is available in the transmission FIFO.
0x40003800 C   FIELD 10w01 CSUSP (wo): master SUSPend request This bit reads as zero. In Master mode, when this bit is set by software, the CSTART bit is reset at the end of the current frame and communication is suspended. The user has to check SUSP flag to check end of the frame transaction. The Master mode communication must be suspended (using this bit or keeping TXDR empty) before going to Low-power mode. Can be used in SPI or I2S mode. After software suspension, SUSP flag has to be cleared and SPI disabled and re-enabled before the next transaction starts.
0x40003800 C   FIELD 11w01 HDDIR (rw): Rx/Tx direction at Half-duplex mode In Half-Duplex configuration the HDDIR bit establishes the Rx/Tx direction of the data transfer. This bit is ignored in Full-Duplex or any Simplex configuration.
0x40003800 C   FIELD 12w01 SSI (rw): internal SS signal input level This bit has an effect only when the SSM bit is set. The value of this bit is forced onto the peripheral SS input internally and the I/O value of the SS pin is ignored.
0x40003800 C   FIELD 13w01 CRC33_17 (rw): 32-bit CRC polynomial configuration
0x40003800 C   FIELD 14w01 RCRCINI (rw): CRC calculation initialization pattern control for receiver
0x40003800 C   FIELD 15w01 TCRCINI (rw): CRC calculation initialization pattern control for transmitter
0x40003800 C   FIELD 16w01 IOLOCK (rw): locking the AF configuration of associated IOs This bit is set by software and cleared by hardware whenever the SPE bit is changed from 1 to 0. When this bit is set, SPI_CFG2 register content cannot be modified. This bit can be set when SPI is disabled only else it is write protected. It is cleared and cannot be set when MODF bit is set.
0x40003804 B  REGISTER CR2: SPI/I2S control register 2
0x40003804 C   FIELD 00w16 TSIZE (rw): number of data at current transfer When these bits are changed by software, the SPI has to be disabled. Endless transaction is initialized when CSTART is set while zero value is stored at TSIZE. TSIZE cannot be set to 0xFFFF respective 0x3FFF value when CRC is enabled. Note: TSIZE[15:10] bits are reserved at limited feature set instances and must be kept at reset value.
0x40003808 B  REGISTER CFG1: SPI/I2S configuration register 1
0x40003808 C   FIELD 00w05 DSIZE (rw): number of bits in at single SPI data frame ..... Note: Maximum data size can be limited up to 16-bits at some instances. At instances with limited set of features, DSIZE2:0] bits are reserved and must be kept at reset state. DSIZE[4:3] bits then control next settings of data size: 00xxx: 8-bits 01xxx: 16-bits 10xxx: 24-bits 11xxx: 32-bits.
0x40003808 C   FIELD 05w04 FTHLV (rw): FIFO threshold level Defines number of data frames at single data packet. Size of the packet should not exceed 1/2 of FIFO space.
0x40003808 C   FIELD 09w01 UDRCFG (rw): behavior of slave transmitter at underrun condition For more details see underrun condition.
0x40003808 C   FIELD 14w01 RXDMAEN (rw): Rx DMA stream enable
0x40003808 C   FIELD 15w01 TXDMAEN (rw): Tx DMA stream enable
0x40003808 C   FIELD 16w05 CRCSIZE (rw): length of CRC frame to be transacted and compared Most significant bits are taken into account from polynomial calculation when CRC result is transacted or compared. The length of the polynomial is not affected by this setting. ..... The value must be set equal or multiply of data size (DSIZE[4:0]). Its maximum size corresponds to DSIZE maximum at the instance. Note: The most significant bit at CRCSIZE bit field is reserved at the peripheral instances where data size is limited to 16-bit.
0x40003808 C   FIELD 22w01 CRCEN (rw): hardware CRC computation enable
0x40003808 C   FIELD 28w03 MBR (rw): master baud rate prescaler setting Note: MBR setting is considered at slave working at TI mode, too (see mode).
0x40003808 C   FIELD 31w01 BPASS (rw): bypass of the prescaler at master baud rate clock generator
0x4000380C B  REGISTER CFG2: SPI/I2S configuration register 2
0x4000380C C   FIELD 00w04 MSSI (rw): Master SS Idleness Specifies an extra delay, expressed in number of SPI clock cycle periods, inserted additionally between active edge of SS opening a session and the beginning of the first data frame of the session in Master mode when SSOE is enabled. ... Note: This feature is not supported in TI mode. To include the delay, the SPI must be disabled and re-enabled between sessions.
0x4000380C C   FIELD 04w04 MIDI (rw): master Inter-Data Idleness Specifies minimum time delay (expressed in SPI clock cycles periods) inserted between two consecutive data frames in Master mode. ... Note: This feature is not supported in TI mode.
0x4000380C C   FIELD 13w01 RDIOM (rw): RDY signal input/output management Note: When DSIZE at the SPI_CFG1 register is configured shorter than 8-bit, the RDIOM bit has to be kept at zero.
0x4000380C C   FIELD 14w01 RDIOP (rw): RDY signal input/output polarity
0x4000380C C   FIELD 15w01 IOSWP (rw): swap functionality of MISO and MOSI pins When this bit is set, the function of MISO and MOSI pins alternate functions are inverted. Original MISO pin becomes MOSI and original MOSI pin becomes MISO. Note: This bit can be also used in PCM and I2S modes to swap SDO and SDI pins.
0x4000380C C   FIELD 17w02 COMM (rw): SPI Communication Mode
0x4000380C C   FIELD 19w03 SP (rw): serial protocol others: reserved, must not be used
0x4000380C C   FIELD 22w01 MASTER (rw): SPI Master
0x4000380C C   FIELD 23w01 LSBFRST (rw): data frame format Note: This bit can be also used in PCM and I2S modes.
0x4000380C C   FIELD 24w01 CPHA (rw): clock phase
0x4000380C C   FIELD 25w01 CPOL (rw): clock polarity
0x4000380C C   FIELD 26w01 SSM (rw): software management of SS signal input When master uses hardware SS output (SSM=0 and SSOE=1) the SS signal input is forced to not active state internally to prevent master mode fault error.
0x4000380C C   FIELD 28w01 SSIOP (rw): SS input/output polarity
0x4000380C C   FIELD 29w01 SSOE (rw): SS output enable This bit is taken into account in Master mode only
0x4000380C C   FIELD 30w01 SSOM (rw): SS output management in Master mode This bit is taken into account in Master mode when SSOE is enabled. It allows the SS output to be configured between two consecutive data transfers.
0x4000380C C   FIELD 31w01 AFCNTR (rw): alternate function GPIOs control This bit is taken into account when SPE=0 only When SPI has to be disabled temporary for a specific configuration reason (e.g. CRC reset, CPHA or HDDIR change) setting this bit prevents any glitches on the associated outputs configured at alternate function mode by keeping them forced at state corresponding the current SPI configuration. Note: This bit can be also used in PCM and I2S modes. Note: The bit AFCNTR must not be set to 1, when the block is in slave mode.
0x40003810 B  REGISTER IER: SPI/I2S interrupt enable register
0x40003810 C   FIELD 00w01 RXPIE (rw): RXP interrupt enable
0x40003810 C   FIELD 01w01 TXPIE (rw): TXP interrupt enable TXPIE is set by software and cleared by TXTF flag set event.
0x40003810 C   FIELD 02w01 DXPIE (rw): DXP interrupt enabled DXPIE is set by software and cleared by TXTF flag set event.
0x40003810 C   FIELD 03w01 EOTIE (rw): EOT, SUSP and TXC interrupt enable
0x40003810 C   FIELD 04w01 TXTFIE (rw): TXTFIE interrupt enable
0x40003810 C   FIELD 05w01 UDRIE (rw): UDR interrupt enable
0x40003810 C   FIELD 06w01 OVRIE (rw): OVR interrupt enable
0x40003810 C   FIELD 07w01 CRCEIE (rw): CRC error interrupt enable
0x40003810 C   FIELD 08w01 TIFREIE (rw): TIFRE interrupt enable
0x40003810 C   FIELD 09w01 MODFIE (rw): mode Fault interrupt enable
0x40003814 B  REGISTER SR: SPI/I2S status register
0x40003814 C   FIELD 00w01 RXP (ro): Rx-Packet available In I2S mode, it must be interpreted as follow: RxFIFO level is lower than FTHLV In I2S mode, it must be interpreted as follow: RxFIFO level is higher or equal to FTHLV RXP flag is changed by hardware. It monitors number of overall data currently available at RxFIFO if SPI is enabled. It has to be checked once a data packet is completely read out from RxFIFO.
0x40003814 C   FIELD 01w01 TXP (ro): Tx-Packet space available In I2S mode, it must be interpreted as follow: there is less than FTHLV free locations in the TxFIFO In I2S mode, it must be interpreted as follow: there is FTHLV or more than FTHLV free locations in the TxFIFO TXP flag is changed by hardware. It monitors overall space currently available at TxFIFO no matter if SPI is enabled or not. It has to be checked once a complete data packet is stored at TxFIFO.
0x40003814 C   FIELD 02w01 DXP (ro): duplex packet DXP flag is set whenever both TXP and RXP flags are set regardless SPI mode.
0x40003814 C   FIELD 03w01 EOT (ro): end of transfer EOT is set by hardware as soon as a full transfer is complete, that is when SPI is re-enabled or when TSIZE number of data have been transmitted and/or received on the SPI. EOT is cleared when SPI is re-enabled or by writing 1 to EOTC bit of SPI_IFCR optionally. EOT flag triggers an interrupt if EOTIE bit is set. If DXP flag is used until TXTF flag is set and DXPIE is cleared, EOT can be used to download the last packets contained into RxFIFO in one-shot. In master, EOT event terminates the data transaction and handles SS output optionally. When CRC is applied, the EOT event is extended over the CRC frame transaction. To restart the internal state machine properly, SPI is strongly suggested to be disabled and re-enabled before next transaction starts despite its setting is not changed.
0x40003814 C   FIELD 04w01 TXTF (ro): transmission transfer filled TXTF is set by hardware as soon as all of the data packets in a transfer have been submitted for transmission by application software or DMA, that is when TSIZE number of data have been pushed into the TxFIFO. This bit is cleared by software write 1 to TXTFC bit of SPI_IFCR exclusively. TXTF flag triggers an interrupt if TXTFIE bit is set. TXTF setting clears the TXPIE and DXPIE masks so to off-load application software from calculating when to disable TXP and DXP interrupts.
0x40003814 C   FIELD 05w01 UDR (ro): underrun This bit is cleared when SPI is re-enabled or by writing 1 to UDRC bit of SPI_IFCR optionally. Note: In SPI mode, the UDR flag applies to Slave mode only. In I2S/PCM mode, (when available) this flag applies to Master and Slave mode
0x40003814 C   FIELD 06w01 OVR (ro): overrun This bit is cleared when SPI is re-enabled or by writing 1 to OVRC bit of SPI_IFCR optionally.
0x40003814 C   FIELD 07w01 CRCE (ro): CRC error This bit is cleared when SPI is re-enabled or by writing 1 to CRCEC bit of SPI_IFCR optionally.
0x40003814 C   FIELD 08w01 TIFRE (ro): TI frame format error This bit is cleared by writing 1 to TIFREC bit of SPI_IFCR exclusively.
0x40003814 C   FIELD 09w01 MODF (ro): mode fault This bit is cleared by writing 1 to MODFC bit of SPI_IFCR exclusively.
0x40003814 C   FIELD 11w01 SUSP (ro): suspension status In Master mode, SUSP is set by hardware either as soon as the current frame is completed after CSUSP request is done or at master automatic suspend receive mode (MASRX bit is set at SPI_CR1 register) on RxFIFO full condition. SUSP generates an interrupt when EOTIE is set. This bit has to be cleared prior SPI is disabled and this is done by writing 1 to SUSPC bit of SPI_IFCR exclusively.
0x40003814 C   FIELD 12w01 TXC (ro): TxFIFO transmission complete The flag behavior depends on TSIZE setting. When TSIZE=0 the TXC is changed by hardware exclusively and it raises each time the TxFIFO becomes empty and there is no activity on the bus. If TSIZE 0 there is no specific reason to monitor TXC as it just copies the EOT flag value including its software clearing. The TXC generates an interrupt when EOTIE is set.
0x40003814 C   FIELD 13w02 RXPLVL (ro): RxFIFO packing level When RXWNE=0 and data size is set up to 16-bit, the value gives number of remaining data frames persisting at RxFIFO. Note: (*): Optional value when data size is set up to 8-bit only. When data size is greater than 16-bit, these bits are always read as 00. In that consequence, the single data frame received at the FIFO cannot be detected neither by RWNE nor by RXPLVL bits if data size is set from 17 to 24 bits. The user then must apply other methods like TSIZE0 or FTHLV=0.
0x40003814 C   FIELD 15w01 RXWNE (ro): RxFIFO word not empty Note: This bit value does not depend on DSIZE setting and keeps together with RXPLVL[1:0] information about RxFIFO occupancy by residual data.
0x40003814 C   FIELD 16w16 CTSIZE (ro): number of data frames remaining in current TSIZE session The value is not quite reliable when traffic is ongoing on bus or during autonomous operation in low-power mode. Note: CTSIZE[15:0] bits are not available in instances with limited set of features.
0x40003818 B  REGISTER IFCR: SPI/I2S interrupt/status flags clear register
0x40003818 C   FIELD 03w01 EOTC (wo): end of transfer flag clear Writing a 1 into this bit clears EOT flag in the SPI_SR register
0x40003818 C   FIELD 04w01 TXTFC (wo): transmission transfer filled flag clear Writing a 1 into this bit clears TXTF flag in the SPI_SR register
0x40003818 C   FIELD 05w01 UDRC (wo): underrun flag clear Writing a 1 into this bit clears UDR flag in the SPI_SR register
0x40003818 C   FIELD 06w01 OVRC (wo): overrun flag clear Writing a 1 into this bit clears OVR flag in the SPI_SR register
0x40003818 C   FIELD 07w01 CRCEC (wo): CRC error flag clear Writing a 1 into this bit clears CRCE flag in the SPI_SR register
0x40003818 C   FIELD 08w01 TIFREC (wo): TI frame format error flag clear Writing a 1 into this bit clears TIFRE flag in the SPI_SR register
0x40003818 C   FIELD 09w01 MODFC (wo): mode fault flag clear Writing a 1 into this bit clears MODF flag in the SPI_SR register
0x40003818 C   FIELD 11w01 SUSPC (wo): SUSPend flag clear Writing a 1 into this bit clears SUSP flag in the SPI_SR register
0x40003820 B  REGISTER TXDR16 (wo): Direct 16-bit access to transmit data register
0x40003820 B  REGISTER TXDR8 (wo): Direct 8-bit access to transmit data register
0x40003820 B  REGISTER TXDR: SPI/I2S transmit data register
0x40003820 C   FIELD 00w08 TXDR: Transmit data register
0x40003820 C   FIELD 00w16 TXDR: Transmit data register
0x40003820 C   FIELD 00w32 TXDR (wo): transmit data register The register serves as an interface with TxFIFO. A write to it accesses TxFIFO. Note: In SPI mode, data is always right-aligned. Alignment of data at I2S mode depends on DATLEN and DATFMT setting. Unused bits are ignored when writing to the register, and read as zero when the register is read. Note: DR can be accessed byte-wise (8-bit access): in this case only one data-byte is written by single access. halfword-wise (16 bit access) in this case 2 data-bytes or 1 halfword-data can be written by single access. word-wise (32 bit access). In this case 4 data-bytes or 2 halfword-data or word-data can be written by single access. Write access of this register less than the configured data size is forbidden.
0x40003830 B  REGISTER RXDR16 (ro): Direct 16-bit access to receive data register
0x40003830 B  REGISTER RXDR8 (ro): Direct 8-bit access to receive data register
0x40003830 B  REGISTER RXDR: SPI/I2S receive data register
0x40003830 C   FIELD 00w08 RXDR: Receive data register
0x40003830 C   FIELD 00w16 RXDR: Receive data register
0x40003830 C   FIELD 00w32 RXDR (ro): receive data register The register serves as an interface with RxFIFO. When it is read, RxFIFO is accessed. Note: In SPI mode, data is always right-aligned. Alignment of data at I2S mode depends on DATLEN and DATFMT setting. Unused bits are read as zero when the register is read. Writing to the register is ignored. Note: DR can be accessed byte-wise (8-bit access): in this case only one data-byte is read by single access halfword-wise (16 bit access) in this case 2 data-bytes or 1 halfword-data can be read by single access word-wise (32 bit access). In this case 4 data-bytes or 2 halfword-data or word-data can be read by single access. Read access of this register less than the configured data size is forbidden.
0x40003840 B  REGISTER CRCPOLY: SPI/I2S polynomial register
0x40003840 C   FIELD 00w32 CRCPOLY (rw): CRC polynomial register This register contains the polynomial for the CRC calculation. The default 9-bit polynomial setting 0x107 corresponds to default 8-bit setting of DSIZE. It is compatible with setting 0x07 used at some other ST products with fixed length of the polynomial string where the most significant bit of the string is always kept hidden. Length of the polynomial is given by the most significant bit of the value stored at this register. It has to be set greater than DSIZE. CRC33_17 bit has to be set additionally with CRCPOLY register when DSIZE is configured to maximum 32-bit or 16-bit size and CRC is enabled (to keep polynomial length grater than data size). Note: CRCPOLY[31:16] bits are reserved at instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored.
0x40003844 B  REGISTER TXCRC: SPI/I2S transmitter CRC register
0x40003844 C   FIELD 00w32 TXCRC (ro): CRC register for transmitter When CRC calculation is enabled, the TXCRC[31:0] bits contain the computed CRC value of the subsequently transmitted bytes. CRC calculation is initialized when the CRCEN bit of SPI_CR1 is written to 1 or when a data block is transacted completely. The CRC is calculated serially using the polynomial programmed in the SPI_CRCPOLY register. The number of bits considered at calculation depends on SPI_CRCPOLY register and CRCSIZE bits settings at SPI_CFG1 register. Note: a read to this register when the communication is ongoing could return an incorrect value. Note: not used for the I2S mode. Note: TXCRC[31-16] bits are reserved at instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored. Note: The configuration of CRCSIZE bit field is not taken into account when the content of this register is read by software. No masking is applied for unused bits at this case.
0x40003848 B  REGISTER RXCRC: SPI/I2S receiver CRC register
0x40003848 C   FIELD 00w32 RXCRC (ro): CRC register for receiver When CRC calculation is enabled, the RXCRC[31:0] bits contain the computed CRC value of the subsequently received bytes. CRC calculation is initialized when the CRCEN bit of SPI_CR1 is written to 1 or when a data block is transacted completely. The CRC is calculated serially using the polynomial programmed in the SPI_CRCPOLY register. The number of bits considered at calculation depends on SPI_CRCPOLY register and CRCSIZE bits settings at SPI_CFG1 register. Note: a read to this register when the communication is ongoing could return an incorrect value. Not used for the I2S mode. RXCRC[31-16] bits are reserved at the peripheral instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored. Note: The configuration of CRCSIZE bit field is not taken into account when the content of this register is read by software. No masking is applied for unused bits at this case.
0x4000384C B  REGISTER UDRDR: SPI/I2S underrun data register
0x4000384C C   FIELD 00w32 UDRDR (rw): data at slave underrun condition The register is taken into account in Slave mode and at underrun condition only. The number of bits considered depends on DSIZE bit settings of the SPI_CFG1 register. Underrun condition handling depends on setting UDRCFG bit at SPI_CFG1 register. Note: UDRDR[31-16] bits are reserved at the peripheral instances with data size limited to 16-bit. There is no constraint when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored.
0x40003850 B  REGISTER I2SCFGR: SPI/I2S configuration register
0x40003850 C   FIELD 00w01 I2SMOD (rw): I2S mode selection
0x40003850 C   FIELD 01w03 I2SCFG (rw): I2S configuration mode others, not used
0x40003850 C   FIELD 04w02 I2SSTD (rw): I2S standard selection For more details on I2S standards, refer to
0x40003850 C   FIELD 07w01 PCMSYNC (rw): PCM frame synchronization
0x40003850 C   FIELD 08w02 DATLEN (rw): data length to be transferred
0x40003850 C   FIELD 10w01 CHLEN (rw): channel length (number of bits per audio channel)
0x40003850 C   FIELD 11w01 CKPOL (rw): serial audio clock polarity
0x40003850 C   FIELD 12w01 FIXCH (rw): fixed channel length in slave
0x40003850 C   FIELD 13w01 WSINV (rw): word select inversion This bit is used to invert the default polarity of WS signal. WS is LOW. In PCM mode the start of frame is indicated by a rising edge. WS is HIGH. In PCM mode the start of frame is indicated by a falling edge.
0x40003850 C   FIELD 14w01 DATFMT (rw): data format
0x40003850 C   FIELD 16w08 I2SDIV (rw): I2S linear prescaler I2SDIV can take any values except the value 1, when ODD is also equal to 1. Refer to for details
0x40003850 C   FIELD 24w01 ODD (rw): odd factor for the prescaler Refer to for details
0x40003850 C   FIELD 25w01 MCKOE (rw): master clock output enable
0x40003C00 A PERIPHERAL SPI3
0x40003C00 B  REGISTER CR1: SPI/I2S control register 1
0x40003C00 C   FIELD 00w01 SPE (rw): serial peripheral enable This bit is set by and cleared by software. When SPE=1, SPI data transfer is enabled, SPI_CFG1 and SPI_CFG2 configuration registers, CRCPOLY, UDRDR, IOLOCK bit in the SPI_CR1 register are write protected. They can be changed only when SPE=0. When SPE=0 any SPI operation is stopped and disabled, all the pending requests of the events with enabled interrupt are blocked except the MODF interrupt request (but their pending still propagates the request of the spi_plck clock), the SS output is deactivated at master, the RDY signal keeps not ready status at slave, the internal state machine is reseted, all the FIFOs content is flushed, CRC calculation initialized, receive data register is read zero. SPE is cleared and cannot be set when MODF error flag is active.
0x40003C00 C   FIELD 08w01 MASRX (rw): master automatic suspension in Receive mode This bit is set and cleared by software to control continuous SPI transfer in master receiver mode and automatic management in order to avoid overrun condition. When SPI communication is suspended by hardware automatically, it could happen that few bits of next frame are already clocked out due to internal synchronization delay. This is why, the automatic suspension is not quite reliable when size of data drops below 8 bits. In this case, a safe suspension can be achieved by combination with delay inserted between data frames applied when MIDI parameter keeps a non zero value; sum of data size and the interleaved SPI cycles should always produce interval at length of 8 SPI clock periods at minimum. After software clearing of the SUSP bit, the communication resumes and continues by subsequent bits transaction without any next constraint. Prior the SUSP bit is cleared, the user must release the RxFIFO space as much as possible by reading out all the data packets available at RxFIFO based on the RXP flag indication to prevent any subsequent suspension.
0x40003C00 C   FIELD 09w01 CSTART (rw): master transfer start This bit can be set by software if SPI is enabled only to start an SPI or I2S/PCM communication. In SPI mode, it is cleared by hardware when end of transfer (EOT) flag is set or when a transaction suspend request is accepted. In I2S/PCM mode, it is also cleared by hardware as described in the . In SPI mode, the bit is taken into account at master mode only. If transmission is enabled, communication starts or continues only if any data is available in the transmission FIFO.
0x40003C00 C   FIELD 10w01 CSUSP (wo): master SUSPend request This bit reads as zero. In Master mode, when this bit is set by software, the CSTART bit is reset at the end of the current frame and communication is suspended. The user has to check SUSP flag to check end of the frame transaction. The Master mode communication must be suspended (using this bit or keeping TXDR empty) before going to Low-power mode. Can be used in SPI or I2S mode. After software suspension, SUSP flag has to be cleared and SPI disabled and re-enabled before the next transaction starts.
0x40003C00 C   FIELD 11w01 HDDIR (rw): Rx/Tx direction at Half-duplex mode In Half-Duplex configuration the HDDIR bit establishes the Rx/Tx direction of the data transfer. This bit is ignored in Full-Duplex or any Simplex configuration.
0x40003C00 C   FIELD 12w01 SSI (rw): internal SS signal input level This bit has an effect only when the SSM bit is set. The value of this bit is forced onto the peripheral SS input internally and the I/O value of the SS pin is ignored.
0x40003C00 C   FIELD 13w01 CRC33_17 (rw): 32-bit CRC polynomial configuration
0x40003C00 C   FIELD 14w01 RCRCINI (rw): CRC calculation initialization pattern control for receiver
0x40003C00 C   FIELD 15w01 TCRCINI (rw): CRC calculation initialization pattern control for transmitter
0x40003C00 C   FIELD 16w01 IOLOCK (rw): locking the AF configuration of associated IOs This bit is set by software and cleared by hardware whenever the SPE bit is changed from 1 to 0. When this bit is set, SPI_CFG2 register content cannot be modified. This bit can be set when SPI is disabled only else it is write protected. It is cleared and cannot be set when MODF bit is set.
0x40003C04 B  REGISTER CR2: SPI/I2S control register 2
0x40003C04 C   FIELD 00w16 TSIZE (rw): number of data at current transfer When these bits are changed by software, the SPI has to be disabled. Endless transaction is initialized when CSTART is set while zero value is stored at TSIZE. TSIZE cannot be set to 0xFFFF respective 0x3FFF value when CRC is enabled. Note: TSIZE[15:10] bits are reserved at limited feature set instances and must be kept at reset value.
0x40003C08 B  REGISTER CFG1: SPI/I2S configuration register 1
0x40003C08 C   FIELD 00w05 DSIZE (rw): number of bits in at single SPI data frame ..... Note: Maximum data size can be limited up to 16-bits at some instances. At instances with limited set of features, DSIZE2:0] bits are reserved and must be kept at reset state. DSIZE[4:3] bits then control next settings of data size: 00xxx: 8-bits 01xxx: 16-bits 10xxx: 24-bits 11xxx: 32-bits.
0x40003C08 C   FIELD 05w04 FTHLV (rw): FIFO threshold level Defines number of data frames at single data packet. Size of the packet should not exceed 1/2 of FIFO space.
0x40003C08 C   FIELD 09w01 UDRCFG (rw): behavior of slave transmitter at underrun condition For more details see underrun condition.
0x40003C08 C   FIELD 14w01 RXDMAEN (rw): Rx DMA stream enable
0x40003C08 C   FIELD 15w01 TXDMAEN (rw): Tx DMA stream enable
0x40003C08 C   FIELD 16w05 CRCSIZE (rw): length of CRC frame to be transacted and compared Most significant bits are taken into account from polynomial calculation when CRC result is transacted or compared. The length of the polynomial is not affected by this setting. ..... The value must be set equal or multiply of data size (DSIZE[4:0]). Its maximum size corresponds to DSIZE maximum at the instance. Note: The most significant bit at CRCSIZE bit field is reserved at the peripheral instances where data size is limited to 16-bit.
0x40003C08 C   FIELD 22w01 CRCEN (rw): hardware CRC computation enable
0x40003C08 C   FIELD 28w03 MBR (rw): master baud rate prescaler setting Note: MBR setting is considered at slave working at TI mode, too (see mode).
0x40003C08 C   FIELD 31w01 BPASS (rw): bypass of the prescaler at master baud rate clock generator
0x40003C0C B  REGISTER CFG2: SPI/I2S configuration register 2
0x40003C0C C   FIELD 00w04 MSSI (rw): Master SS Idleness Specifies an extra delay, expressed in number of SPI clock cycle periods, inserted additionally between active edge of SS opening a session and the beginning of the first data frame of the session in Master mode when SSOE is enabled. ... Note: This feature is not supported in TI mode. To include the delay, the SPI must be disabled and re-enabled between sessions.
0x40003C0C C   FIELD 04w04 MIDI (rw): master Inter-Data Idleness Specifies minimum time delay (expressed in SPI clock cycles periods) inserted between two consecutive data frames in Master mode. ... Note: This feature is not supported in TI mode.
0x40003C0C C   FIELD 13w01 RDIOM (rw): RDY signal input/output management Note: When DSIZE at the SPI_CFG1 register is configured shorter than 8-bit, the RDIOM bit has to be kept at zero.
0x40003C0C C   FIELD 14w01 RDIOP (rw): RDY signal input/output polarity
0x40003C0C C   FIELD 15w01 IOSWP (rw): swap functionality of MISO and MOSI pins When this bit is set, the function of MISO and MOSI pins alternate functions are inverted. Original MISO pin becomes MOSI and original MOSI pin becomes MISO. Note: This bit can be also used in PCM and I2S modes to swap SDO and SDI pins.
0x40003C0C C   FIELD 17w02 COMM (rw): SPI Communication Mode
0x40003C0C C   FIELD 19w03 SP (rw): serial protocol others: reserved, must not be used
0x40003C0C C   FIELD 22w01 MASTER (rw): SPI Master
0x40003C0C C   FIELD 23w01 LSBFRST (rw): data frame format Note: This bit can be also used in PCM and I2S modes.
0x40003C0C C   FIELD 24w01 CPHA (rw): clock phase
0x40003C0C C   FIELD 25w01 CPOL (rw): clock polarity
0x40003C0C C   FIELD 26w01 SSM (rw): software management of SS signal input When master uses hardware SS output (SSM=0 and SSOE=1) the SS signal input is forced to not active state internally to prevent master mode fault error.
0x40003C0C C   FIELD 28w01 SSIOP (rw): SS input/output polarity
0x40003C0C C   FIELD 29w01 SSOE (rw): SS output enable This bit is taken into account in Master mode only
0x40003C0C C   FIELD 30w01 SSOM (rw): SS output management in Master mode This bit is taken into account in Master mode when SSOE is enabled. It allows the SS output to be configured between two consecutive data transfers.
0x40003C0C C   FIELD 31w01 AFCNTR (rw): alternate function GPIOs control This bit is taken into account when SPE=0 only When SPI has to be disabled temporary for a specific configuration reason (e.g. CRC reset, CPHA or HDDIR change) setting this bit prevents any glitches on the associated outputs configured at alternate function mode by keeping them forced at state corresponding the current SPI configuration. Note: This bit can be also used in PCM and I2S modes. Note: The bit AFCNTR must not be set to 1, when the block is in slave mode.
0x40003C10 B  REGISTER IER: SPI/I2S interrupt enable register
0x40003C10 C   FIELD 00w01 RXPIE (rw): RXP interrupt enable
0x40003C10 C   FIELD 01w01 TXPIE (rw): TXP interrupt enable TXPIE is set by software and cleared by TXTF flag set event.
0x40003C10 C   FIELD 02w01 DXPIE (rw): DXP interrupt enabled DXPIE is set by software and cleared by TXTF flag set event.
0x40003C10 C   FIELD 03w01 EOTIE (rw): EOT, SUSP and TXC interrupt enable
0x40003C10 C   FIELD 04w01 TXTFIE (rw): TXTFIE interrupt enable
0x40003C10 C   FIELD 05w01 UDRIE (rw): UDR interrupt enable
0x40003C10 C   FIELD 06w01 OVRIE (rw): OVR interrupt enable
0x40003C10 C   FIELD 07w01 CRCEIE (rw): CRC error interrupt enable
0x40003C10 C   FIELD 08w01 TIFREIE (rw): TIFRE interrupt enable
0x40003C10 C   FIELD 09w01 MODFIE (rw): mode Fault interrupt enable
0x40003C14 B  REGISTER SR: SPI/I2S status register
0x40003C14 C   FIELD 00w01 RXP (ro): Rx-Packet available In I2S mode, it must be interpreted as follow: RxFIFO level is lower than FTHLV In I2S mode, it must be interpreted as follow: RxFIFO level is higher or equal to FTHLV RXP flag is changed by hardware. It monitors number of overall data currently available at RxFIFO if SPI is enabled. It has to be checked once a data packet is completely read out from RxFIFO.
0x40003C14 C   FIELD 01w01 TXP (ro): Tx-Packet space available In I2S mode, it must be interpreted as follow: there is less than FTHLV free locations in the TxFIFO In I2S mode, it must be interpreted as follow: there is FTHLV or more than FTHLV free locations in the TxFIFO TXP flag is changed by hardware. It monitors overall space currently available at TxFIFO no matter if SPI is enabled or not. It has to be checked once a complete data packet is stored at TxFIFO.
0x40003C14 C   FIELD 02w01 DXP (ro): duplex packet DXP flag is set whenever both TXP and RXP flags are set regardless SPI mode.
0x40003C14 C   FIELD 03w01 EOT (ro): end of transfer EOT is set by hardware as soon as a full transfer is complete, that is when SPI is re-enabled or when TSIZE number of data have been transmitted and/or received on the SPI. EOT is cleared when SPI is re-enabled or by writing 1 to EOTC bit of SPI_IFCR optionally. EOT flag triggers an interrupt if EOTIE bit is set. If DXP flag is used until TXTF flag is set and DXPIE is cleared, EOT can be used to download the last packets contained into RxFIFO in one-shot. In master, EOT event terminates the data transaction and handles SS output optionally. When CRC is applied, the EOT event is extended over the CRC frame transaction. To restart the internal state machine properly, SPI is strongly suggested to be disabled and re-enabled before next transaction starts despite its setting is not changed.
0x40003C14 C   FIELD 04w01 TXTF (ro): transmission transfer filled TXTF is set by hardware as soon as all of the data packets in a transfer have been submitted for transmission by application software or DMA, that is when TSIZE number of data have been pushed into the TxFIFO. This bit is cleared by software write 1 to TXTFC bit of SPI_IFCR exclusively. TXTF flag triggers an interrupt if TXTFIE bit is set. TXTF setting clears the TXPIE and DXPIE masks so to off-load application software from calculating when to disable TXP and DXP interrupts.
0x40003C14 C   FIELD 05w01 UDR (ro): underrun This bit is cleared when SPI is re-enabled or by writing 1 to UDRC bit of SPI_IFCR optionally. Note: In SPI mode, the UDR flag applies to Slave mode only. In I2S/PCM mode, (when available) this flag applies to Master and Slave mode
0x40003C14 C   FIELD 06w01 OVR (ro): overrun This bit is cleared when SPI is re-enabled or by writing 1 to OVRC bit of SPI_IFCR optionally.
0x40003C14 C   FIELD 07w01 CRCE (ro): CRC error This bit is cleared when SPI is re-enabled or by writing 1 to CRCEC bit of SPI_IFCR optionally.
0x40003C14 C   FIELD 08w01 TIFRE (ro): TI frame format error This bit is cleared by writing 1 to TIFREC bit of SPI_IFCR exclusively.
0x40003C14 C   FIELD 09w01 MODF (ro): mode fault This bit is cleared by writing 1 to MODFC bit of SPI_IFCR exclusively.
0x40003C14 C   FIELD 11w01 SUSP (ro): suspension status In Master mode, SUSP is set by hardware either as soon as the current frame is completed after CSUSP request is done or at master automatic suspend receive mode (MASRX bit is set at SPI_CR1 register) on RxFIFO full condition. SUSP generates an interrupt when EOTIE is set. This bit has to be cleared prior SPI is disabled and this is done by writing 1 to SUSPC bit of SPI_IFCR exclusively.
0x40003C14 C   FIELD 12w01 TXC (ro): TxFIFO transmission complete The flag behavior depends on TSIZE setting. When TSIZE=0 the TXC is changed by hardware exclusively and it raises each time the TxFIFO becomes empty and there is no activity on the bus. If TSIZE 0 there is no specific reason to monitor TXC as it just copies the EOT flag value including its software clearing. The TXC generates an interrupt when EOTIE is set.
0x40003C14 C   FIELD 13w02 RXPLVL (ro): RxFIFO packing level When RXWNE=0 and data size is set up to 16-bit, the value gives number of remaining data frames persisting at RxFIFO. Note: (*): Optional value when data size is set up to 8-bit only. When data size is greater than 16-bit, these bits are always read as 00. In that consequence, the single data frame received at the FIFO cannot be detected neither by RWNE nor by RXPLVL bits if data size is set from 17 to 24 bits. The user then must apply other methods like TSIZE0 or FTHLV=0.
0x40003C14 C   FIELD 15w01 RXWNE (ro): RxFIFO word not empty Note: This bit value does not depend on DSIZE setting and keeps together with RXPLVL[1:0] information about RxFIFO occupancy by residual data.
0x40003C14 C   FIELD 16w16 CTSIZE (ro): number of data frames remaining in current TSIZE session The value is not quite reliable when traffic is ongoing on bus or during autonomous operation in low-power mode. Note: CTSIZE[15:0] bits are not available in instances with limited set of features.
0x40003C18 B  REGISTER IFCR: SPI/I2S interrupt/status flags clear register
0x40003C18 C   FIELD 03w01 EOTC (wo): end of transfer flag clear Writing a 1 into this bit clears EOT flag in the SPI_SR register
0x40003C18 C   FIELD 04w01 TXTFC (wo): transmission transfer filled flag clear Writing a 1 into this bit clears TXTF flag in the SPI_SR register
0x40003C18 C   FIELD 05w01 UDRC (wo): underrun flag clear Writing a 1 into this bit clears UDR flag in the SPI_SR register
0x40003C18 C   FIELD 06w01 OVRC (wo): overrun flag clear Writing a 1 into this bit clears OVR flag in the SPI_SR register
0x40003C18 C   FIELD 07w01 CRCEC (wo): CRC error flag clear Writing a 1 into this bit clears CRCE flag in the SPI_SR register
0x40003C18 C   FIELD 08w01 TIFREC (wo): TI frame format error flag clear Writing a 1 into this bit clears TIFRE flag in the SPI_SR register
0x40003C18 C   FIELD 09w01 MODFC (wo): mode fault flag clear Writing a 1 into this bit clears MODF flag in the SPI_SR register
0x40003C18 C   FIELD 11w01 SUSPC (wo): SUSPend flag clear Writing a 1 into this bit clears SUSP flag in the SPI_SR register
0x40003C20 B  REGISTER TXDR16 (wo): Direct 16-bit access to transmit data register
0x40003C20 B  REGISTER TXDR8 (wo): Direct 8-bit access to transmit data register
0x40003C20 B  REGISTER TXDR: SPI/I2S transmit data register
0x40003C20 C   FIELD 00w08 TXDR: Transmit data register
0x40003C20 C   FIELD 00w16 TXDR: Transmit data register
0x40003C20 C   FIELD 00w32 TXDR (wo): transmit data register The register serves as an interface with TxFIFO. A write to it accesses TxFIFO. Note: In SPI mode, data is always right-aligned. Alignment of data at I2S mode depends on DATLEN and DATFMT setting. Unused bits are ignored when writing to the register, and read as zero when the register is read. Note: DR can be accessed byte-wise (8-bit access): in this case only one data-byte is written by single access. halfword-wise (16 bit access) in this case 2 data-bytes or 1 halfword-data can be written by single access. word-wise (32 bit access). In this case 4 data-bytes or 2 halfword-data or word-data can be written by single access. Write access of this register less than the configured data size is forbidden.
0x40003C30 B  REGISTER RXDR16 (ro): Direct 16-bit access to receive data register
0x40003C30 B  REGISTER RXDR8 (ro): Direct 8-bit access to receive data register
0x40003C30 B  REGISTER RXDR: SPI/I2S receive data register
0x40003C30 C   FIELD 00w08 RXDR: Receive data register
0x40003C30 C   FIELD 00w16 RXDR: Receive data register
0x40003C30 C   FIELD 00w32 RXDR (ro): receive data register The register serves as an interface with RxFIFO. When it is read, RxFIFO is accessed. Note: In SPI mode, data is always right-aligned. Alignment of data at I2S mode depends on DATLEN and DATFMT setting. Unused bits are read as zero when the register is read. Writing to the register is ignored. Note: DR can be accessed byte-wise (8-bit access): in this case only one data-byte is read by single access halfword-wise (16 bit access) in this case 2 data-bytes or 1 halfword-data can be read by single access word-wise (32 bit access). In this case 4 data-bytes or 2 halfword-data or word-data can be read by single access. Read access of this register less than the configured data size is forbidden.
0x40003C40 B  REGISTER CRCPOLY: SPI/I2S polynomial register
0x40003C40 C   FIELD 00w32 CRCPOLY (rw): CRC polynomial register This register contains the polynomial for the CRC calculation. The default 9-bit polynomial setting 0x107 corresponds to default 8-bit setting of DSIZE. It is compatible with setting 0x07 used at some other ST products with fixed length of the polynomial string where the most significant bit of the string is always kept hidden. Length of the polynomial is given by the most significant bit of the value stored at this register. It has to be set greater than DSIZE. CRC33_17 bit has to be set additionally with CRCPOLY register when DSIZE is configured to maximum 32-bit or 16-bit size and CRC is enabled (to keep polynomial length grater than data size). Note: CRCPOLY[31:16] bits are reserved at instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored.
0x40003C44 B  REGISTER TXCRC: SPI/I2S transmitter CRC register
0x40003C44 C   FIELD 00w32 TXCRC (ro): CRC register for transmitter When CRC calculation is enabled, the TXCRC[31:0] bits contain the computed CRC value of the subsequently transmitted bytes. CRC calculation is initialized when the CRCEN bit of SPI_CR1 is written to 1 or when a data block is transacted completely. The CRC is calculated serially using the polynomial programmed in the SPI_CRCPOLY register. The number of bits considered at calculation depends on SPI_CRCPOLY register and CRCSIZE bits settings at SPI_CFG1 register. Note: a read to this register when the communication is ongoing could return an incorrect value. Note: not used for the I2S mode. Note: TXCRC[31-16] bits are reserved at instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored. Note: The configuration of CRCSIZE bit field is not taken into account when the content of this register is read by software. No masking is applied for unused bits at this case.
0x40003C48 B  REGISTER RXCRC: SPI/I2S receiver CRC register
0x40003C48 C   FIELD 00w32 RXCRC (ro): CRC register for receiver When CRC calculation is enabled, the RXCRC[31:0] bits contain the computed CRC value of the subsequently received bytes. CRC calculation is initialized when the CRCEN bit of SPI_CR1 is written to 1 or when a data block is transacted completely. The CRC is calculated serially using the polynomial programmed in the SPI_CRCPOLY register. The number of bits considered at calculation depends on SPI_CRCPOLY register and CRCSIZE bits settings at SPI_CFG1 register. Note: a read to this register when the communication is ongoing could return an incorrect value. Not used for the I2S mode. RXCRC[31-16] bits are reserved at the peripheral instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored. Note: The configuration of CRCSIZE bit field is not taken into account when the content of this register is read by software. No masking is applied for unused bits at this case.
0x40003C4C B  REGISTER UDRDR: SPI/I2S underrun data register
0x40003C4C C   FIELD 00w32 UDRDR (rw): data at slave underrun condition The register is taken into account in Slave mode and at underrun condition only. The number of bits considered depends on DSIZE bit settings of the SPI_CFG1 register. Underrun condition handling depends on setting UDRCFG bit at SPI_CFG1 register. Note: UDRDR[31-16] bits are reserved at the peripheral instances with data size limited to 16-bit. There is no constraint when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored.
0x40003C50 B  REGISTER I2SCFGR: SPI/I2S configuration register
0x40003C50 C   FIELD 00w01 I2SMOD (rw): I2S mode selection
0x40003C50 C   FIELD 01w03 I2SCFG (rw): I2S configuration mode others, not used
0x40003C50 C   FIELD 04w02 I2SSTD (rw): I2S standard selection For more details on I2S standards, refer to
0x40003C50 C   FIELD 07w01 PCMSYNC (rw): PCM frame synchronization
0x40003C50 C   FIELD 08w02 DATLEN (rw): data length to be transferred
0x40003C50 C   FIELD 10w01 CHLEN (rw): channel length (number of bits per audio channel)
0x40003C50 C   FIELD 11w01 CKPOL (rw): serial audio clock polarity
0x40003C50 C   FIELD 12w01 FIXCH (rw): fixed channel length in slave
0x40003C50 C   FIELD 13w01 WSINV (rw): word select inversion This bit is used to invert the default polarity of WS signal. WS is LOW. In PCM mode the start of frame is indicated by a rising edge. WS is HIGH. In PCM mode the start of frame is indicated by a falling edge.
0x40003C50 C   FIELD 14w01 DATFMT (rw): data format
0x40003C50 C   FIELD 16w08 I2SDIV (rw): I2S linear prescaler I2SDIV can take any values except the value 1, when ODD is also equal to 1. Refer to for details
0x40003C50 C   FIELD 24w01 ODD (rw): odd factor for the prescaler Refer to for details
0x40003C50 C   FIELD 25w01 MCKOE (rw): master clock output enable
0x40004000 A PERIPHERAL COMP
0x40004000 B  REGISTER COMP_SR: Comparator status register
0x40004000 C   FIELD 00w01 C1VAL (ro): COMP Channel1 output status bit This bit is read-only. It reflects the current COMP Channel1 output taking into account POLARITY and BLANKING bits effect.
0x40004000 C   FIELD 16w01 C1IF (ro): COMP Channel1 interrupt flag This bit is set by hardware when the COMP Channel1 output is set This bit is cleared by software writing 1 the CC1IF bit in the COMP_ICFR register.
0x40004004 B  REGISTER COMP_ICFR: Comparator interrupt clear flag register
0x40004004 C   FIELD 16w01 CC1IF (rw): Clear COMP Channel1 interrupt flag Writing 1 clears the C1IF flag in the COMP_SR register.
0x4000400C B  REGISTER COMP_CFGR1: Comparator configuration register 1
0x4000400C C   FIELD 00w01 EN (rw): COMP Channel1 enable This bit is set and cleared by software (only if LOCK not set). It enables the COMP Channel1.
0x4000400C C   FIELD 01w01 BRGEN (rw): Scaler bridge enable This bit is set and cleared by software (only if LOCK not set). This bit enables the bridge of the scaler. If SCALEN is set and BRGEN is reset, all four scaler outputs provide the same level V REF_COMP (similar to V REFINT ). If SCALEN and BRGEN are set, the four scaler outputs provide V REF_COMP , 3/4 V REF_COMP , 1/2 V REF_COMP and 1/4 V REF_COMP levels, respectively.
0x4000400C C   FIELD 02w01 SCALEN (rw): Voltage scaler enable This bit is set and cleared by software (only if LOCK not set). This bit enables the V REFINT scaler for the COMP channels.
0x4000400C C   FIELD 03w01 POLARITY (rw): COMP channel1 polarity selection This bit is set and cleared by software (only if LOCK not set). It inverts COMP channel1 polarity.
0x4000400C C   FIELD 06w01 ITEN (rw): COMP channel1 interrupt enable This bit is set and cleared by software (only if LOCK not set). This bit enable the interrupt generation of the COMP channel1.
0x4000400C C   FIELD 08w02 HYST (rw): COMP channel1 hysteresis selection These bits are set and cleared by software (only if LOCK not set). They select the hysteresis voltage of the COMP channel1.
0x4000400C C   FIELD 12w02 PWRMODE (rw): Power mode of the COMP channel1 These bits are set and cleared by software (only if LOCK not set). They control the power/speed of the COMP channel1.
0x4000400C C   FIELD 16w04 INMSEL (rw): COMP channel1 inverting input selection These bits are set and cleared by software (only if LOCK not set). They select which input is connected to the input minus of the COMP channel. Note: See Table 146: COMP1 inverting input assignment for more details.
0x4000400C C   FIELD 20w01 INPSEL1 (rw): COMP noninverting input selection This bit is set and cleared by software (only if LOCK not set). They select which input is connected to the positive input of COMP channel. Note: See Table 145: COMP1 noninverting input assignment for more details.
0x4000400C C   FIELD 22w01 INPSEL2 (rw): COMP noninverting input selection This bit is set and cleared by software (only if LOCK not set). They select which input is connected to the positive input of the COMP channel. See Table 145: COMP1 noninverting input assignment for more details.
0x4000400C C   FIELD 24w04 BLANKING (rw): COMP Channel1 blanking source selection Bits of this field are set and cleared by software (only if LOCK not set). The field selects the input source for COMP Channel1 output blanking: All other values: reserved
0x4000400C C   FIELD 31w01 LOCK (rw): Lock This bit is set by software and cleared by a hardware system reset. It locks the whole content of the COMP Channel1 configuration register COMP_CFGR1[31:0]
0x40004010 B  REGISTER COMP_CFGR2: Comparator configuration register 2
0x40004010 C   FIELD 04w01 INPSEL0 (rw): COMP non-inverting input selection This bit is set and cleared by software (only if LOCK not set). They select which input is connected to the positive input of COMP channel. See Table 145: COMP1 noninverting input assignment for more details.
0x40004010 C   FIELD 31w01 LOCK (rw): Lock This bit is set by software and cleared by a hardware system reset. It locks the whole content of the COMP Channel1 configuration register COMP_CFGR2[31:0]
0x40004400 A PERIPHERAL USART2
0x40004400 B  REGISTER CR1: USART control register 1 [alternate]
0x40004400 C   FIELD 00w01 UE (rw): USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.
0x40004400 C   FIELD 01w01 UESM (rw): USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode, and clear it when exiting low-power mode.
0x40004400 C   FIELD 02w01 RE (rw): Receiver enable This bit enables the receiver. It is set and cleared by software.
0x40004400 C   FIELD 03w01 TE (rw): Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0' followed by '1') sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1'. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.
0x40004400 C   FIELD 04w01 IDLEIE (rw): IDLE interrupt enable This bit is set and cleared by software.
0x40004400 C   FIELD 05w01 RXNEIE (rw): RXFIFO not empty interrupt enable This bit is set and cleared by software.
0x40004400 C   FIELD 06w01 TCIE (rw): Transmission complete interrupt enable This bit is set and cleared by software.
0x40004400 C   FIELD 07w01 TXEIE (rw): TXFIFO not full interrupt enable This bit is set and cleared by software.
0x40004400 C   FIELD 08w01 PEIE (rw): PE interrupt enable This bit is set and cleared by software.
0x40004400 C   FIELD 09w01 PS (rw): Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE=0).
0x40004400 C   FIELD 10w01 PCE (rw): Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M=1; 8th bit if M=0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE=0).
0x40004400 C   FIELD 11w01 WAKE (rw): Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40004400 C   FIELD 12w01 M0 (rw): Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE=0).
0x40004400 C   FIELD 13w01 MME (rw): Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.
0x40004400 C   FIELD 14w01 CMIE (rw): Character match interrupt enable This bit is set and cleared by software.
0x40004400 C   FIELD 15w01 OVER8 (rw): Oversampling mode This bit can only be written when the USART is disabled (UE=0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.
0x40004400 C   FIELD 16w05 DEDT (rw): Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004400 C   FIELD 21w05 DEAT (rw): Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004400 C   FIELD 26w01 RTOIE (rw): Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .
0x40004400 C   FIELD 27w01 EOBIE (rw): End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004400 C   FIELD 28w01 M1 (rw): Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00': 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01': 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10': 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE=0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and auto baud rate (0x7F and 0x55 frames detection) are not supported.
0x40004400 C   FIELD 29w01 FIFOEN (rw): FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0). Note: FIFO mode can be used on standard UART communication, in SPI Master/Slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.
0x40004400 C   FIELD 30w01 TXFEIE (rw): TXFIFO empty interrupt enable This bit is set and cleared by software.
0x40004400 C   FIELD 31w01 RXFFIE (rw): RXFIFO Full interrupt enable This bit is set and cleared by software.
0x40004404 B  REGISTER CR2: USART control register 2
0x40004404 C   FIELD 00w01 SLVEN (rw): Synchronous Slave mode enable When the SLVEN bit is set, the Synchronous slave mode is enabled. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004404 C   FIELD 03w01 DIS_NSS (rw): When the DIS_NSS bit is set, the NSS pin input is ignored. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004404 C   FIELD 04w01 ADDM7 (rw): 7-bit Address Detection/4-bit Address Detection This bit is for selection between 4-bit address detection or 7-bit address detection. This bit can only be written when the USART is disabled (UE=0) Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.
0x40004404 C   FIELD 05w01 LBDL (rw): LIN break detection length This bit is for selection between 11 bit or 10 bit break detection. This bit can only be written when the USART is disabled (UE=0). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004404 C   FIELD 06w01 LBDIE (rw): LIN break detection interrupt enable Break interrupt mask (break detection using break delimiter). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004404 C   FIELD 08w01 LBCL (rw): Last bit clock pulse This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in Synchronous mode. The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register. This bit can only be written when the USART is disabled (UE=0). Note: If Synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004404 C   FIELD 09w01 CPHA (rw): Clock phase This bit is used to select the phase of the clock output on the SCLK pin in Synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see and ) This bit can only be written when the USART is disabled (UE=0). Note: If Synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004404 C   FIELD 10w01 CPOL (rw): Clock polarity This bit enables the user to select the polarity of the clock output on the SCLK pin in Synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship This bit can only be written when the USART is disabled (UE=0). Note: If Synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004404 C   FIELD 11w01 CLKEN (rw): Clock enable This bit enables the user to enable the SCLK pin. This bit can only be written when the USART is disabled (UE=0). Note: If neither Synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to . In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected: UE = 0 SCEN = 1 GTPR configuration CLKEN= 1 UE = 1
0x40004404 C   FIELD 12w02 STOP (rw): stop bits These bits are used for programming the stop bits. This bitfield can only be written when the USART is disabled (UE=0).
0x40004404 C   FIELD 14w01 LINEN (rw): LIN mode enable This bit is set and cleared by software. The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks. This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004404 C   FIELD 15w01 SWAP (rw): Swap TX/RX pins This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40004404 C   FIELD 16w01 RXINV (rw): RX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the RX line. This bitfield can only be written when the USART is disabled (UE=0).
0x40004404 C   FIELD 17w01 TXINV (rw): TX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the TX line. This bitfield can only be written when the USART is disabled (UE=0).
0x40004404 C   FIELD 18w01 DATAINV (rw): Binary data inversion This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40004404 C   FIELD 19w01 MSBFIRST (rw): Most significant bit first This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40004404 C   FIELD 20w01 ABREN (rw): Auto baud rate enable This bit is set and cleared by software. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .
0x40004404 C   FIELD 21w02 ABRMOD (rw): Auto baud rate mode These bits are set and cleared by software. This bitfield can only be written when ABREN = 0 or the USART is disabled (UE=0). Note: If DATAINV=1 and/or MSBFIRST=1 the patterns must be the same on the line, for example 0xAA for MSBFIRST) If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .
0x40004404 C   FIELD 23w01 RTOEN (rw): Receiver timeout enable This bit is set and cleared by software. When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register). Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .
0x40004404 C   FIELD 24w08 ADD (rw): Address of the USART node These bits give the address of the USART node in Mute mode or a character code to be recognized in low-power or Run mode: In Mute mode: they are used in multiprocessor communication to wakeup from Mute mode with 4-bit/7-bit address mark detection. The MSB of the character sent by the transmitter should be equal to 1. In 4-bit address mark detection, only ADD[3:0] bits are used. In low-power mode: they are used for wake up from low-power mode on character match. When WUS[1:0] is programmed to 0b00 (WUF active on address match), the wakeup from low-power mode is performed when the received character corresponds to the character programmed through ADD[6:0] or ADD[3:0] bitfield (depending on ADDM7 bit), and WUF interrupt is enabled by setting WUFIE bit. The MSB of the character sent by transmitter should be equal to 1. In Run mode with Mute mode inactive (for example, end-of-block detection in ModBus protocol): the whole received character (8 bits) is compared to ADD[7:0] value and CMF flag is set on match. An interrupt is generated if the CMIE bit is set. These bits can only be written when the reception is disabled (RE = 0) or when the USART is disabled (UE = 0).
0x40004408 B  REGISTER CR3: USART control register 3
0x40004408 C   FIELD 00w01 EIE (rw): Error interrupt enable Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FE=1 or ORE=1 or NE=1or UDR = 1 in the USART_ISR register).
0x40004408 C   FIELD 01w01 IREN (rw): IrDA mode enable This bit is set and cleared by software. This bit can only be written when the USART is disabled (UE=0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004408 C   FIELD 02w01 IRLP (rw): IrDA low-power This bit is used for selecting between normal and low-power IrDA modes This bit can only be written when the USART is disabled (UE=0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004408 C   FIELD 03w01 HDSEL (rw): Half-duplex selection Selection of Single-wire Half-duplex mode This bit can only be written when the USART is disabled (UE=0).
0x40004408 C   FIELD 04w01 NACK (rw): Smartcard NACK enable This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004408 C   FIELD 05w01 SCEN (rw): Smartcard mode enable This bit is used for enabling Smartcard mode. This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004408 C   FIELD 06w01 DMAR (rw): DMA enable receiver This bit is set/reset by software
0x40004408 C   FIELD 07w01 DMAT (rw): DMA enable transmitter This bit is set/reset by software
0x40004408 C   FIELD 08w01 RTSE (rw): RTS enable This bit can only be written when the USART is disabled (UE=0). Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004408 C   FIELD 09w01 CTSE (rw): CTS enable This bit can only be written when the USART is disabled (UE=0) Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004408 C   FIELD 10w01 CTSIE (rw): CTS interrupt enable Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004408 C   FIELD 11w01 ONEBIT (rw): One sample bit method enable This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled. This bit can only be written when the USART is disabled (UE=0).
0x40004408 C   FIELD 12w01 OVRDIS (rw): Overrun Disable This bit is used to disable the receive overrun detection. the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data are written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used. This bit can only be written when the USART is disabled (UE=0). Note: This control bit enables checking the communication flow w/o reading the data
0x40004408 C   FIELD 13w01 DDRE (rw): DMA Disable on Reception Error This bit can only be written when the USART is disabled (UE=0). Note: The reception errors are: parity error, framing error or noise error.
0x40004408 C   FIELD 14w01 DEM (rw): Driver enable mode This bit enables the user to activate the external transceiver control, through the DE signal. This bit can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .
0x40004408 C   FIELD 15w01 DEP (rw): Driver enable polarity selection This bit can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004408 C   FIELD 17w03 SCARCNT (rw): Smartcard auto-retry count This bitfield specifies the number of retries for transmission and reception in Smartcard mode. In Transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set). In Reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set). This bitfield must be programmed only when the USART is disabled (UE=0). When the USART is enabled (UE=1), this bitfield may only be written to 0x0, in order to stop retransmission. Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004408 C   FIELD 20w02 WUS: Wakeup from low-power mode interrupt flag selection This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag). This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40004408 C   FIELD 22w01 WUFIE (rw): Wakeup from low-power mode interrupt enable This bit is set and cleared by software. Note: WUFIE must be set before entering in low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40004408 C   FIELD 23w01 TXFTIE (rw): TXFIFO threshold interrupt enable This bit is set and cleared by software.
0x40004408 C   FIELD 24w01 TCBGTIE (rw): Transmission Complete before guard time, interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004408 C   FIELD 25w03 RXFTCFG (rw): Receive FIFO threshold configuration Remaining combinations: Reserved
0x40004408 C   FIELD 28w01 RXFTIE (rw): RXFIFO threshold interrupt enable This bit is set and cleared by software.
0x40004408 C   FIELD 29w03 TXFTCFG (rw): TXFIFO threshold configuration Remaining combinations: Reserved
0x4000440C B  REGISTER BRR: USART baud rate register
0x4000440C C   FIELD 00w16 BRR (rw): USART baud rate BRR[15:4] BRR[15:4] correspond to USARTDIV[15:4] BRR[3:0] When OVER8 = 0, BRR[3:0] = USARTDIV[3:0]. When OVER8 = 1: BRR[2:0] = USARTDIV[3:0] shifted 1 bit to the right. BRR[3] must be kept cleared.
0x40004410 B  REGISTER GTPR: USART guard time and prescaler register
0x40004410 C   FIELD 00w08 PSC (rw): Prescaler value PSC[7:0] = IrDA Normal and Low-power baud rate This bitfield is used for programming the prescaler for dividing the USART source clock to achieve the low-power frequency: The source clock is divided by the value given in the register (8 significant bits): ... PSC[4:0]: Prescaler value This bitfield is used for programming the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency: ... This bitfield can only be written when the USART is disabled (UE=0). Note: Bits [7:5] must be kept cleared if Smartcard mode is used. This bitfield is reserved and forced by hardware to '0' when the Smartcard and IrDA modes are not supported. Refer to .
0x40004410 C   FIELD 08w08 GT (rw): Guard time value This bitfield is used to program the Guard time value in terms of number of baud clock periods. This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value. This bitfield can only be written when the USART is disabled (UE=0). Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004414 B  REGISTER RTOR: USART receiver timeout register
0x40004414 C   FIELD 00w24 RTO (rw): Receiver timeout value This bitfield gives the Receiver timeout value in terms of number of bit duration. In Standard mode, the RTOF flag is set if, after the last received character, no new start bit is detected for more than the RTO value. In Smartcard mode, this value is used to implement the CWT and BWT. See Smartcard chapter for more details. In the standard, the CWT/BWT measurement is done starting from the start bit of the last received character. Note: This value must only be programmed once per received character.
0x40004414 C   FIELD 24w08 BLEN (rw): Block Length This bitfield gives the Block length in Smartcard T=1 Reception. Its value equals the number of information characters + the length of the Epilogue Field (1-LEC/2-CRC) - 1. Examples: BLEN = 0 - 0 information characters + LEC BLEN = 1 - 0 information characters + CRC BLEN = 255 - 254 information characters + CRC (total 256 characters)) In Smartcard mode, the Block length counter is reset when TXE=0 (TXFE = 0 in case FIFO mode is enabled). This bitfield can be used also in other modes. In this case, the Block length counter is reset when RE=0 (receiver disabled) and/or when the EOBCF bit is written to 1. Note: This value can be programmed after the start of the block reception (using the data from the LEN character in the Prologue Field). It must be programmed only once per received block.
0x40004418 B  REGISTER RQR: USART request register
0x40004418 C   FIELD 00w01 ABRRQ (wo): auto baud rate request Writing 1 to this bit resets the ABRF and ABRE flags in the USART_ISR and requests an automatic baud rate measurement on the next received data frame. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .
0x40004418 C   FIELD 01w01 SBKRQ (wo): Send break request Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available. Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit.
0x40004418 C   FIELD 02w01 MMRQ (wo): Mute mode request Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.
0x40004418 C   FIELD 03w01 RXFRQ (wo): Receive data flush request Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE. This enables to discard the received data without reading them, and avoid an overrun condition.
0x40004418 C   FIELD 04w01 TXFRQ (wo): Transmit data flush request When FIFO mode is disabled, writing '1' to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes. Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register.
0x4000441C B  REGISTER ISR: USART interrupt and status register
0x4000441C C   FIELD 00w01 PE (ro): Parity error This bit is set by hardware when a parity error occurs in Reception mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.
0x4000441C C   FIELD 01w01 FE (ro): Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.
0x4000441C C   FIELD 02w01 NE (ro): Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NFCF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page 2317). This error is associated with the character in the USART_RDR.
0x4000441C C   FIELD 03w01 ORE (ro): Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXFNEIE=1 or EIE = 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.
0x4000441C C   FIELD 04w01 IDLE (ro): Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE=1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME=1), IDLE is set if the USART is not mute (RWU=0), whatever the Mute mode selected by the WAKE bit. If RWU=1, IDLE is not set.
0x4000441C C   FIELD 05w01 RXFNE (ro): RXFIFO not empty RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO. RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXFNEIE=1 in the USART_CR1 register.
0x4000441C C   FIELD 06w01 TC (ro): Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. The TC flag behaves as follows: When TDN = 0, the TC flag is set when the transmission of a frame containing data is complete and when TXE/TXFE is set. When TDN is equal to the number of data in the TXFIFO, the TC flag is set when TXFIFO is empty and TDN is reached. When TDN is greater than the number of data in the TXFIFO, TC remains cleared until the TXFIFO is filled again to reach the programmed number of data to be transferred. When TDN is less than the number of data in the TXFIFO, TC is set when TDN is reached even if the TXFIFO is not empty. An interrupt is generated if TCIE=1 in the USART_CR1 register. TC bit is cleared by software by writing 1 to the TCCF in the USART_ICR register or by writing to the USART_TDR register.
0x4000441C C   FIELD 07w01 TXFNF (ro): TXFIFO not full TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR. An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register. Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE is set at the same time). This bit is used during single buffer transmission.
0x4000441C C   FIELD 08w01 LBDF (ro): LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .
0x4000441C C   FIELD 09w01 CTSIF (ro): CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE=1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.
0x4000441C C   FIELD 10w01 CTS (ro): CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.
0x4000441C C   FIELD 11w01 RTOF (ro): Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE=1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.
0x4000441C C   FIELD 12w01 EOBF (ro): End of block flag This bit is set by hardware when a complete block has been received (for example T=1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if EOBIE = 1 in the USART_CR1 register. It is cleared by software, writing 1 to EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .
0x4000441C C   FIELD 13w01 UDR (ro): SPI slave underrun error flag In Slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .
0x4000441C C   FIELD 14w01 ABRE (ro): Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.
0x4000441C C   FIELD 15w01 ABRF (ro): Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABRE=1) (ABRE, RXFNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.
0x4000441C C   FIELD 16w01 BUSY (ro): Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).
0x4000441C C   FIELD 17w01 CMF (ro): Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE=1in the USART_CR1 register.
0x4000441C C   FIELD 18w01 SBKF (ro): Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.
0x4000441C C   FIELD 19w01 RWU (ro): Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .
0x4000441C C   FIELD 20w01 WUF (ro): Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE=1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .
0x4000441C C   FIELD 21w01 TEACK (ro): Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE=0, followed by TE=1 in the USART_CR1 register, in order to respect the TE=0 minimum period.
0x4000441C C   FIELD 22w01 REACK (ro): Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .
0x4000441C C   FIELD 23w01 TXFE (ro): TXFIFO Empty This bit is set by hardware when TXFIFO is Empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register. An interrupt is generated if the TXFEIE bit =1 (bit 30) in the USART_CR1 register.
0x4000441C C   FIELD 24w01 RXFF (ro): RXFIFO Full This bit is set by hardware when the number of received data corresponds to RXFIFO size + 1 (RXFIFO full + 1 data in the USART_RDR register. An interrupt is generated if the RXFFIE bit =1 in the USART_CR1 register.
0x4000441C C   FIELD 25w01 TCBGT (ro): Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE=1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1'. Refer to on page 2297.
0x4000441C C   FIELD 26w01 RXFT (ro): RXFIFO threshold flag This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit =1 (bit 27) in the USART_CR3 register. Note: When the RXFTCFG threshold is configured to '101', RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.
0x4000441C C   FIELD 27w01 TXFT (ro): TXFIFO threshold flag This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit =1 (bit 31) in the USART_CR3 register.
0x40004420 B  REGISTER ICR: USART interrupt flag clear register
0x40004420 C   FIELD 00w01 PECF (wo): Parity error clear flag Writing 1 to this bit clears the PE flag in the USART_ISR register.
0x40004420 C   FIELD 01w01 FECF (wo): Framing error clear flag Writing 1 to this bit clears the FE flag in the USART_ISR register.
0x40004420 C   FIELD 02w01 NECF (wo): Noise detected clear flag Writing 1 to this bit clears the NE flag in the USART_ISR register.
0x40004420 C   FIELD 03w01 ORECF (wo): Overrun error clear flag Writing 1 to this bit clears the ORE flag in the USART_ISR register.
0x40004420 C   FIELD 04w01 IDLECF (wo): Idle line detected clear flag Writing 1 to this bit clears the IDLE flag in the USART_ISR register.
0x40004420 C   FIELD 05w01 TXFECF (wo): TXFIFO empty clear flag Writing 1 to this bit clears the TXFE flag in the USART_ISR register.
0x40004420 C   FIELD 06w01 TCCF (wo): Transmission complete clear flag Writing 1 to this bit clears the TC flag in the USART_ISR register.
0x40004420 C   FIELD 07w01 TCBGTCF (wo): Transmission complete before Guard time clear flag Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.
0x40004420 C   FIELD 08w01 LBDCF (wo): LIN break detection clear flag Writing 1 to this bit clears the LBDF flag in the USART_ISR register. Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004420 C   FIELD 09w01 CTSCF (wo): CTS clear flag Writing 1 to this bit clears the CTSIF flag in the USART_ISR register. Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004420 C   FIELD 11w01 RTOCF (wo): Receiver timeout clear flag Writing 1 to this bit clears the RTOF flag in the USART_ISR register. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40004420 C   FIELD 12w01 EOBCF (wo): End of block clear flag Writing 1 to this bit clears the EOBF flag in the USART_ISR register. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004420 C   FIELD 13w01 UDRCF (wo): SPI slave underrun clear flag Writing 1 to this bit clears the UDRF flag in the USART_ISR register. Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to
0x40004420 C   FIELD 17w01 CMCF (wo): Character match clear flag Writing 1 to this bit clears the CMF flag in the USART_ISR register.
0x40004420 C   FIELD 20w01 WUCF (wo): Wakeup from low-power mode clear flag Writing 1 to this bit clears the WUF flag in the USART_ISR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40004424 B  REGISTER RDR: USART receive data register
0x40004424 C   FIELD 00w09 RDR (ro): Receive data value Contains the received data character. The RDR register provides the parallel interface between the input shift register and the internal bus (see ). When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
0x40004428 B  REGISTER TDR: USART transmit data register
0x40004428 C   FIELD 00w09 TDR (rw): Transmit data value Contains the data character to be transmitted. The USART_TDR register provides the parallel interface between the internal bus and the output shift register (see ). When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register), the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect because it is replaced by the parity. Note: This register must be written only when TXE/TXFNF=1.
0x4000442C B  REGISTER PRESC: USART prescaler register
0x4000442C C   FIELD 00w04 PRESCALER (rw): Clock prescaler The USART input clock can be divided by a prescaler factor: Remaining combinations: Reserved Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is equal to '1011' i.e. input clock divided by 256.
0x40004800 A PERIPHERAL USART3
0x40004800 B  REGISTER CR1: USART control register 1 [alternate]
0x40004800 C   FIELD 00w01 UE (rw): USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.
0x40004800 C   FIELD 01w01 UESM (rw): USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode, and clear it when exiting low-power mode.
0x40004800 C   FIELD 02w01 RE (rw): Receiver enable This bit enables the receiver. It is set and cleared by software.
0x40004800 C   FIELD 03w01 TE (rw): Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0' followed by '1') sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1'. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.
0x40004800 C   FIELD 04w01 IDLEIE (rw): IDLE interrupt enable This bit is set and cleared by software.
0x40004800 C   FIELD 05w01 RXNEIE (rw): RXFIFO not empty interrupt enable This bit is set and cleared by software.
0x40004800 C   FIELD 06w01 TCIE (rw): Transmission complete interrupt enable This bit is set and cleared by software.
0x40004800 C   FIELD 07w01 TXEIE (rw): TXFIFO not full interrupt enable This bit is set and cleared by software.
0x40004800 C   FIELD 08w01 PEIE (rw): PE interrupt enable This bit is set and cleared by software.
0x40004800 C   FIELD 09w01 PS (rw): Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE=0).
0x40004800 C   FIELD 10w01 PCE (rw): Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M=1; 8th bit if M=0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE=0).
0x40004800 C   FIELD 11w01 WAKE (rw): Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40004800 C   FIELD 12w01 M0 (rw): Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE=0).
0x40004800 C   FIELD 13w01 MME (rw): Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.
0x40004800 C   FIELD 14w01 CMIE (rw): Character match interrupt enable This bit is set and cleared by software.
0x40004800 C   FIELD 15w01 OVER8 (rw): Oversampling mode This bit can only be written when the USART is disabled (UE=0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.
0x40004800 C   FIELD 16w05 DEDT (rw): Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004800 C   FIELD 21w05 DEAT (rw): Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004800 C   FIELD 26w01 RTOIE (rw): Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .
0x40004800 C   FIELD 27w01 EOBIE (rw): End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004800 C   FIELD 28w01 M1 (rw): Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00': 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01': 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10': 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE=0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and auto baud rate (0x7F and 0x55 frames detection) are not supported.
0x40004800 C   FIELD 29w01 FIFOEN (rw): FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0). Note: FIFO mode can be used on standard UART communication, in SPI Master/Slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.
0x40004800 C   FIELD 30w01 TXFEIE (rw): TXFIFO empty interrupt enable This bit is set and cleared by software.
0x40004800 C   FIELD 31w01 RXFFIE (rw): RXFIFO Full interrupt enable This bit is set and cleared by software.
0x40004804 B  REGISTER CR2: USART control register 2
0x40004804 C   FIELD 00w01 SLVEN (rw): Synchronous Slave mode enable When the SLVEN bit is set, the Synchronous slave mode is enabled. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004804 C   FIELD 03w01 DIS_NSS (rw): When the DIS_NSS bit is set, the NSS pin input is ignored. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004804 C   FIELD 04w01 ADDM7 (rw): 7-bit Address Detection/4-bit Address Detection This bit is for selection between 4-bit address detection or 7-bit address detection. This bit can only be written when the USART is disabled (UE=0) Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.
0x40004804 C   FIELD 05w01 LBDL (rw): LIN break detection length This bit is for selection between 11 bit or 10 bit break detection. This bit can only be written when the USART is disabled (UE=0). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004804 C   FIELD 06w01 LBDIE (rw): LIN break detection interrupt enable Break interrupt mask (break detection using break delimiter). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004804 C   FIELD 08w01 LBCL (rw): Last bit clock pulse This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in Synchronous mode. The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register. This bit can only be written when the USART is disabled (UE=0). Note: If Synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004804 C   FIELD 09w01 CPHA (rw): Clock phase This bit is used to select the phase of the clock output on the SCLK pin in Synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see and ) This bit can only be written when the USART is disabled (UE=0). Note: If Synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004804 C   FIELD 10w01 CPOL (rw): Clock polarity This bit enables the user to select the polarity of the clock output on the SCLK pin in Synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship This bit can only be written when the USART is disabled (UE=0). Note: If Synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004804 C   FIELD 11w01 CLKEN (rw): Clock enable This bit enables the user to enable the SCLK pin. This bit can only be written when the USART is disabled (UE=0). Note: If neither Synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to . In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected: UE = 0 SCEN = 1 GTPR configuration CLKEN= 1 UE = 1
0x40004804 C   FIELD 12w02 STOP (rw): stop bits These bits are used for programming the stop bits. This bitfield can only be written when the USART is disabled (UE=0).
0x40004804 C   FIELD 14w01 LINEN (rw): LIN mode enable This bit is set and cleared by software. The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks. This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004804 C   FIELD 15w01 SWAP (rw): Swap TX/RX pins This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40004804 C   FIELD 16w01 RXINV (rw): RX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the RX line. This bitfield can only be written when the USART is disabled (UE=0).
0x40004804 C   FIELD 17w01 TXINV (rw): TX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the TX line. This bitfield can only be written when the USART is disabled (UE=0).
0x40004804 C   FIELD 18w01 DATAINV (rw): Binary data inversion This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40004804 C   FIELD 19w01 MSBFIRST (rw): Most significant bit first This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40004804 C   FIELD 20w01 ABREN (rw): Auto baud rate enable This bit is set and cleared by software. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .
0x40004804 C   FIELD 21w02 ABRMOD (rw): Auto baud rate mode These bits are set and cleared by software. This bitfield can only be written when ABREN = 0 or the USART is disabled (UE=0). Note: If DATAINV=1 and/or MSBFIRST=1 the patterns must be the same on the line, for example 0xAA for MSBFIRST) If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .
0x40004804 C   FIELD 23w01 RTOEN (rw): Receiver timeout enable This bit is set and cleared by software. When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register). Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .
0x40004804 C   FIELD 24w08 ADD (rw): Address of the USART node These bits give the address of the USART node in Mute mode or a character code to be recognized in low-power or Run mode: In Mute mode: they are used in multiprocessor communication to wakeup from Mute mode with 4-bit/7-bit address mark detection. The MSB of the character sent by the transmitter should be equal to 1. In 4-bit address mark detection, only ADD[3:0] bits are used. In low-power mode: they are used for wake up from low-power mode on character match. When WUS[1:0] is programmed to 0b00 (WUF active on address match), the wakeup from low-power mode is performed when the received character corresponds to the character programmed through ADD[6:0] or ADD[3:0] bitfield (depending on ADDM7 bit), and WUF interrupt is enabled by setting WUFIE bit. The MSB of the character sent by transmitter should be equal to 1. In Run mode with Mute mode inactive (for example, end-of-block detection in ModBus protocol): the whole received character (8 bits) is compared to ADD[7:0] value and CMF flag is set on match. An interrupt is generated if the CMIE bit is set. These bits can only be written when the reception is disabled (RE = 0) or when the USART is disabled (UE = 0).
0x40004808 B  REGISTER CR3: USART control register 3
0x40004808 C   FIELD 00w01 EIE (rw): Error interrupt enable Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FE=1 or ORE=1 or NE=1or UDR = 1 in the USART_ISR register).
0x40004808 C   FIELD 01w01 IREN (rw): IrDA mode enable This bit is set and cleared by software. This bit can only be written when the USART is disabled (UE=0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004808 C   FIELD 02w01 IRLP (rw): IrDA low-power This bit is used for selecting between normal and low-power IrDA modes This bit can only be written when the USART is disabled (UE=0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004808 C   FIELD 03w01 HDSEL (rw): Half-duplex selection Selection of Single-wire Half-duplex mode This bit can only be written when the USART is disabled (UE=0).
0x40004808 C   FIELD 04w01 NACK (rw): Smartcard NACK enable This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004808 C   FIELD 05w01 SCEN (rw): Smartcard mode enable This bit is used for enabling Smartcard mode. This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004808 C   FIELD 06w01 DMAR (rw): DMA enable receiver This bit is set/reset by software
0x40004808 C   FIELD 07w01 DMAT (rw): DMA enable transmitter This bit is set/reset by software
0x40004808 C   FIELD 08w01 RTSE (rw): RTS enable This bit can only be written when the USART is disabled (UE=0). Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004808 C   FIELD 09w01 CTSE (rw): CTS enable This bit can only be written when the USART is disabled (UE=0) Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004808 C   FIELD 10w01 CTSIE (rw): CTS interrupt enable Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004808 C   FIELD 11w01 ONEBIT (rw): One sample bit method enable This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled. This bit can only be written when the USART is disabled (UE=0).
0x40004808 C   FIELD 12w01 OVRDIS (rw): Overrun Disable This bit is used to disable the receive overrun detection. the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data are written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used. This bit can only be written when the USART is disabled (UE=0). Note: This control bit enables checking the communication flow w/o reading the data
0x40004808 C   FIELD 13w01 DDRE (rw): DMA Disable on Reception Error This bit can only be written when the USART is disabled (UE=0). Note: The reception errors are: parity error, framing error or noise error.
0x40004808 C   FIELD 14w01 DEM (rw): Driver enable mode This bit enables the user to activate the external transceiver control, through the DE signal. This bit can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .
0x40004808 C   FIELD 15w01 DEP (rw): Driver enable polarity selection This bit can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004808 C   FIELD 17w03 SCARCNT (rw): Smartcard auto-retry count This bitfield specifies the number of retries for transmission and reception in Smartcard mode. In Transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set). In Reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set). This bitfield must be programmed only when the USART is disabled (UE=0). When the USART is enabled (UE=1), this bitfield may only be written to 0x0, in order to stop retransmission. Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004808 C   FIELD 20w02 WUS: Wakeup from low-power mode interrupt flag selection This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag). This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40004808 C   FIELD 22w01 WUFIE (rw): Wakeup from low-power mode interrupt enable This bit is set and cleared by software. Note: WUFIE must be set before entering in low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40004808 C   FIELD 23w01 TXFTIE (rw): TXFIFO threshold interrupt enable This bit is set and cleared by software.
0x40004808 C   FIELD 24w01 TCBGTIE (rw): Transmission Complete before guard time, interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004808 C   FIELD 25w03 RXFTCFG (rw): Receive FIFO threshold configuration Remaining combinations: Reserved
0x40004808 C   FIELD 28w01 RXFTIE (rw): RXFIFO threshold interrupt enable This bit is set and cleared by software.
0x40004808 C   FIELD 29w03 TXFTCFG (rw): TXFIFO threshold configuration Remaining combinations: Reserved
0x4000480C B  REGISTER BRR: USART baud rate register
0x4000480C C   FIELD 00w16 BRR (rw): USART baud rate BRR[15:4] BRR[15:4] correspond to USARTDIV[15:4] BRR[3:0] When OVER8 = 0, BRR[3:0] = USARTDIV[3:0]. When OVER8 = 1: BRR[2:0] = USARTDIV[3:0] shifted 1 bit to the right. BRR[3] must be kept cleared.
0x40004810 B  REGISTER GTPR: USART guard time and prescaler register
0x40004810 C   FIELD 00w08 PSC (rw): Prescaler value PSC[7:0] = IrDA Normal and Low-power baud rate This bitfield is used for programming the prescaler for dividing the USART source clock to achieve the low-power frequency: The source clock is divided by the value given in the register (8 significant bits): ... PSC[4:0]: Prescaler value This bitfield is used for programming the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency: ... This bitfield can only be written when the USART is disabled (UE=0). Note: Bits [7:5] must be kept cleared if Smartcard mode is used. This bitfield is reserved and forced by hardware to '0' when the Smartcard and IrDA modes are not supported. Refer to .
0x40004810 C   FIELD 08w08 GT (rw): Guard time value This bitfield is used to program the Guard time value in terms of number of baud clock periods. This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value. This bitfield can only be written when the USART is disabled (UE=0). Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004814 B  REGISTER RTOR: USART receiver timeout register
0x40004814 C   FIELD 00w24 RTO (rw): Receiver timeout value This bitfield gives the Receiver timeout value in terms of number of bit duration. In Standard mode, the RTOF flag is set if, after the last received character, no new start bit is detected for more than the RTO value. In Smartcard mode, this value is used to implement the CWT and BWT. See Smartcard chapter for more details. In the standard, the CWT/BWT measurement is done starting from the start bit of the last received character. Note: This value must only be programmed once per received character.
0x40004814 C   FIELD 24w08 BLEN (rw): Block Length This bitfield gives the Block length in Smartcard T=1 Reception. Its value equals the number of information characters + the length of the Epilogue Field (1-LEC/2-CRC) - 1. Examples: BLEN = 0 - 0 information characters + LEC BLEN = 1 - 0 information characters + CRC BLEN = 255 - 254 information characters + CRC (total 256 characters)) In Smartcard mode, the Block length counter is reset when TXE=0 (TXFE = 0 in case FIFO mode is enabled). This bitfield can be used also in other modes. In this case, the Block length counter is reset when RE=0 (receiver disabled) and/or when the EOBCF bit is written to 1. Note: This value can be programmed after the start of the block reception (using the data from the LEN character in the Prologue Field). It must be programmed only once per received block.
0x40004818 B  REGISTER RQR: USART request register
0x40004818 C   FIELD 00w01 ABRRQ (wo): auto baud rate request Writing 1 to this bit resets the ABRF and ABRE flags in the USART_ISR and requests an automatic baud rate measurement on the next received data frame. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .
0x40004818 C   FIELD 01w01 SBKRQ (wo): Send break request Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available. Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit.
0x40004818 C   FIELD 02w01 MMRQ (wo): Mute mode request Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.
0x40004818 C   FIELD 03w01 RXFRQ (wo): Receive data flush request Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE. This enables to discard the received data without reading them, and avoid an overrun condition.
0x40004818 C   FIELD 04w01 TXFRQ (wo): Transmit data flush request When FIFO mode is disabled, writing '1' to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes. Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register.
0x4000481C B  REGISTER ISR: USART interrupt and status register
0x4000481C C   FIELD 00w01 PE (ro): Parity error This bit is set by hardware when a parity error occurs in Reception mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.
0x4000481C C   FIELD 01w01 FE (ro): Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.
0x4000481C C   FIELD 02w01 NE (ro): Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NFCF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page 2317). This error is associated with the character in the USART_RDR.
0x4000481C C   FIELD 03w01 ORE (ro): Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXFNEIE=1 or EIE = 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.
0x4000481C C   FIELD 04w01 IDLE (ro): Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE=1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME=1), IDLE is set if the USART is not mute (RWU=0), whatever the Mute mode selected by the WAKE bit. If RWU=1, IDLE is not set.
0x4000481C C   FIELD 05w01 RXFNE (ro): RXFIFO not empty RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO. RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXFNEIE=1 in the USART_CR1 register.
0x4000481C C   FIELD 06w01 TC (ro): Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. The TC flag behaves as follows: When TDN = 0, the TC flag is set when the transmission of a frame containing data is complete and when TXE/TXFE is set. When TDN is equal to the number of data in the TXFIFO, the TC flag is set when TXFIFO is empty and TDN is reached. When TDN is greater than the number of data in the TXFIFO, TC remains cleared until the TXFIFO is filled again to reach the programmed number of data to be transferred. When TDN is less than the number of data in the TXFIFO, TC is set when TDN is reached even if the TXFIFO is not empty. An interrupt is generated if TCIE=1 in the USART_CR1 register. TC bit is cleared by software by writing 1 to the TCCF in the USART_ICR register or by writing to the USART_TDR register.
0x4000481C C   FIELD 07w01 TXFNF (ro): TXFIFO not full TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR. An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register. Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE is set at the same time). This bit is used during single buffer transmission.
0x4000481C C   FIELD 08w01 LBDF (ro): LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .
0x4000481C C   FIELD 09w01 CTSIF (ro): CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE=1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.
0x4000481C C   FIELD 10w01 CTS (ro): CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.
0x4000481C C   FIELD 11w01 RTOF (ro): Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE=1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.
0x4000481C C   FIELD 12w01 EOBF (ro): End of block flag This bit is set by hardware when a complete block has been received (for example T=1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if EOBIE = 1 in the USART_CR1 register. It is cleared by software, writing 1 to EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .
0x4000481C C   FIELD 13w01 UDR (ro): SPI slave underrun error flag In Slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .
0x4000481C C   FIELD 14w01 ABRE (ro): Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.
0x4000481C C   FIELD 15w01 ABRF (ro): Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABRE=1) (ABRE, RXFNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.
0x4000481C C   FIELD 16w01 BUSY (ro): Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).
0x4000481C C   FIELD 17w01 CMF (ro): Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE=1in the USART_CR1 register.
0x4000481C C   FIELD 18w01 SBKF (ro): Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.
0x4000481C C   FIELD 19w01 RWU (ro): Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .
0x4000481C C   FIELD 20w01 WUF (ro): Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE=1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .
0x4000481C C   FIELD 21w01 TEACK (ro): Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE=0, followed by TE=1 in the USART_CR1 register, in order to respect the TE=0 minimum period.
0x4000481C C   FIELD 22w01 REACK (ro): Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .
0x4000481C C   FIELD 23w01 TXFE (ro): TXFIFO Empty This bit is set by hardware when TXFIFO is Empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register. An interrupt is generated if the TXFEIE bit =1 (bit 30) in the USART_CR1 register.
0x4000481C C   FIELD 24w01 RXFF (ro): RXFIFO Full This bit is set by hardware when the number of received data corresponds to RXFIFO size + 1 (RXFIFO full + 1 data in the USART_RDR register. An interrupt is generated if the RXFFIE bit =1 in the USART_CR1 register.
0x4000481C C   FIELD 25w01 TCBGT (ro): Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE=1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1'. Refer to on page 2297.
0x4000481C C   FIELD 26w01 RXFT (ro): RXFIFO threshold flag This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit =1 (bit 27) in the USART_CR3 register. Note: When the RXFTCFG threshold is configured to '101', RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.
0x4000481C C   FIELD 27w01 TXFT (ro): TXFIFO threshold flag This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit =1 (bit 31) in the USART_CR3 register.
0x40004820 B  REGISTER ICR: USART interrupt flag clear register
0x40004820 C   FIELD 00w01 PECF (wo): Parity error clear flag Writing 1 to this bit clears the PE flag in the USART_ISR register.
0x40004820 C   FIELD 01w01 FECF (wo): Framing error clear flag Writing 1 to this bit clears the FE flag in the USART_ISR register.
0x40004820 C   FIELD 02w01 NECF (wo): Noise detected clear flag Writing 1 to this bit clears the NE flag in the USART_ISR register.
0x40004820 C   FIELD 03w01 ORECF (wo): Overrun error clear flag Writing 1 to this bit clears the ORE flag in the USART_ISR register.
0x40004820 C   FIELD 04w01 IDLECF (wo): Idle line detected clear flag Writing 1 to this bit clears the IDLE flag in the USART_ISR register.
0x40004820 C   FIELD 05w01 TXFECF (wo): TXFIFO empty clear flag Writing 1 to this bit clears the TXFE flag in the USART_ISR register.
0x40004820 C   FIELD 06w01 TCCF (wo): Transmission complete clear flag Writing 1 to this bit clears the TC flag in the USART_ISR register.
0x40004820 C   FIELD 07w01 TCBGTCF (wo): Transmission complete before Guard time clear flag Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.
0x40004820 C   FIELD 08w01 LBDCF (wo): LIN break detection clear flag Writing 1 to this bit clears the LBDF flag in the USART_ISR register. Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004820 C   FIELD 09w01 CTSCF (wo): CTS clear flag Writing 1 to this bit clears the CTSIF flag in the USART_ISR register. Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40004820 C   FIELD 11w01 RTOCF (wo): Receiver timeout clear flag Writing 1 to this bit clears the RTOF flag in the USART_ISR register. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40004820 C   FIELD 12w01 EOBCF (wo): End of block clear flag Writing 1 to this bit clears the EOBF flag in the USART_ISR register. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40004820 C   FIELD 13w01 UDRCF (wo): SPI slave underrun clear flag Writing 1 to this bit clears the UDRF flag in the USART_ISR register. Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to
0x40004820 C   FIELD 17w01 CMCF (wo): Character match clear flag Writing 1 to this bit clears the CMF flag in the USART_ISR register.
0x40004820 C   FIELD 20w01 WUCF (wo): Wakeup from low-power mode clear flag Writing 1 to this bit clears the WUF flag in the USART_ISR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40004824 B  REGISTER RDR: USART receive data register
0x40004824 C   FIELD 00w09 RDR (ro): Receive data value Contains the received data character. The RDR register provides the parallel interface between the input shift register and the internal bus (see ). When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
0x40004828 B  REGISTER TDR: USART transmit data register
0x40004828 C   FIELD 00w09 TDR (rw): Transmit data value Contains the data character to be transmitted. The USART_TDR register provides the parallel interface between the internal bus and the output shift register (see ). When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register), the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect because it is replaced by the parity. Note: This register must be written only when TXE/TXFNF=1.
0x4000482C B  REGISTER PRESC: USART prescaler register
0x4000482C C   FIELD 00w04 PRESCALER (rw): Clock prescaler The USART input clock can be divided by a prescaler factor: Remaining combinations: Reserved Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is equal to '1011' i.e. input clock divided by 256.
0x40005400 A PERIPHERAL I2C1
0x40005400 B  REGISTER CR1: I2C control register 1
0x40005400 C   FIELD 00w01 PE (rw): Peripheral enable Note: When PE=0, the I2C SCL and SDA lines are released. Internal state machines and status bits are put back to their reset value. When cleared, PE must be kept low for at least 3 APB clock cycles.
0x40005400 C   FIELD 01w01 TXIE (rw): TX Interrupt enable
0x40005400 C   FIELD 02w01 RXIE (rw): RX Interrupt enable
0x40005400 C   FIELD 03w01 ADDRIE (rw): Address match Interrupt enable (slave only)
0x40005400 C   FIELD 04w01 NACKIE (rw): Not acknowledge received Interrupt enable
0x40005400 C   FIELD 05w01 STOPIE (rw): Stop detection Interrupt enable
0x40005400 C   FIELD 06w01 TCIE (rw): Transfer Complete interrupt enable Note: Any of these events generate an interrupt: Transfer Complete (TC) Transfer Complete Reload (TCR)
0x40005400 C   FIELD 07w01 ERRIE (rw): Error interrupts enable Note: Any of these errors generate an interrupt: Arbitration Loss (ARLO) Bus Error detection (BERR) Overrun/Underrun (OVR) Timeout detection (TIMEOUT) PEC error detection (PECERR) Alert pin event detection (ALERT)
0x40005400 C   FIELD 08w04 DNF (rw): Digital noise filter These bits are used to configure the digital noise filter on SDA and SCL input. The digital filter, filters spikes with a length of up to DNF[3:0] * tI2CCLK ... Note: If the analog filter is also enabled, the digital filter is added to the analog filter. This filter can only be programmed when the I2C is disabled (PE = 0).
0x40005400 C   FIELD 12w01 ANFOFF (rw): Analog noise filter OFF Note: This bit can only be programmed when the I2C is disabled (PE = 0).
0x40005400 C   FIELD 14w01 TXDMAEN (rw): DMA transmission requests enable
0x40005400 C   FIELD 15w01 RXDMAEN (rw): DMA reception requests enable
0x40005400 C   FIELD 16w01 SBC (rw): Slave byte control This bit is used to enable hardware byte control in slave mode.
0x40005400 C   FIELD 17w01 NOSTRETCH (rw): Clock stretching disable This bit is used to disable clock stretching in slave mode. It must be kept cleared in master mode. Note: This bit can only be programmed when the I2C is disabled (PE = 0).
0x40005400 C   FIELD 18w01 WUPEN (rw): Wakeup from Stop mode enable Note: If the Wakeup from Stop mode feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to . Note: WUPEN can be set only when DNF = '0000'
0x40005400 C   FIELD 19w01 GCEN (rw): General call enable
0x40005400 C   FIELD 20w01 SMBHEN (rw): SMBus host address enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005400 C   FIELD 21w01 SMBDEN (rw): SMBus device default address enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005400 C   FIELD 22w01 ALERTEN (rw): SMBus alert enable Note: When ALERTEN=0, the SMBA pin can be used as a standard GPIO. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005400 C   FIELD 23w01 PECEN (rw): PEC enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005400 C   FIELD 24w01 FMP (rw): Fast-mode Plus 20 mA drive enable
0x40005400 C   FIELD 30w01 ADDRACLR (rw): Address match flag (ADDR) automatic clear
0x40005400 C   FIELD 31w01 STOPFACLR (rw): STOP detection flag (STOPF) automatic clear
0x40005404 B  REGISTER CR2: I2C control register 2
0x40005404 C   FIELD 00w10 SADD (rw): Slave address (master mode) In 7-bit addressing mode (ADD10 = 0): SADD[7:1] should be written with the 7-bit slave address to be sent. The bits SADD[9], SADD[8] and SADD[0] are don't care. In 10-bit addressing mode (ADD10 = 1): SADD[9:0] should be written with the 10-bit slave address to be sent. Note: Changing these bits when the START bit is set is not allowed.
0x40005404 C   FIELD 10w01 RD_WRN (rw): Transfer direction (master mode) Note: Changing this bit when the START bit is set is not allowed.
0x40005404 C   FIELD 11w01 ADD10 (rw): 10-bit addressing mode (master mode) Note: Changing this bit when the START bit is set is not allowed.
0x40005404 C   FIELD 12w01 HEAD10R (rw): 10-bit address header only read direction (master receiver mode) Note: Changing this bit when the START bit is set is not allowed.
0x40005404 C   FIELD 13w01 START (rw): Start generation This bit is set by software, and cleared by hardware after the Start followed by the address sequence is sent, by an arbitration loss, by an address matched in slave mode, by a timeout error detection, or when PE = 0. If the I2C is already in master mode with AUTOEND = 0, setting this bit generates a Repeated Start condition when RELOAD=0, after the end of the NBYTES transfer. Otherwise setting this bit generates a START condition once the bus is free. Note: Writing '0' to this bit has no effect. The START bit can be set even if the bus is BUSY or I2C is in slave mode. This bit has no effect when RELOAD is set.
0x40005404 C   FIELD 14w01 STOP (rw): Stop generation (master mode) The bit is set by software, cleared by hardware when a STOP condition is detected, or when PE = 0. In Master Mode: Note: Writing '0' to this bit has no effect.
0x40005404 C   FIELD 15w01 NACK (rw): NACK generation (slave mode) The bit is set by software, cleared by hardware when the NACK is sent, or when a STOP condition or an Address matched is received, or when PE=0. Note: Writing '0' to this bit has no effect. This bit is used in slave mode only: in master receiver mode, NACK is automatically generated after last byte preceding STOP or RESTART condition, whatever the NACK bit value. When an overrun occurs in slave receiver NOSTRETCH mode, a NACK is automatically generated whatever the NACK bit value. When hardware PEC checking is enabled (PECBYTE=1), the PEC acknowledge value does not depend on the NACK value.
0x40005404 C   FIELD 16w08 NBYTES (rw): Number of bytes The number of bytes to be transmitted/received is programmed there. This field is don't care in slave mode with SBC=0. Note: Changing these bits when the START bit is set is not allowed.
0x40005404 C   FIELD 24w01 RELOAD (rw): NBYTES reload mode This bit is set and cleared by software.
0x40005404 C   FIELD 25w01 AUTOEND (rw): Automatic end mode (master mode) This bit is set and cleared by software. Note: This bit has no effect in slave mode or when the RELOAD bit is set.
0x40005404 C   FIELD 26w01 PECBYTE (rw): Packet error checking byte This bit is set by software, and cleared by hardware when the PEC is transferred, or when a STOP condition or an Address matched is received, also when PE=0. Note: Writing '0' to this bit has no effect. This bit has no effect when RELOAD is set. This bit has no effect is slave mode when SBC=0. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005408 B  REGISTER OAR1: I2C own address 1 register
0x40005408 C   FIELD 00w10 OA1 (rw): Interface own slave address 7-bit addressing mode: OA1[7:1] contains the 7-bit own slave address. The bits OA1[9], OA1[8] and OA1[0] are don't care. 10-bit addressing mode: OA1[9:0] contains the 10-bit own slave address. Note: These bits can be written only when OA1EN=0.
0x40005408 C   FIELD 10w01 OA1MODE (rw): Own Address 1 10-bit mode Note: This bit can be written only when OA1EN=0.
0x40005408 C   FIELD 15w01 OA1EN (rw): Own Address 1 enable
0x4000540C B  REGISTER OAR2: I2C own address 2 register
0x4000540C C   FIELD 01w07 OA2 (rw): Interface address 7-bit addressing mode: 7-bit address Note: These bits can be written only when OA2EN=0.
0x4000540C C   FIELD 08w03 OA2MSK (rw): Own Address 2 masks Note: These bits can be written only when OA2EN=0. As soon as OA2MSK is not equal to 0, the reserved I2C addresses (0b0000xxx and 0b1111xxx) are not acknowledged even if the comparison matches.
0x4000540C C   FIELD 15w01 OA2EN (rw): Own Address 2 enable
0x40005410 B  REGISTER TIMINGR: I2C timing register
0x40005410 C   FIELD 00w08 SCLL (rw): SCL low period (master mode) This field is used to generate the SCL low period in master mode. tSCLL = (SCLL+1) x tPRESC Note: SCLL is also used to generate tBUF and tSU:STA timings.
0x40005410 C   FIELD 08w08 SCLH (rw): SCL high period (master mode) This field is used to generate the SCL high period in master mode. tSCLH = (SCLH+1) x tPRESC Note: SCLH is also used to generate tSU:STO and tHD:STA timing.
0x40005410 C   FIELD 16w04 SDADEL (rw): Data hold time This field is used to generate the delay tSDADEL between SCL falling edge and SDA edge. In master mode and in slave mode with NOSTRETCH = 0, the SCL line is stretched low during tSDADEL. tSDADEL= SDADEL x tPRESC Note: SDADEL is used to generate tHD:DAT timing.
0x40005410 C   FIELD 20w04 SCLDEL (rw): Data setup time This field is used to generate a delay tSCLDEL between SDA edge and SCL rising edge. In master mode and in slave mode with NOSTRETCH = 0, the SCL line is stretched low during tSCLDEL. tSCLDEL = (SCLDEL+1) x tPRESC Note: tSCLDEL is used to generate tSU:DAT timing.
0x40005410 C   FIELD 28w04 PRESC (rw): Timing prescaler This field is used to prescale i2c_ker_ck in order to generate the clock period tPRESC used for data setup and hold counters (refer to ) and for SCL high and low level counters (refer to ). tPRESC = (PRESC+1) x tI2CCLK
0x40005414 B  REGISTER TIMEOUTR: I2C timeout register
0x40005414 C   FIELD 00w12 TIMEOUTA (rw): Bus Timeout A This field is used to configure: The SCL low timeout condition tTIMEOUT when TIDLE=0 tTIMEOUT= (TIMEOUTA+1) x 2048 x tI2CCLK The bus idle condition (both SCL and SDA high) when TIDLE=1 tIDLE= (TIMEOUTA+1) x 4 x tI2CCLK Note: These bits can be written only when TIMOUTEN=0.
0x40005414 C   FIELD 12w01 TIDLE (rw): Idle clock timeout detection Note: This bit can be written only when TIMOUTEN=0.
0x40005414 C   FIELD 15w01 TIMOUTEN (rw): Clock timeout enable
0x40005414 C   FIELD 16w12 TIMEOUTB (rw): Bus timeout B This field is used to configure the cumulative clock extension timeout: In master mode, the master cumulative clock low extend time (tLOW:MEXT) is detected In slave mode, the slave cumulative clock low extend time (tLOW:SEXT) is detected tLOW:EXT= (TIMEOUTB+1) x 2048 x tI2CCLK Note: These bits can be written only when TEXTEN=0.
0x40005414 C   FIELD 31w01 TEXTEN (rw): Extended clock timeout enable
0x40005418 B  REGISTER ISR: I2C interrupt and status register
0x40005418 C   FIELD 00w01 TXE (rw): Transmit data register empty (transmitters) This bit is set by hardware when the I2C_TXDR register is empty. It is cleared when the next data to be sent is written in the I2C_TXDR register. This bit can be written to '1' by software in order to flush the transmit data register I2C_TXDR. Note: This bit is set by hardware when PE=0.
0x40005418 C   FIELD 01w01 TXIS (rw): Transmit interrupt status (transmitters) This bit is set by hardware when the I2C_TXDR register is empty and the data to be transmitted must be written in the I2C_TXDR register. It is cleared when the next data to be sent is written in the I2C_TXDR register. This bit can be written to '1' by software when NOSTRETCH=1 only, in order to generate a TXIS event (interrupt if TXIE=1 or DMA request if TXDMAEN=1). Note: This bit is cleared by hardware when PE=0.
0x40005418 C   FIELD 02w01 RXNE (ro): Receive data register not empty (receivers) This bit is set by hardware when the received data is copied into the I2C_RXDR register, and is ready to be read. It is cleared when I2C_RXDR is read. Note: This bit is cleared by hardware when PE=0.
0x40005418 C   FIELD 03w01 ADDR (ro): Address matched (slave mode) This bit is set by hardware as soon as the received slave address matched with one of the enabled slave addresses. It is cleared by software by setting ADDRCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005418 C   FIELD 04w01 NACKF (ro): Not Acknowledge received flag This flag is set by hardware when a NACK is received after a byte transmission. It is cleared by software by setting the NACKCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005418 C   FIELD 05w01 STOPF (ro): Stop detection flag This flag is set by hardware when a STOP condition is detected on the bus and the peripheral is involved in this transfer: either as a master, provided that the STOP condition is generated by the peripheral. or as a slave, provided that the peripheral has been addressed previously during this transfer. It is cleared by software by setting the STOPCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005418 C   FIELD 06w01 TC (ro): Transfer Complete (master mode) This flag is set by hardware when RELOAD=0, AUTOEND=0 and NBYTES data have been transferred. It is cleared by software when START bit or STOP bit is set. Note: This bit is cleared by hardware when PE=0.
0x40005418 C   FIELD 07w01 TCR (ro): Transfer Complete Reload This flag is set by hardware when RELOAD=1 and NBYTES data have been transferred. It is cleared by software when NBYTES is written to a non-zero value. Note: This bit is cleared by hardware when PE=0. This flag is only for master mode, or for slave mode when the SBC bit is set.
0x40005418 C   FIELD 08w01 BERR (ro): Bus error This flag is set by hardware when a misplaced Start or STOP condition is detected whereas the peripheral is involved in the transfer. The flag is not set during the address phase in slave mode. It is cleared by software by setting BERRCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005418 C   FIELD 09w01 ARLO (ro): Arbitration lost This flag is set by hardware in case of arbitration loss. It is cleared by software by setting the ARLOCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005418 C   FIELD 10w01 OVR (ro): Overrun/Underrun (slave mode) This flag is set by hardware in slave mode with NOSTRETCH=1, when an overrun/underrun error occurs. It is cleared by software by setting the OVRCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005418 C   FIELD 11w01 PECERR (ro): PEC Error in reception This flag is set by hardware when the received PEC does not match with the PEC register content. A NACK is automatically sent after the wrong PEC reception. It is cleared by software by setting the PECCF bit. Note: This bit is cleared by hardware when PE=0. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005418 C   FIELD 12w01 TIMEOUT (ro): Timeout or tLOW detection flag This flag is set by hardware when a timeout or extended clock timeout occurred. It is cleared by software by setting the TIMEOUTCF bit. Note: This bit is cleared by hardware when PE=0. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005418 C   FIELD 13w01 ALERT (ro): SMBus alert This flag is set by hardware when SMBHEN=1 (SMBus host configuration), ALERTEN=1 and a SMBALERT event (falling edge) is detected on SMBA pin. It is cleared by software by setting the ALERTCF bit. Note: This bit is cleared by hardware when PE=0. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005418 C   FIELD 15w01 BUSY (ro): Bus busy This flag indicates that a communication is in progress on the bus. It is set by hardware when a START condition is detected. It is cleared by hardware when a STOP condition is detected, or when PE=0.
0x40005418 C   FIELD 16w01 DIR (ro): Transfer direction (Slave mode) This flag is updated when an address match event occurs (ADDR=1).
0x40005418 C   FIELD 17w07 ADDCODE (ro): Address match code (Slave mode) These bits are updated with the received address when an address match event occurs (ADDR = 1). In the case of a 10-bit address, ADDCODE provides the 10-bit header followed by the 2 MSBs of the address.
0x4000541C B  REGISTER ICR: I2C interrupt clear register
0x4000541C C   FIELD 03w01 ADDRCF (wo): Address matched flag clear Writing 1 to this bit clears the ADDR flag in the I2C_ISR register. Writing 1 to this bit also clears the START bit in the I2C_CR2 register.
0x4000541C C   FIELD 04w01 NACKCF (wo): Not Acknowledge flag clear Writing 1 to this bit clears the NACKF flag in I2C_ISR register.
0x4000541C C   FIELD 05w01 STOPCF (wo): STOP detection flag clear Writing 1 to this bit clears the STOPF flag in the I2C_ISR register.
0x4000541C C   FIELD 08w01 BERRCF (wo): Bus error flag clear Writing 1 to this bit clears the BERRF flag in the I2C_ISR register.
0x4000541C C   FIELD 09w01 ARLOCF (wo): Arbitration lost flag clear Writing 1 to this bit clears the ARLO flag in the I2C_ISR register.
0x4000541C C   FIELD 10w01 OVRCF (wo): Overrun/Underrun flag clear Writing 1 to this bit clears the OVR flag in the I2C_ISR register.
0x4000541C C   FIELD 11w01 PECCF (wo): PEC Error flag clear Writing 1 to this bit clears the PECERR flag in the I2C_ISR register. Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x4000541C C   FIELD 12w01 TIMOUTCF (wo): Timeout detection flag clear Writing 1 to this bit clears the TIMEOUT flag in the I2C_ISR register. Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x4000541C C   FIELD 13w01 ALERTCF (wo): Alert flag clear Writing 1 to this bit clears the ALERT flag in the I2C_ISR register. Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005420 B  REGISTER PECR: I2C PEC register
0x40005420 C   FIELD 00w08 PEC (ro): Packet error checking register This field contains the internal PEC when PECEN=1. The PEC is cleared by hardware when PE=0.
0x40005424 B  REGISTER RXDR: I2C receive data register
0x40005424 C   FIELD 00w08 RXDATA (ro): 8-bit receive data Data byte received from the I2C bus
0x40005428 B  REGISTER TXDR: I2C transmit data register
0x40005428 C   FIELD 00w08 TXDATA (rw): 8-bit transmit data Data byte to be transmitted to the I2C bus Note: These bits can be written only when TXE=1.
0x40005800 A PERIPHERAL I2C2
0x40005800 B  REGISTER CR1: I2C control register 1
0x40005800 C   FIELD 00w01 PE (rw): Peripheral enable Note: When PE=0, the I2C SCL and SDA lines are released. Internal state machines and status bits are put back to their reset value. When cleared, PE must be kept low for at least 3 APB clock cycles.
0x40005800 C   FIELD 01w01 TXIE (rw): TX Interrupt enable
0x40005800 C   FIELD 02w01 RXIE (rw): RX Interrupt enable
0x40005800 C   FIELD 03w01 ADDRIE (rw): Address match Interrupt enable (slave only)
0x40005800 C   FIELD 04w01 NACKIE (rw): Not acknowledge received Interrupt enable
0x40005800 C   FIELD 05w01 STOPIE (rw): Stop detection Interrupt enable
0x40005800 C   FIELD 06w01 TCIE (rw): Transfer Complete interrupt enable Note: Any of these events generate an interrupt: Transfer Complete (TC) Transfer Complete Reload (TCR)
0x40005800 C   FIELD 07w01 ERRIE (rw): Error interrupts enable Note: Any of these errors generate an interrupt: Arbitration Loss (ARLO) Bus Error detection (BERR) Overrun/Underrun (OVR) Timeout detection (TIMEOUT) PEC error detection (PECERR) Alert pin event detection (ALERT)
0x40005800 C   FIELD 08w04 DNF (rw): Digital noise filter These bits are used to configure the digital noise filter on SDA and SCL input. The digital filter, filters spikes with a length of up to DNF[3:0] * tI2CCLK ... Note: If the analog filter is also enabled, the digital filter is added to the analog filter. This filter can only be programmed when the I2C is disabled (PE = 0).
0x40005800 C   FIELD 12w01 ANFOFF (rw): Analog noise filter OFF Note: This bit can only be programmed when the I2C is disabled (PE = 0).
0x40005800 C   FIELD 14w01 TXDMAEN (rw): DMA transmission requests enable
0x40005800 C   FIELD 15w01 RXDMAEN (rw): DMA reception requests enable
0x40005800 C   FIELD 16w01 SBC (rw): Slave byte control This bit is used to enable hardware byte control in slave mode.
0x40005800 C   FIELD 17w01 NOSTRETCH (rw): Clock stretching disable This bit is used to disable clock stretching in slave mode. It must be kept cleared in master mode. Note: This bit can only be programmed when the I2C is disabled (PE = 0).
0x40005800 C   FIELD 18w01 WUPEN (rw): Wakeup from Stop mode enable Note: If the Wakeup from Stop mode feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to . Note: WUPEN can be set only when DNF = '0000'
0x40005800 C   FIELD 19w01 GCEN (rw): General call enable
0x40005800 C   FIELD 20w01 SMBHEN (rw): SMBus host address enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005800 C   FIELD 21w01 SMBDEN (rw): SMBus device default address enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005800 C   FIELD 22w01 ALERTEN (rw): SMBus alert enable Note: When ALERTEN=0, the SMBA pin can be used as a standard GPIO. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005800 C   FIELD 23w01 PECEN (rw): PEC enable Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005800 C   FIELD 24w01 FMP (rw): Fast-mode Plus 20 mA drive enable
0x40005800 C   FIELD 30w01 ADDRACLR (rw): Address match flag (ADDR) automatic clear
0x40005800 C   FIELD 31w01 STOPFACLR (rw): STOP detection flag (STOPF) automatic clear
0x40005804 B  REGISTER CR2: I2C control register 2
0x40005804 C   FIELD 00w10 SADD (rw): Slave address (master mode) In 7-bit addressing mode (ADD10 = 0): SADD[7:1] should be written with the 7-bit slave address to be sent. The bits SADD[9], SADD[8] and SADD[0] are don't care. In 10-bit addressing mode (ADD10 = 1): SADD[9:0] should be written with the 10-bit slave address to be sent. Note: Changing these bits when the START bit is set is not allowed.
0x40005804 C   FIELD 10w01 RD_WRN (rw): Transfer direction (master mode) Note: Changing this bit when the START bit is set is not allowed.
0x40005804 C   FIELD 11w01 ADD10 (rw): 10-bit addressing mode (master mode) Note: Changing this bit when the START bit is set is not allowed.
0x40005804 C   FIELD 12w01 HEAD10R (rw): 10-bit address header only read direction (master receiver mode) Note: Changing this bit when the START bit is set is not allowed.
0x40005804 C   FIELD 13w01 START (rw): Start generation This bit is set by software, and cleared by hardware after the Start followed by the address sequence is sent, by an arbitration loss, by an address matched in slave mode, by a timeout error detection, or when PE = 0. If the I2C is already in master mode with AUTOEND = 0, setting this bit generates a Repeated Start condition when RELOAD=0, after the end of the NBYTES transfer. Otherwise setting this bit generates a START condition once the bus is free. Note: Writing '0' to this bit has no effect. The START bit can be set even if the bus is BUSY or I2C is in slave mode. This bit has no effect when RELOAD is set.
0x40005804 C   FIELD 14w01 STOP (rw): Stop generation (master mode) The bit is set by software, cleared by hardware when a STOP condition is detected, or when PE = 0. In Master Mode: Note: Writing '0' to this bit has no effect.
0x40005804 C   FIELD 15w01 NACK (rw): NACK generation (slave mode) The bit is set by software, cleared by hardware when the NACK is sent, or when a STOP condition or an Address matched is received, or when PE=0. Note: Writing '0' to this bit has no effect. This bit is used in slave mode only: in master receiver mode, NACK is automatically generated after last byte preceding STOP or RESTART condition, whatever the NACK bit value. When an overrun occurs in slave receiver NOSTRETCH mode, a NACK is automatically generated whatever the NACK bit value. When hardware PEC checking is enabled (PECBYTE=1), the PEC acknowledge value does not depend on the NACK value.
0x40005804 C   FIELD 16w08 NBYTES (rw): Number of bytes The number of bytes to be transmitted/received is programmed there. This field is don't care in slave mode with SBC=0. Note: Changing these bits when the START bit is set is not allowed.
0x40005804 C   FIELD 24w01 RELOAD (rw): NBYTES reload mode This bit is set and cleared by software.
0x40005804 C   FIELD 25w01 AUTOEND (rw): Automatic end mode (master mode) This bit is set and cleared by software. Note: This bit has no effect in slave mode or when the RELOAD bit is set.
0x40005804 C   FIELD 26w01 PECBYTE (rw): Packet error checking byte This bit is set by software, and cleared by hardware when the PEC is transferred, or when a STOP condition or an Address matched is received, also when PE=0. Note: Writing '0' to this bit has no effect. This bit has no effect when RELOAD is set. This bit has no effect is slave mode when SBC=0. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005808 B  REGISTER OAR1: I2C own address 1 register
0x40005808 C   FIELD 00w10 OA1 (rw): Interface own slave address 7-bit addressing mode: OA1[7:1] contains the 7-bit own slave address. The bits OA1[9], OA1[8] and OA1[0] are don't care. 10-bit addressing mode: OA1[9:0] contains the 10-bit own slave address. Note: These bits can be written only when OA1EN=0.
0x40005808 C   FIELD 10w01 OA1MODE (rw): Own Address 1 10-bit mode Note: This bit can be written only when OA1EN=0.
0x40005808 C   FIELD 15w01 OA1EN (rw): Own Address 1 enable
0x4000580C B  REGISTER OAR2: I2C own address 2 register
0x4000580C C   FIELD 01w07 OA2 (rw): Interface address 7-bit addressing mode: 7-bit address Note: These bits can be written only when OA2EN=0.
0x4000580C C   FIELD 08w03 OA2MSK (rw): Own Address 2 masks Note: These bits can be written only when OA2EN=0. As soon as OA2MSK is not equal to 0, the reserved I2C addresses (0b0000xxx and 0b1111xxx) are not acknowledged even if the comparison matches.
0x4000580C C   FIELD 15w01 OA2EN (rw): Own Address 2 enable
0x40005810 B  REGISTER TIMINGR: I2C timing register
0x40005810 C   FIELD 00w08 SCLL (rw): SCL low period (master mode) This field is used to generate the SCL low period in master mode. tSCLL = (SCLL+1) x tPRESC Note: SCLL is also used to generate tBUF and tSU:STA timings.
0x40005810 C   FIELD 08w08 SCLH (rw): SCL high period (master mode) This field is used to generate the SCL high period in master mode. tSCLH = (SCLH+1) x tPRESC Note: SCLH is also used to generate tSU:STO and tHD:STA timing.
0x40005810 C   FIELD 16w04 SDADEL (rw): Data hold time This field is used to generate the delay tSDADEL between SCL falling edge and SDA edge. In master mode and in slave mode with NOSTRETCH = 0, the SCL line is stretched low during tSDADEL. tSDADEL= SDADEL x tPRESC Note: SDADEL is used to generate tHD:DAT timing.
0x40005810 C   FIELD 20w04 SCLDEL (rw): Data setup time This field is used to generate a delay tSCLDEL between SDA edge and SCL rising edge. In master mode and in slave mode with NOSTRETCH = 0, the SCL line is stretched low during tSCLDEL. tSCLDEL = (SCLDEL+1) x tPRESC Note: tSCLDEL is used to generate tSU:DAT timing.
0x40005810 C   FIELD 28w04 PRESC (rw): Timing prescaler This field is used to prescale i2c_ker_ck in order to generate the clock period tPRESC used for data setup and hold counters (refer to ) and for SCL high and low level counters (refer to ). tPRESC = (PRESC+1) x tI2CCLK
0x40005814 B  REGISTER TIMEOUTR: I2C timeout register
0x40005814 C   FIELD 00w12 TIMEOUTA (rw): Bus Timeout A This field is used to configure: The SCL low timeout condition tTIMEOUT when TIDLE=0 tTIMEOUT= (TIMEOUTA+1) x 2048 x tI2CCLK The bus idle condition (both SCL and SDA high) when TIDLE=1 tIDLE= (TIMEOUTA+1) x 4 x tI2CCLK Note: These bits can be written only when TIMOUTEN=0.
0x40005814 C   FIELD 12w01 TIDLE (rw): Idle clock timeout detection Note: This bit can be written only when TIMOUTEN=0.
0x40005814 C   FIELD 15w01 TIMOUTEN (rw): Clock timeout enable
0x40005814 C   FIELD 16w12 TIMEOUTB (rw): Bus timeout B This field is used to configure the cumulative clock extension timeout: In master mode, the master cumulative clock low extend time (tLOW:MEXT) is detected In slave mode, the slave cumulative clock low extend time (tLOW:SEXT) is detected tLOW:EXT= (TIMEOUTB+1) x 2048 x tI2CCLK Note: These bits can be written only when TEXTEN=0.
0x40005814 C   FIELD 31w01 TEXTEN (rw): Extended clock timeout enable
0x40005818 B  REGISTER ISR: I2C interrupt and status register
0x40005818 C   FIELD 00w01 TXE (rw): Transmit data register empty (transmitters) This bit is set by hardware when the I2C_TXDR register is empty. It is cleared when the next data to be sent is written in the I2C_TXDR register. This bit can be written to '1' by software in order to flush the transmit data register I2C_TXDR. Note: This bit is set by hardware when PE=0.
0x40005818 C   FIELD 01w01 TXIS (rw): Transmit interrupt status (transmitters) This bit is set by hardware when the I2C_TXDR register is empty and the data to be transmitted must be written in the I2C_TXDR register. It is cleared when the next data to be sent is written in the I2C_TXDR register. This bit can be written to '1' by software when NOSTRETCH=1 only, in order to generate a TXIS event (interrupt if TXIE=1 or DMA request if TXDMAEN=1). Note: This bit is cleared by hardware when PE=0.
0x40005818 C   FIELD 02w01 RXNE (ro): Receive data register not empty (receivers) This bit is set by hardware when the received data is copied into the I2C_RXDR register, and is ready to be read. It is cleared when I2C_RXDR is read. Note: This bit is cleared by hardware when PE=0.
0x40005818 C   FIELD 03w01 ADDR (ro): Address matched (slave mode) This bit is set by hardware as soon as the received slave address matched with one of the enabled slave addresses. It is cleared by software by setting ADDRCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005818 C   FIELD 04w01 NACKF (ro): Not Acknowledge received flag This flag is set by hardware when a NACK is received after a byte transmission. It is cleared by software by setting the NACKCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005818 C   FIELD 05w01 STOPF (ro): Stop detection flag This flag is set by hardware when a STOP condition is detected on the bus and the peripheral is involved in this transfer: either as a master, provided that the STOP condition is generated by the peripheral. or as a slave, provided that the peripheral has been addressed previously during this transfer. It is cleared by software by setting the STOPCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005818 C   FIELD 06w01 TC (ro): Transfer Complete (master mode) This flag is set by hardware when RELOAD=0, AUTOEND=0 and NBYTES data have been transferred. It is cleared by software when START bit or STOP bit is set. Note: This bit is cleared by hardware when PE=0.
0x40005818 C   FIELD 07w01 TCR (ro): Transfer Complete Reload This flag is set by hardware when RELOAD=1 and NBYTES data have been transferred. It is cleared by software when NBYTES is written to a non-zero value. Note: This bit is cleared by hardware when PE=0. This flag is only for master mode, or for slave mode when the SBC bit is set.
0x40005818 C   FIELD 08w01 BERR (ro): Bus error This flag is set by hardware when a misplaced Start or STOP condition is detected whereas the peripheral is involved in the transfer. The flag is not set during the address phase in slave mode. It is cleared by software by setting BERRCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005818 C   FIELD 09w01 ARLO (ro): Arbitration lost This flag is set by hardware in case of arbitration loss. It is cleared by software by setting the ARLOCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005818 C   FIELD 10w01 OVR (ro): Overrun/Underrun (slave mode) This flag is set by hardware in slave mode with NOSTRETCH=1, when an overrun/underrun error occurs. It is cleared by software by setting the OVRCF bit. Note: This bit is cleared by hardware when PE=0.
0x40005818 C   FIELD 11w01 PECERR (ro): PEC Error in reception This flag is set by hardware when the received PEC does not match with the PEC register content. A NACK is automatically sent after the wrong PEC reception. It is cleared by software by setting the PECCF bit. Note: This bit is cleared by hardware when PE=0. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005818 C   FIELD 12w01 TIMEOUT (ro): Timeout or tLOW detection flag This flag is set by hardware when a timeout or extended clock timeout occurred. It is cleared by software by setting the TIMEOUTCF bit. Note: This bit is cleared by hardware when PE=0. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005818 C   FIELD 13w01 ALERT (ro): SMBus alert This flag is set by hardware when SMBHEN=1 (SMBus host configuration), ALERTEN=1 and a SMBALERT event (falling edge) is detected on SMBA pin. It is cleared by software by setting the ALERTCF bit. Note: This bit is cleared by hardware when PE=0. If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005818 C   FIELD 15w01 BUSY (ro): Bus busy This flag indicates that a communication is in progress on the bus. It is set by hardware when a START condition is detected. It is cleared by hardware when a STOP condition is detected, or when PE=0.
0x40005818 C   FIELD 16w01 DIR (ro): Transfer direction (Slave mode) This flag is updated when an address match event occurs (ADDR=1).
0x40005818 C   FIELD 17w07 ADDCODE (ro): Address match code (Slave mode) These bits are updated with the received address when an address match event occurs (ADDR = 1). In the case of a 10-bit address, ADDCODE provides the 10-bit header followed by the 2 MSBs of the address.
0x4000581C B  REGISTER ICR: I2C interrupt clear register
0x4000581C C   FIELD 03w01 ADDRCF (wo): Address matched flag clear Writing 1 to this bit clears the ADDR flag in the I2C_ISR register. Writing 1 to this bit also clears the START bit in the I2C_CR2 register.
0x4000581C C   FIELD 04w01 NACKCF (wo): Not Acknowledge flag clear Writing 1 to this bit clears the NACKF flag in I2C_ISR register.
0x4000581C C   FIELD 05w01 STOPCF (wo): STOP detection flag clear Writing 1 to this bit clears the STOPF flag in the I2C_ISR register.
0x4000581C C   FIELD 08w01 BERRCF (wo): Bus error flag clear Writing 1 to this bit clears the BERRF flag in the I2C_ISR register.
0x4000581C C   FIELD 09w01 ARLOCF (wo): Arbitration lost flag clear Writing 1 to this bit clears the ARLO flag in the I2C_ISR register.
0x4000581C C   FIELD 10w01 OVRCF (wo): Overrun/Underrun flag clear Writing 1 to this bit clears the OVR flag in the I2C_ISR register.
0x4000581C C   FIELD 11w01 PECCF (wo): PEC Error flag clear Writing 1 to this bit clears the PECERR flag in the I2C_ISR register. Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x4000581C C   FIELD 12w01 TIMOUTCF (wo): Timeout detection flag clear Writing 1 to this bit clears the TIMEOUT flag in the I2C_ISR register. Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x4000581C C   FIELD 13w01 ALERTCF (wo): Alert flag clear Writing 1 to this bit clears the ALERT flag in the I2C_ISR register. Note: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0'. Refer to .
0x40005820 B  REGISTER PECR: I2C PEC register
0x40005820 C   FIELD 00w08 PEC (ro): Packet error checking register This field contains the internal PEC when PECEN=1. The PEC is cleared by hardware when PE=0.
0x40005824 B  REGISTER RXDR: I2C receive data register
0x40005824 C   FIELD 00w08 RXDATA (ro): 8-bit receive data Data byte received from the I2C bus
0x40005828 B  REGISTER TXDR: I2C transmit data register
0x40005828 C   FIELD 00w08 TXDATA (rw): 8-bit transmit data Data byte to be transmitted to the I2C bus Note: These bits can be written only when TXE=1.
0x40005C00 A PERIPHERAL I3C1
0x40005C00 B  REGISTER I3C_CR: I3C message control register
0x40005C00 B  REGISTER I3C_CR_ALTERNATE: I3C message control register alternate
0x40005C00 C   FIELD 00w16 DCNT (wo): count of data to transfer during a read or write message, in bytes (whatever I3C is acting as controller/target) Linear encoding up to 64 Kbytes -1 ...
0x40005C00 C   FIELD 00w16 DCNT (wo): count of data to transfer during a read or write message, in bytes (when I3C is acting as controller) Linear encoding up to 64 Kbytes -1. ...
0x40005C00 C   FIELD 16w01 RNW (wo): read / non-write message (when I3C is acting as controller) When I3C is acting as controller, this field is used if MTYPE[3:0]=0010 (private message) or MTYPE[3:0]=0011 (direct message) or MTYPE[3:0]=0100 (legacy I2C message), in order to emit the RnW bit on the I3C bus.
0x40005C00 C   FIELD 16w08 CCC (wo): 8-bit CCC code (when I3C is acting as controller) If Bit[23]=CCC[7]=1, this is the 1st part of an I3C SDR direct CCC command. If Bit[23]=CCC[7]=0, this is an I3C SDR broadcast CCC command (including ENTDAA and ENTHDR0).
0x40005C00 C   FIELD 17w07 ADD (wo): 7-bit I3C dynamic / I2C static target address (when I3C is acting as controller) When I3C is acting as controller, this field is used if MTYPE[3:0]=0010 (private message) or MTYPE[3:0]=0011 (direct message) or MTYPE[3:0]=0100 (legacy I2C message)
0x40005C00 C   FIELD 27w04 MTYPE (wo): message type (whatever I3C is acting as controller/target) Bits[26:0] are ignored. After M2 error detection on an I3C SDR message, this is needed for SCL 'stuck at' recovery. Bits[26:0] are ignored. If I3C_CFGR.EXITPTRN=1, an HDR exit pattern is emitted on the bus to generate an escalation fault. Bits[23:17] (ADD[6:0]) is the emitted 7-bit dynamic address. Bit[16] (RNW) is the emitted RnW bit. The transferred private message is: {S / S+7'h7E+RnW=0+Sr / Sr+*} + 7-bit DynAddr + RnW + (8-bit Data + T)* + Sr/P. After a S (START), depending on I3C_CFGR.NOARBH, the arbitrable header (7'h7E+RnW=0) is inserted or not. Sr+*: after a Sr (Repeated Start), the hardware automatically inserts (7'h7E+RnW=0) if needed, i.e. if it follows an I3C direct message without ending by a P (Stop). Bits[23:17] (ADD[6:0]) is the emitted 7-bit dynamic address. Bit[16] (RNW) is the emitted RnW bit. The transferred direct message is: Sr + 7-bit DynAddr + RnW + (8-bit Data + T)* + Sr/P Bits[23:17] (ADD[6:0]) is the emitted 7-bit static address. Bit[16] (RNW) is the emitted RnW bit. The transferred legacy I2C message is: {S / S+ 7'h7E+RnW=0 + Sr / Sr+*} + 7-bit StaAddr + RnW + (8-bit Data + T)* + Sr/P. After a S (START), depending on I3C_CFGR.NOARBH, the arbitrable header (7'h7E+RnW=0) is inserted or not. Sr+*: after a Sr (Repeated Start), the hardware automatically inserts (7'h7E+RnW=0) if needed, i.e. if it follows an I3C direct message without ending by a P (Stop). 1xxx: reserved (when I3C is acting as I3C controller, used when target) 0xxx: reserved {S +} 7'h02 addr + RnW=0 {S +} 7-bit I3C_DEVR0.DA[6:0] + RnW=0 after a bus available condition (the target first emits a START request), or once the controller drives a START. {S +} 7-bit I3C_DEVR0.DA[6:0] + RnW=1 (+Ack/Nack from controller) When acknowledged from controller, the next (optional, depending on I3C_BCR.BCR2) transmitted IBI payload data is defined by I3C_CR.DCNT[15:0] and must be consistently programmed vs the maximum IBI payload data size which is defined by I3C_IBIDR.IBIP[2:0]. Others: reserved
0x40005C00 C   FIELD 27w04 MTYPE (wo): message type (when I3C is acting as controller) Bits[23:16] (CCC[7:0]) is the emitted 8-bit CCC code If Bit[23]=CCC[7]=1: this is the 1st part of an I3C SDR direct CCC command The transferred direct CCC command message is: {S / S+7'h7E +RnW=0 / Sr+*} + (direct CCC + T) + (8-bit Data + T)* + Sr After a S (START), depending on I3C_CFGR.NOARBH, the arbitrable header (7'h7E+RnW=0) is inserted or not. Sr+*: after a Sr (Repeated Start), the hardware automatically inserts (7'h7E+R/W). If Bit[23]=CCC[7]=0: this is an I3C SDR broadcast CCC command (including ENTDAA and ENTHDR0) The transferred broadcast CCC command message is: {S / S+7'h7E +RnW=0 / Sr+*} + (broadcast CCC + T) + (8-bit Data + T)* + Sr/P After a S (START), depending on I3C_CFGR.NOARBH, the arbitrable header (7'h7E+RnW=0) is inserted or not. Sr+*: after a Sr (Repeated Start), the hardware automatically inserts (7'h7E+R/W). others: reserved
0x40005C00 C   FIELD 31w01 MEND (wo): message end type (when I3C is acting as controller)
0x40005C00 C   FIELD 31w01 MEND (wo): message end type (when the I3C is acting as controller)
0x40005C04 B  REGISTER I3C_CFGR: I3C configuration register
0x40005C04 C   FIELD 00w01 EN (rw): I3C enable (whatever I3C is acting as controller/target) - Except registers, the peripheral is under reset (a.k.a. partial reset). - Before clearing EN, when I3C is acting as a controller, all the possible target requests must be disabled using DISEC CCC. - When I3C is acting as a target, software should not disable the I3C, unless a partial reset is needed. In this state, some register fields can not be modified (like CRINIT, HKSDAEN for the I3C_CFGR)
0x40005C04 C   FIELD 01w01 CRINIT (rw): initial controller/target role This bit can be modified only when I3C_CFGR.EN = 0. Once enabled by setting I3C_CFGR.EN = 1, I3C peripheral initially acts as an I3C target. I3C does not drive SCL line and does not enable SDA pull-up, until it eventually acquires the controller role. Once enabled by setting I3C_CFGR.EN = 1, I3C peripheral initially acts as a controller. It has the I3C controller role, so drives SCL line and enables SDA pull-up, until it eventually offers the controller role to an I3C secondary controller.
0x40005C04 C   FIELD 02w01 NOARBH (rw): no arbitrable header after a START (when I3C is acting as a controller) This bit can be modified only when there is no on-going frame. - The target address is emitted directly after a START in case of a legacy I2C message or an I3C SDR private read/write message. - This is a more performing option (when is useless the emission of the 0x7E arbitrable header), but this is to be used only when the controller is sure that the addressed target device can not emit concurrently an IBI or a controller-role request (to insure no misinterpretation and no potential conflict between the address emitted by the controller in open-drain mode and the same address a target device can emit after a START, for IBI or MR).
0x40005C04 C   FIELD 03w01 RSTPTRN (rw): HDR reset pattern enable (when I3C is acting as a controller) This bit can be modified only when there is no on-going frame.
0x40005C04 C   FIELD 04w01 EXITPTRN (rw): HDR Exit Pattern enable (when I3C is acting as a controller) This bit can be modified only when there is no on-going frame. This is used to send only the header to test ownership of the bus when there is a suspicion of problem after controller-role hand-off (new controller didn't assert its controller-role by accessing the previous one in less than Activity State time). The HDR Exit Pattern is sent even if the message header {S/Sr + 0x7E addr + W } is ACKed.
0x40005C04 C   FIELD 05w01 HKSDAEN (rw): High-keeper enable on SDA line (when I3C is acting as a controller) This bit can be modified only when I3C_CFGR.EN=0.
0x40005C04 C   FIELD 07w01 HJACK (rw): Hot Join request acknowledge (when I3C is acting as a controller) After the NACK, the message continues as initially programmed (the hot-joining target is aware of the NACK and surely emits another hot-join request later on). After the ACK, the message continues as initially programmed. The software is aware by the HJ interrupt (flag I3C_EVR.HJF is set) and initiates the ENTDAA sequence later on, potentially preventing others Hot Join requests with a Disable target events command (DISEC, with DISHJ=1). Independently of the HJACK configuration, further Hot Join request(s) are NACKed until the Hot Join flag, HJF, is cleared. However, a NACKed target can be assigned a dynamic address by the ENTDAA sequence initiated later on by the first HJ request, preventing this target to emit an HJ request again.
0x40005C04 C   FIELD 08w01 RXDMAEN (rw): RX-FIFO DMA request enable (whatever I3C is acting as controller/target) - Software reads and pops a data byte/word from RX-FIFO i.e. reads I3C_RDR or I3C_RDWR register. - A next data byte/word is to be read by the software either via polling on the flag I3C_EVR.RXFNEF=1 or via interrupt notification (enabled by I3C_IER.RXFNEIE=1). - DMA reads and pops data byte(s)/word(s) from RX-FIFO i.e. reads I3C_RDR or I3C_RDWR register. - A next data byte/word is automatically read by the programmed hardware (i.e. via the asserted RX-FIFO DMA request from the I3C and the programmed DMA channel).
0x40005C04 C   FIELD 09w01 RXFLUSH (wo): RX-FIFO flush (whatever I3C is acting as controller/target) This bit can only be written.
0x40005C04 C   FIELD 10w01 RXTHRES (rw): RX-FIFO threshold (whatever I3C is acting as controller/target) This threshold defines, compared to the RX-FIFO level, when the I3C_EVR.RXFNEF flag is set (and consequently if RXDMAEN=1 when is asserted a DMA RX request). RXFNEF is set when 1 byte is to be read in RX-FIFO (i.e. in I3C_RDR). RXFNEF is set when 4 bytes are to be read in RX-FIFO (i.e. in I3C_RDWR).
0x40005C04 C   FIELD 12w01 TXDMAEN (rw): TX-FIFO DMA request enable (whatever I3C is acting as controller/target) - Software writes and pushes a data byte/word into TX-FIFO i.e. writes I3C_TDR or I3C_TDWR register, to be transmitted over the I3C bus. - A next data byte/word is to be written by the software either via polling on the flag I3C_EVR.TXFNFF=1 or via interrupt notification (enabled by I3C_IER.TXFNFIE=1). - DMA writes and pushes data byte(s)/word(s) into TX-FIFO i.e. writes I3C_TDR or I3C_TDWR register. - A next data byte/word transfer is automatically pushed by the programmed hardware (i.e. via the asserted TX-FIFO DMA request from the I3C and the programmed DMA channel).
0x40005C04 C   FIELD 13w01 TXFLUSH (wo): TX-FIFO flush (whatever I3C is acting as controller/target) This bit can only be written. When the I3C is acting as target, this bit can be used to flush the TX-FIFO on a private read if the controller has early ended the read data (i.e. driven low the T bit) and there is/are remaining data in the TX-FIFO (i.e. I3C_SR.ABT=1 and I3C_SR.XDCNT[15:0] I3C_TGTTDR.TGTTDCNT[15:0]).
0x40005C04 C   FIELD 14w01 TXTHRES (rw): TX-FIFO threshold (whatever I3C is acting as controller/target) This threshold defines, compared to the TX-FIFO level, when the I3C_EVR.TXFNFF flag is set (and consequently if TXDMAEN=1 when is asserted a DMA TX request). TXFNFF is set when 1 byte is to be written in TX-FIFO (i.e. in I3C_TDR). TXFNFF is set when 4 bytes are to be written in TX-FIFO (i.e. in I3C_TDWR).
0x40005C04 C   FIELD 16w01 SDMAEN (rw): S-FIFO DMA request enable (when I3C is acting as controller) Condition: When RMODE=1 (FIFO is enabled for the status): - Software reads and pops a status word from S-FIFO i.e. reads I3C_SR register after a completed frame (I3C_EVR.FCF=1) or an error (I3C_EVR.ERRF=1). - A status word can be read by the software either via polling on these register flags or via interrupt notification (enabled by I3C_IER.FCIE=1 and I3C_IER.ERRIE=1). - DMA reads and pops status word(s) from S-FIFO i.e. reads I3C_SR register. - Status word(s) are automatically read by the programmed hardware (i.e. via the asserted S-FIFO DMA request from the I3C and the programmed DMA channel).
0x40005C04 C   FIELD 17w01 SFLUSH (wo): S-FIFO flush (when I3C is acting as controller) When I3C is acting as I3C controller, this bit can only be written (and is only used when I3C is acting as controller).
0x40005C04 C   FIELD 18w01 RMODE (rw): S-FIFO enable / status receive mode (when I3C is acting as controller) When I3C is acting as I3C controller, this bit is used for the enabling the FIFO for the status (S-FIFO) vs the received status from the target on the I3C bus. When I3C is acting as target, this bit must be cleared. - Status register (i.e. I3C_SR) is used without FIFO mechanism. - There is no SCL stretch if a new status register content is not read. - Status register must be read before being lost/overwritten. All message status must be read. There is SCL stretch when there is no more space in the S-FIFO.
0x40005C04 C   FIELD 19w01 TMODE (rw): transmit mode (when I3C is acting as controller) When I3C is acting as I3C controller, this bit is used for the C-FIFO and TX-FIFO management vs the emitted frame on the I3C bus. A frame transfer starts as soon as first control word is present in C-FIFO.
0x40005C04 C   FIELD 20w01 CDMAEN (rw): C-FIFO DMA request enable (when I3C is acting as controller) When I3C is acting as controller: - Software writes and pushes control word(s) into C-FIFO i.e. writes I3C_CR register, as needed for a given frame. - A next control word transfer can be written by software either via polling on the flag I3C_EVR.CFNFF=1 or via interrupt notification (enabled by I3C_IER.CFNFIE=1). - DMA writes and pushes control word(s) into C-FIFO i.e. writes I3C_CR register, as needed for a given frame. - A next control word transfer is automatically written by the programmed hardware (i.e. via the asserted C-FIFO DMA request from the I3C and the programmed DMA channel).
0x40005C04 C   FIELD 21w01 CFLUSH (wo): C-FIFO flush (when I3C is acting as controller) This bit can only be written.
0x40005C04 C   FIELD 30w01 TSFSET (wo): frame transfer set (a.k.a. software trigger) (when I3C is acting as controller) This bit can only be written. When I3C is acting as I3C controller: Note: If this bit is not set, the other alternative for the software to initiate a frame transfer is to directly write the first control word register (i.e. I3C_CR) while C-FIFO is empty (i.e. I3C_EVR.CFEF=1). Then, if the first written control word is not tagged as a message end (i.e I3C_CR.MEND=0), it causes the hardware to assert the flag I3C_EVR.CFNFF (C-FIFO not full and a next control word is needed).
0x40005C10 B  REGISTER I3C_RDR: I3C receive data byte register
0x40005C10 C   FIELD 00w08 RDB0 (ro): 8-bit received data on I3C bus.
0x40005C14 B  REGISTER I3C_RDWR: I3C receive data word register
0x40005C14 C   FIELD 00w08 RDB0 (ro): 8-bit received data (earliest byte on I3C bus).
0x40005C14 C   FIELD 08w08 RDB1 (ro): 8-bit received data (next byte after RDB0 on I3C bus).
0x40005C14 C   FIELD 16w08 RDB2 (ro): 8-bit received data (next byte after RDB1 on I3C bus).
0x40005C14 C   FIELD 24w08 RDB3 (ro): 8-bit received data (latest byte on I3C bus).
0x40005C18 B  REGISTER I3C_TDR: I3C transmit data byte register
0x40005C18 C   FIELD 00w08 TDB0 (wo): 8-bit data to transmit on I3C bus.
0x40005C1C B  REGISTER I3C_TDWR: I3C transmit data word register
0x40005C1C C   FIELD 00w08 TDB0 (wo): 8-bit transmit data (earliest byte on I3C bus)
0x40005C1C C   FIELD 08w08 TDB1 (wo): 8-bit transmit data (next byte after TDB0[7:0] on I3C bus).
0x40005C1C C   FIELD 16w08 TDB2 (wo): 8-bit transmit data (next byte after TDB1[7:0] on I3C bus).
0x40005C1C C   FIELD 24w08 TDB3 (wo): 8-bit transmit data (latest byte on I3C bus).
0x40005C20 B  REGISTER I3C_IBIDR: I3C IBI payload data register
0x40005C20 C   FIELD 00w08 IBIDB0 (rw): 8-bit IBI payload data (earliest byte on I3C bus, i.e. MDB[7:0] mandatory data byte).
0x40005C20 C   FIELD 08w08 IBIDB1 (rw): 8-bit IBI payload data (next byte on I3C bus after IBIDB0[7:0]).
0x40005C20 C   FIELD 16w08 IBIDB2 (rw): 8-bit IBI payload data (next byte on I3C bus after IBIDB1[7:0]).
0x40005C20 C   FIELD 24w08 IBIDB3 (rw): 8-bit IBI payload data (latest byte on I3C bus).
0x40005C24 B  REGISTER I3C_TGTTDR: I3C target transmit configuration register
0x40005C24 C   FIELD 00w16 TGTTDCNT (rw): transmit data counter, in bytes (when I3C is configured as target) This field must be written by software in the same access when is asserted PRELOAD, in order to define the number of bytes to preload and to transmit. This field is updated by hardware and reports, when read, the remaining number of bytes to be loaded into the TX-FIFO.
0x40005C24 C   FIELD 16w01 PRELOAD (rw): preload of the TX-FIFO (when I3C is configured as target) This bit must be written and asserted by software in the same access when is written and defined the number of bytes to preload into the TX-FIFO and to transmit. This bit is cleared by hardware when all the data bytes to transmit are loaded into the TX-FIFO.
0x40005C30 B  REGISTER I3C_SR: I3C status register
0x40005C30 C   FIELD 00w16 XDCNT (ro): data counter - When the I3C is acting as controller: number of targets detected on the bus - When the I3C is acting as target: number of transmitted bytes - Whatever the I3C is acting as controller or target: number of data bytes read from or transmitted on the I3C bus during the MID[7:0] message
0x40005C30 C   FIELD 17w01 ABT (ro): a private read message is completed/aborted prematurely by the target (when the I3C is acting as controller) When the I3C is acting as controller, this bit indicates if the private read data which is transmitted by the target early terminates (i.e. the target drives T bit low earlier vs what does expect the controller in terms of programmed number of read data bytes i.e. I3C_CR.DCNT[15:0]).
0x40005C30 C   FIELD 18w01 DIR (ro): message direction Whatever the I3C is acting as controller or target, this bit indicates the direction of the related message on the I3C bus Note: ENTDAA CCC is considered as a write command.
0x40005C30 C   FIELD 24w08 MID (ro): message identifier/counter of a given frame (when the I3C is acting as controller) When the I3C is acting as controller, this field identifies the control word message (i.e. I3C_CR) to which the I3C_SR status register refers. First message of a frame is identified with MID[7:0]=0. This field is incremented (by hardware) on the completion of a new message control word (i.e. I3C_CR) over I3C bus. This field is reset for every new frame start.
0x40005C34 B  REGISTER I3C_SER: I3C status error register
0x40005C34 C   FIELD 00w04 CODERR (ro): protocol error code/type controller detected an illegally formatted CCC controller detected that transmitted data on the bus is different from expected controller detected a not acknowledged broadcast address (7'hE) controller detected the new controller did not drive bus after controller-role hand-off target detected an invalid broadcast address 7'hE+W target detected a parity error on a CCC code via a parity check (vs T bit) target detected a parity error on a write data via a parity check (vs T bit) target detected a parity error on the assigned address during dynamic address arbitration via a parity check (vs PAR bit) target detected a 7'hE+R missing after Sr during dynamic address arbitration target detected an illegally formatted CCC target detected that transmitted data on the bus is different from expected others: reserved
0x40005C34 C   FIELD 04w01 PERR (ro): protocol error
0x40005C34 C   FIELD 05w01 STALL (ro): SCL stall error (when the I3C is acting as target)
0x40005C34 C   FIELD 06w01 DOVR (ro): RX-FIFO overrun or TX-FIFO underrun i) a TX-FIFO underrun: TX-FIFO is empty and a write data byte has to be transmitted ii) a RX-FIFO overrun: RX-FIFO is full and a new data byte is received
0x40005C34 C   FIELD 07w01 COVR (ro): C-FIFO underrun or S-FIFO overrun (when the I3C is acting as controller) i) a C-FIFO underrun: control FIFO is empty and a restart has to be emitted ii) a S-FIFO overrun: S-FIFO is full and a new message ends
0x40005C34 C   FIELD 08w01 ANACK (ro): address not acknowledged (when the I3C is configured as controller) i) a legacy I2C read/write transfer ii) a direct CCC write transfer iii) the second trial of a direct CCC read transfer iv) a private read/write transfer
0x40005C34 C   FIELD 09w01 DNACK (ro): data not acknowledged (when the I3C is acting as controller) i) a legacy I2C write transfer ii) the second trial when sending dynamic address during ENTDAA procedure
0x40005C34 C   FIELD 10w01 DERR (ro): data error (when the I3C is acting as controller)
0x40005C40 B  REGISTER I3C_RMR: I3C received message register
0x40005C40 C   FIELD 00w03 IBIRDCNT (ro): IBI received payload data count (when the I3C is configured as controller) When the I3C is configured as controller, this field logs the number of data bytes effectively received in the I3C_IBIDR register.
0x40005C40 C   FIELD 08w08 RCODE (ro): received CCC code (when the I3C is configured as target) When the I3C is configured as target, this field logs the received CCC code.
0x40005C40 C   FIELD 17w07 RADD (ro): received target address (when the I3C is configured as controller) When the I3C is configured as controller, this field logs the received dynamic address from the target during acknowledged IBI or controller-role request.
0x40005C50 B  REGISTER I3C_EVR: I3C event register
0x40005C50 C   FIELD 00w01 CFEF (ro): C-FIFO empty flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that the C-FIFO is empty when controller, and that the I3C_CR register contains no control word (i.e. none IBI/CR/HJ request) when target. This flag is de-asserted by hardware to indicate that the C-FIFO is not empty when controller, and that the I3C_CR register contains one control word (i.e. a pending IBI/CR/HJ request) when target. Note: When the I3C is acting as controller, if the C-FIFO and TX-FIFO preload is configured (i.e. I3C_CFGR.TMODE=1), the software must wait for TXFEF=1 and CFEF=1 before starting a new frame transfer.
0x40005C50 C   FIELD 01w01 TXFEF (ro): TX-FIFO empty flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that the TX-FIFO is empty. This flag is de-asserted by hardware to indicate that the TX-FIFO is not empty. Note: When the I3C is acting as controller, if the C-FIFO and TX-FIFO preload is configured (i.e. I3C_CFGR.TMODE=1), the software must wait for TXFEF=1 and CFEF=1 before starting a new frame transfer.
0x40005C50 C   FIELD 02w01 CFNFF (ro): C-FIFO not full flag (when the I3C is acting as controller) When the I3C is acting as controller, this flag is asserted by hardware to indicate that a control word is to be written to the C-FIFO. This flag is de-asserted by hardware to indicate that a control word is not to be written to the C-FIFO. Note: The software must wait for CFNFF=1 (by polling or via the enabled interrupt) before writing to C-FIFO (i.e. writing to I3C_CR).
0x40005C50 C   FIELD 03w01 SFNEF (ro): S-FIFO not empty flag (when the I3C is acting as controller) When the I3C is acting as controller, if the S-FIFO is enabled (i.e. I3C_CFGR.RMODE=1), this flag is asserted by hardware to indicate that a status word is to be read from the S-FIFO. This flag is de-asserted by hardware to indicate that a status word is not to be read from the S-FIFO.
0x40005C50 C   FIELD 04w01 TXFNFF (ro): TX-FIFO not full flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that a data byte/word is to be written to the TX-FIFO. This flag is de-asserted by hardware to indicate that a data byte/word is not to be written to the TX-FIFO. Note: The software must wait for TXFNFF=1 (by polling or via the enabled interrupt) before writing to TX-FIFO (i.e. writing to I3C_TDR or I3C_TDWR depending on I3C_CFGR.TXTHRES). Note: When the I3C is acting as target, if the software intends to use the TXFNFF flag for writing into I3C_TDR/I3C_TDWR, it must have configured and set the TX-FIFO preload (i.e. write I3C_TGTTDR.PRELOAD).
0x40005C50 C   FIELD 05w01 RXFNEF (ro): RX-FIFO not empty flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that a data byte is to be read from the RX-FIFO. This flag is de-asserted by hardware to indicate that a data byte is not to be read from the RX-FIFO. Note: The software must wait for RXFNEF=1 (by polling or via the enabled interrupt) before reading from RX-FIFO (i.e. writing to I3C_RDR or I3C_RDWR depending on I3C_CFGR.RXTHRES).
0x40005C50 C   FIELD 06w01 TXLASTF (ro): last written data byte/word flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that the last data byte/word (depending on I3C_CFGR.TXTHRES) of a message is to be written to the TX-FIFO. This flag is de-asserted by hardware when the last data byte/word of a message is written.
0x40005C50 C   FIELD 07w01 RXLASTF (ro): last read data byte/word flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that the last data byte/word (depending on I3C_CFGR.RXTHRES) of a message is to be read from the RX-FIFO. This flag is de-asserted by hardware when the last data byte/word of a message is read.
0x40005C50 C   FIELD 09w01 FCF (ro): frame complete flag (whatever the I3C is acting as controller/target) When the I3C is acting as controller, this flag is asserted by hardware to indicate that a frame has been (normally) completed on the I3C bus, i.e when a stop is issued. When the I3C is acting as target, this flag is asserted by hardware to indicate that a message addressed to/by this target has been (normally) completed on the I3C bus, i.e when a next stop or repeated start is then issued by the controller. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CFCF bit.
0x40005C50 C   FIELD 10w01 RXTGTENDF (ro): target-initiated read end flag (when the I3C is acting as controller) When the I3C is acting as controller, this flag is asserted by hardware to indicate that the target has prematurely ended a read transfer. Then, software should read I3C_SR to get more information on the prematurely read transfer. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CRXTGTENDF bit.
0x40005C50 C   FIELD 11w01 ERRF (ro): flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that an error occurred.Then, software should read I3C_SER to get the error type. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CERRF bit.
0x40005C50 C   FIELD 15w01 IBIF (ro): IBI flag (when the I3C is acting as controller) When the I3C is acting as controller, this flag is asserted by hardware to indicate that an IBI request has been received. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CIBIF bit.
0x40005C50 C   FIELD 16w01 IBIENDF (ro): IBI end flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a IBI transfer has been received and completed (IBI acknowledged and IBI data bytes read by controller if any). This flag is cleared when software writes 1 into corresponding I3C_CEVR.CIBIENDF bit.
0x40005C50 C   FIELD 17w01 CRF (ro): controller-role request flag (when the I3C is acting as controller) When the I3C is acting as controller, this flag is asserted by hardware to indicate that a controller-role request has been acknowledged and completed (by hardware). The software should then issue a GETACCCR CCC (get accept controller role) for the controller-role hand-off procedure. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CCRF bit.
0x40005C50 C   FIELD 18w01 CRUPDF (ro): controller-role update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that it has now gained the controller role after the completed controller-role hand-off procedure. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CCRUPDF bit.
0x40005C50 C   FIELD 19w01 HJF (ro): hot-join flag (when the I3C is acting as controller) When the I3C is acting as controller, this flag is asserted by hardware to indicate that an hot join request has been received. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CHJF bit.
0x40005C50 C   FIELD 21w01 WKPF (ro): wakeup/missed start flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a start has been detected (i.e. a SDA falling edge followed by a SCL falling edge) but on the next SCL falling edge, the I3C kernel clock is (still) gated. Thus an I3C bus transaction may have been lost by the target. The corresponding interrupt may be used to wakeup the device from a low power mode (Sleep or Stop mode). This flag is cleared when software writes 1 into corresponding I3C_CEVR.CWKPF bit.
0x40005C50 C   FIELD 22w01 GETF (ro): get flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that any direct CCC of get type (GET*** CCC) has been received. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CGETF bit.
0x40005C50 C   FIELD 23w01 STAF (ro): get status flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a direct GETSTATUS CCC (get status) has been received. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CSTAF bit.
0x40005C50 C   FIELD 24w01 DAUPDF (ro): dynamic address update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a dynamic address update has been received via any of the broadcast ENTDAA, RSTDAA and direct SETNEWDA CCC. Then, software should read I3C_DEVR0.DA[6:0] to get the maximum write length value. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CDAUPDF bit.
0x40005C50 C   FIELD 25w01 MWLUPDF (ro): maximum write length update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a direct SETMWL CCC (set max write length) has been received. Then, software should read I3C_MAXWLR.MWL[15:0] to get the maximum write length value. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CMWLUPDF bit.
0x40005C50 C   FIELD 26w01 MRLUPDF (ro): maximum read length update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a direct SETMRL CCC (set max read length) has been received. Then, software should read I3C_MAXRLR.MRL[15:0] to get the maximum read length value. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CMRLUPDF bit.
0x40005C50 C   FIELD 27w01 RSTF (ro): reset pattern flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a reset pattern has been detected (i.e. 14 SDA transitions while SCL is low, followed by repeated start, then stop). Then, software should read I3C_DEVR0.RSTACT[1:0] and I3C_DEVR0.RSTVAL, to know what reset level is required. If RSTVAL=1: when the RSTF is asserted (and/or the corresponding interrupt if enabled), I3C_DEVR0.RSTACT[1:0] dictates the reset action to be performed by the software if any. If RSTVAL=0: when the RSTF is asserted (and/or the corresponding interrupt if enabled), the software should issue an I3C reset after a first detected reset pattern, and a system reset on the second one. The corresponding interrupt may be used to wakeup the device from a low power mode (Sleep or Stop mode). This flag is cleared when software writes 1 into corresponding I3C_CEVR.CRSTF bit.
0x40005C50 C   FIELD 28w01 ASUPDF (ro): activity state update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that the direct or broadcast ENTASx CCC (with x=0...3) has been received. Then, software should read I3C_DEVR0.AS[1:0]. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CASUPDF bit.
0x40005C50 C   FIELD 29w01 INTUPDF (ro): interrupt/controller-role/hot-join update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that the direct or broadcast ENEC/DISEC CCC (enable/disable target events) has been received, where a target event is either an interrupt/IBI request, a controller-role request, or an hot-join request. Then, software should read respectively I3C_DEVR0.IBIEN, I3C_DEVR0.CREN or I3C_DEVR0.HJEN. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CINTUPDF bit.
0x40005C50 C   FIELD 30w01 DEFF (ro): DEFTGTS flag (when the I3C is acting as target) When the I3C is acting as target (and is typically controller capable), this flag is asserted by hardware to indicate that the broadcast DEFTGTS CCC (define list of targets) has been received. Then, software may store the received data for when getting the controller role. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CDEFF bit.
0x40005C50 C   FIELD 31w01 GRPF (ro): group addressing flag (when the I3C is acting as target) When the I3C is acting as target (and is typically controller capable), this flag is asserted by hardware to indicate that the broadcast DEFGRPA CCC (define list of group addresses) has been received. Then, software may store the received data for when getting the controller role. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CGRPF bit.
0x40005C54 B  REGISTER I3C_IER: I3C interrupt enable register
0x40005C54 C   FIELD 02w01 CFNFIE (ro): C-FIFO not full interrupt enable (whatever the I3C is acting as controller/target)
0x40005C54 C   FIELD 03w01 SFNEIE (ro): S-FIFO not empty interrupt enable (whatever the I3C is acting as controller/target)
0x40005C54 C   FIELD 04w01 TXFNFIE (ro): TX-FIFO not full interrupt enable (whatever the I3C is acting as controller/target)
0x40005C54 C   FIELD 05w01 RXFNEIE (ro): RX-FIFO not empty interrupt enable (whatever the I3C is acting as controller/target)
0x40005C54 C   FIELD 09w01 FCIE (ro): frame complete interrupt enable (whatever the I3C is acting as controller/target)
0x40005C54 C   FIELD 10w01 RXTGTENDIE (ro): target-initiated read end interrupt enable (when the I3C is acting as controller)
0x40005C54 C   FIELD 11w01 ERRIE (ro): error interrupt enable (whatever the I3C is acting as controller/target)
0x40005C54 C   FIELD 15w01 IBIIE (ro): IBI request interrupt enable (when the I3C is acting as controller)
0x40005C54 C   FIELD 16w01 IBIENDIE (ro): IBI end interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 17w01 CRIE (ro): controller-role request interrupt enable (when the I3C is acting as controller)
0x40005C54 C   FIELD 18w01 CRUPDIE (ro): controller-role update interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 19w01 HJIE (ro): hot-join interrupt enable (when the I3C is acting as controller)
0x40005C54 C   FIELD 21w01 WKPIE (ro): wakeup interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 22w01 GETIE (ro): GETxxx CCC interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 23w01 STAIE (ro): GETSTATUS CCC interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 24w01 DAUPDIE (ro): ENTDAA/RSTDAA/SETNEWDA CCC interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 25w01 MWLUPDIE (ro): SETMWL CCC interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 26w01 MRLUPDIE (ro): SETMRL CCC interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 27w01 RSTIE (ro): reset pattern interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 28w01 ASUPDIE (ro): ENTASx CCC interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 29w01 INTUPDIE (ro): ENEC/DISEC CCC interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 30w01 DEFIE (ro): DEFTGTS CCC interrupt enable (when the I3C is acting as target)
0x40005C54 C   FIELD 31w01 GRPIE (ro): DEFGRPA CCC interrupt enable (when the I3C is acting as target)
0x40005C58 B  REGISTER I3C_CEVR: I3C clear event register
0x40005C58 C   FIELD 09w01 CFCF (wo): clear frame complete flag (whatever the I3C is acting as controller/target)
0x40005C58 C   FIELD 10w01 CRXTGTENDF (wo): clear target-initiated read end flag (when the I3C is acting as controller)
0x40005C58 C   FIELD 11w01 CERRF (wo): clear error flag (whatever the I3C is acting as controller/target)
0x40005C58 C   FIELD 15w01 CIBIF (wo): clear IBI request flag (when the I3C is acting as controller)
0x40005C58 C   FIELD 16w01 CIBIENDF (wo): clear IBI end flag (when the I3C is acting as target)
0x40005C58 C   FIELD 17w01 CCRF (wo): clear controller-role request flag (when the I3C is acting as controller)
0x40005C58 C   FIELD 18w01 CCRUPDF (wo): clear controller-role update flag (when the I3C is acting as target)
0x40005C58 C   FIELD 19w01 CHJF (wo): clear hot-join flag (when the I3C is acting as controller)
0x40005C58 C   FIELD 21w01 CWKPF (wo): clear wakeup flag (when the I3C is acting as target)
0x40005C58 C   FIELD 22w01 CGETF (wo): clear GETxxx CCC flag (when the I3C is acting as target)
0x40005C58 C   FIELD 23w01 CSTAF (wo): clear GETSTATUS CCC flag (when the I3C is acting as target)
0x40005C58 C   FIELD 24w01 CDAUPDF (wo): clear ENTDAA/RSTDAA/SETNEWDA CCC flag (when the I3C is acting as target)
0x40005C58 C   FIELD 25w01 CMWLUPDF (wo): clear SETMWL CCC flag (when the I3C is acting as target)
0x40005C58 C   FIELD 26w01 CMRLUPDF (wo): clear SETMRL CCC flag (when the I3C is acting as target)
0x40005C58 C   FIELD 27w01 CRSTF (wo): clear reset pattern flag (when the I3C is acting as target)
0x40005C58 C   FIELD 28w01 CASUPDF (wo): clear ENTASx CCC flag (when the I3C is acting as target)
0x40005C58 C   FIELD 29w01 CINTUPDF (wo): clear ENEC/DISEC CCC flag (when the I3C is acting as target)
0x40005C58 C   FIELD 30w01 CDEFF (wo): clear DEFTGTS CCC flag (when the I3C is acting as target)
0x40005C58 C   FIELD 31w01 CGRPF (wo): clear DEFGRPA CCC flag (when the I3C is acting as target)
0x40005C60 B  REGISTER I3C_DEVR0: I3C own device characteristics register
0x40005C60 C   FIELD 00w01 DAVAL (rw): dynamic address is valid (when the I3C is acting as target) When the I3C is acting as controller, this field can be written by software, for validating its own dynamic address, for example before a controller-role hand-off. When the I3C is acting as target, this field is asserted by hardware on the acknowledge of the broadcast ENTDAA CCC or the direct SETNEWDA CCC, and this field is cleared by hardware on the acknowledge of the broadcast RSTDAA CCC.
0x40005C60 C   FIELD 01w07 DA (rw): 7-bit dynamic address When the I3C is acting as controller, this field can be written by software, for defining its own dynamic address. When the I3C is acting as target, this field is updated by hardware on the reception of either the broadcast ENTDAA CCC or the direct SETNEWDA CCC.
0x40005C60 C   FIELD 16w01 IBIEN (rw): IBI request enable (when the I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0, and is updated by hardware on the reception of DISEC CCC with DISINT=1 (i.e. cleared) and the reception of ENEC CCC with ENINT=1 (i.e. set).
0x40005C60 C   FIELD 17w01 CREN (rw): controller-role request enable (when the I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0, and is updated by hardware on the reception of DISEC CCC with DISCR=1 (i.e. cleared) and the reception of ENEC CCC with ENCR=1 (i.e. set).
0x40005C60 C   FIELD 19w01 HJEN (rw): hot-join request enable (when the I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0, and is updated by hardware on the reception of DISEC CCC with DISHJ=1 (i.e. cleared) and the reception of ENEC CCC with ENHJ=1 (i.e. set).
0x40005C60 C   FIELD 20w02 AS (ro): activity state (when the I3C is acting as target) This read field is updated by hardware on the reception of a ENTASx CCC (enter activity state, with x=0-3):
0x40005C60 C   FIELD 22w02 RSTACT (ro): reset action/level on received reset pattern (when the I3C is acting as target) This read field is used by hardware on the reception of a direct read RSTACT CCC in order to return the corresponding data byte on the I3C bus. This read field is updated by hardware on the reception of a broadcast or direct write RSTACT CCC (target reset action).
0x40005C60 C   FIELD 24w01 RSTVAL (ro): reset action is valid (when the I3C is acting as target) This read bit is asserted by hardware to indicate that the RTSACT[1:0] field has been updated on the reception of a broadcast or direct write RSTACT CCC (target reset action) and is valid. This field is cleared by hardware when the target receives a frame start. If RSTVAL=1: when the RSTF is asserted (and/or the corresponding interrupt if enabled), I3C_DEVR0.RSTACT[1:0] dictates the reset action to be performed by the software if any. If RSTVAL=0: when the RSTF is asserted (and/or the corresponding interrupt if enabled), the software should issue an I3C reset after a first detected reset pattern, and a system reset on the second one.
0x40005C64 B  REGISTER I3C_DEVR1: I3C device 1 characteristics register
0x40005C64 C   FIELD 01w07 DA (rw): assigned I3C dynamic address to target x (when the I3C is acting as controller) When the I3C is acting as controller, this field should be written by software to store the 7-bit dynamic address that the controller sends via a broadcast ENTDAA or a direct SETNEWDA CCC which has been acknowledged by the target x. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x40005C64 C   FIELD 16w01 IBIACK (rw): IBI request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a IBI request from target x: - After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another IBI request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the controller logs the IBI payload data, if any, depending on I3C_DEVRx.IBIDEN. - The software is notified by the IBI flag (i.e. I3C_EVR.IBIF=1) and/or the corresponding interrupt if enabled; - Independently from IBIACK configuration for this or other devices, further IBI request(s) are NACKed until IBI request flag (i.e. I3C_EVR.IBIF) and controller-role request flag (i.e. I3C_EVR.CRF) are both cleared.
0x40005C64 C   FIELD 17w01 CRACK (rw): controller-role request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a controller-role request from target x: After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another controller-role request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the message continues as initially programmed. The software is notified by the controller-role request flag (i.e. I3C_EVR.CRF=1) and/or the corresponding interrupt if enabled; For effectively granting the controller-role to the requesting secondary controller, software should issue a GETACCCR (formerly known as GETACCMST), followed by a STOP. - Independently of CRACK configuration for this or other devices, further controller-role request(s) are NACKed until controller-role request flag (i.e. I3C_EVR.CRF) and IBI flag (i.e. I3C_EVR.IBIF) are both cleared.
0x40005C64 C   FIELD 18w01 IBIDEN (rw): IBI data enable (when the I3C is acting as controller) When the I3C is acting as controller, this bit should be written by software to store the BCR[2] bit as received from the target x during broadcast ENTDAA or direct GETBCR CCC via the received I3C_RDR. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x40005C64 C   FIELD 19w01 SUSP (rw): suspend/stop I3C transfer on received IBI (when the I3C is acting as controller) When the I3C is acting as controller, this bit is used to receive an IBI from target x with pending read notification feature (i.e. with received MDB[7:5]=3'b101). If this bit is set, when an IBI is received (i.e. I3C_EVR.IBIF=1), a Stop is emitted on the I3C bus and the C-FIFO is automatically flushed by hardware; to avoid a next private read communication issue if a previous private read message to the target x was stored in the C-FIFO.
0x40005C64 C   FIELD 31w01 DIS (ro): DA[6:0] write disabled (when the I3C is acting as controller) When the I3C is acting as controller, once that software set IBIACK=1 or CRACK=1, this read bit is set by hardware (i.e. DIS=1) to lock the configured DA[6:0] and IBIDEN values. Then, to be able to next modify DA[6:0] or IBIDEN, the software must wait for this field DIS to be de-asserted by hardware (i.e. polling on DIS=0) before modifying these two assigned values to the target x. Indeed, the target may be requesting an IBI or a controller-role meanwhile the controller intends to modify DA[6:0] or IBIDEN.
0x40005C68 B  REGISTER I3C_DEVR2: I3C device 2 characteristics register
0x40005C68 C   FIELD 01w07 DA (rw): assigned I3C dynamic address to target x (when the I3C is acting as controller) When the I3C is acting as controller, this field should be written by software to store the 7-bit dynamic address that the controller sends via a broadcast ENTDAA or a direct SETNEWDA CCC which has been acknowledged by the target x. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x40005C68 C   FIELD 16w01 IBIACK (rw): IBI request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a IBI request from target x: - After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another IBI request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the controller logs the IBI payload data, if any, depending on I3C_DEVRx.IBIDEN. - The software is notified by the IBI flag (i.e. I3C_EVR.IBIF=1) and/or the corresponding interrupt if enabled; - Independently from IBIACK configuration for this or other devices, further IBI request(s) are NACKed until IBI request flag (i.e. I3C_EVR.IBIF) and controller-role request flag (i.e. I3C_EVR.CRF) are both cleared.
0x40005C68 C   FIELD 17w01 CRACK (rw): controller-role request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a controller-role request from target x: After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another controller-role request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the message continues as initially programmed. The software is notified by the controller-role request flag (i.e. I3C_EVR.CRF=1) and/or the corresponding interrupt if enabled; For effectively granting the controller-role to the requesting secondary controller, software should issue a GETACCCR (formerly known as GETACCMST), followed by a STOP. - Independently of CRACK configuration for this or other devices, further controller-role request(s) are NACKed until controller-role request flag (i.e. I3C_EVR.CRF) and IBI flag (i.e. I3C_EVR.IBIF) are both cleared.
0x40005C68 C   FIELD 18w01 IBIDEN (rw): IBI data enable (when the I3C is acting as controller) When the I3C is acting as controller, this bit should be written by software to store the BCR[2] bit as received from the target x during broadcast ENTDAA or direct GETBCR CCC via the received I3C_RDR. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x40005C68 C   FIELD 19w01 SUSP (rw): suspend/stop I3C transfer on received IBI (when the I3C is acting as controller) When the I3C is acting as controller, this bit is used to receive an IBI from target x with pending read notification feature (i.e. with received MDB[7:5]=3'b101). If this bit is set, when an IBI is received (i.e. I3C_EVR.IBIF=1), a Stop is emitted on the I3C bus and the C-FIFO is automatically flushed by hardware; to avoid a next private read communication issue if a previous private read message to the target x was stored in the C-FIFO.
0x40005C68 C   FIELD 31w01 DIS (ro): DA[6:0] write disabled (when the I3C is acting as controller) When the I3C is acting as controller, once that software set IBIACK=1 or CRACK=1, this read bit is set by hardware (i.e. DIS=1) to lock the configured DA[6:0] and IBIDEN values. Then, to be able to next modify DA[6:0] or IBIDEN, the software must wait for this field DIS to be de-asserted by hardware (i.e. polling on DIS=0) before modifying these two assigned values to the target x. Indeed, the target may be requesting an IBI or a controller-role meanwhile the controller intends to modify DA[6:0] or IBIDEN.
0x40005C6C B  REGISTER I3C_DEVR3: I3C device 3 characteristics register
0x40005C6C C   FIELD 01w07 DA (rw): assigned I3C dynamic address to target x (when the I3C is acting as controller) When the I3C is acting as controller, this field should be written by software to store the 7-bit dynamic address that the controller sends via a broadcast ENTDAA or a direct SETNEWDA CCC which has been acknowledged by the target x. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x40005C6C C   FIELD 16w01 IBIACK (rw): IBI request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a IBI request from target x: - After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another IBI request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the controller logs the IBI payload data, if any, depending on I3C_DEVRx.IBIDEN. - The software is notified by the IBI flag (i.e. I3C_EVR.IBIF=1) and/or the corresponding interrupt if enabled; - Independently from IBIACK configuration for this or other devices, further IBI request(s) are NACKed until IBI request flag (i.e. I3C_EVR.IBIF) and controller-role request flag (i.e. I3C_EVR.CRF) are both cleared.
0x40005C6C C   FIELD 17w01 CRACK (rw): controller-role request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a controller-role request from target x: After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another controller-role request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the message continues as initially programmed. The software is notified by the controller-role request flag (i.e. I3C_EVR.CRF=1) and/or the corresponding interrupt if enabled; For effectively granting the controller-role to the requesting secondary controller, software should issue a GETACCCR (formerly known as GETACCMST), followed by a STOP. - Independently of CRACK configuration for this or other devices, further controller-role request(s) are NACKed until controller-role request flag (i.e. I3C_EVR.CRF) and IBI flag (i.e. I3C_EVR.IBIF) are both cleared.
0x40005C6C C   FIELD 18w01 IBIDEN (rw): IBI data enable (when the I3C is acting as controller) When the I3C is acting as controller, this bit should be written by software to store the BCR[2] bit as received from the target x during broadcast ENTDAA or direct GETBCR CCC via the received I3C_RDR. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x40005C6C C   FIELD 19w01 SUSP (rw): suspend/stop I3C transfer on received IBI (when the I3C is acting as controller) When the I3C is acting as controller, this bit is used to receive an IBI from target x with pending read notification feature (i.e. with received MDB[7:5]=3'b101). If this bit is set, when an IBI is received (i.e. I3C_EVR.IBIF=1), a Stop is emitted on the I3C bus and the C-FIFO is automatically flushed by hardware; to avoid a next private read communication issue if a previous private read message to the target x was stored in the C-FIFO.
0x40005C6C C   FIELD 31w01 DIS (ro): DA[6:0] write disabled (when the I3C is acting as controller) When the I3C is acting as controller, once that software set IBIACK=1 or CRACK=1, this read bit is set by hardware (i.e. DIS=1) to lock the configured DA[6:0] and IBIDEN values. Then, to be able to next modify DA[6:0] or IBIDEN, the software must wait for this field DIS to be de-asserted by hardware (i.e. polling on DIS=0) before modifying these two assigned values to the target x. Indeed, the target may be requesting an IBI or a controller-role meanwhile the controller intends to modify DA[6:0] or IBIDEN.
0x40005C70 B  REGISTER I3C_DEVR4: I3C device 4 characteristics register
0x40005C70 C   FIELD 01w07 DA (rw): assigned I3C dynamic address to target x (when the I3C is acting as controller) When the I3C is acting as controller, this field should be written by software to store the 7-bit dynamic address that the controller sends via a broadcast ENTDAA or a direct SETNEWDA CCC which has been acknowledged by the target x. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x40005C70 C   FIELD 16w01 IBIACK (rw): IBI request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a IBI request from target x: - After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another IBI request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the controller logs the IBI payload data, if any, depending on I3C_DEVRx.IBIDEN. - The software is notified by the IBI flag (i.e. I3C_EVR.IBIF=1) and/or the corresponding interrupt if enabled; - Independently from IBIACK configuration for this or other devices, further IBI request(s) are NACKed until IBI request flag (i.e. I3C_EVR.IBIF) and controller-role request flag (i.e. I3C_EVR.CRF) are both cleared.
0x40005C70 C   FIELD 17w01 CRACK (rw): controller-role request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a controller-role request from target x: After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another controller-role request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the message continues as initially programmed. The software is notified by the controller-role request flag (i.e. I3C_EVR.CRF=1) and/or the corresponding interrupt if enabled; For effectively granting the controller-role to the requesting secondary controller, software should issue a GETACCCR (formerly known as GETACCMST), followed by a STOP. - Independently of CRACK configuration for this or other devices, further controller-role request(s) are NACKed until controller-role request flag (i.e. I3C_EVR.CRF) and IBI flag (i.e. I3C_EVR.IBIF) are both cleared.
0x40005C70 C   FIELD 18w01 IBIDEN (rw): IBI data enable (when the I3C is acting as controller) When the I3C is acting as controller, this bit should be written by software to store the BCR[2] bit as received from the target x during broadcast ENTDAA or direct GETBCR CCC via the received I3C_RDR. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x40005C70 C   FIELD 19w01 SUSP (rw): suspend/stop I3C transfer on received IBI (when the I3C is acting as controller) When the I3C is acting as controller, this bit is used to receive an IBI from target x with pending read notification feature (i.e. with received MDB[7:5]=3'b101). If this bit is set, when an IBI is received (i.e. I3C_EVR.IBIF=1), a Stop is emitted on the I3C bus and the C-FIFO is automatically flushed by hardware; to avoid a next private read communication issue if a previous private read message to the target x was stored in the C-FIFO.
0x40005C70 C   FIELD 31w01 DIS (ro): DA[6:0] write disabled (when the I3C is acting as controller) When the I3C is acting as controller, once that software set IBIACK=1 or CRACK=1, this read bit is set by hardware (i.e. DIS=1) to lock the configured DA[6:0] and IBIDEN values. Then, to be able to next modify DA[6:0] or IBIDEN, the software must wait for this field DIS to be de-asserted by hardware (i.e. polling on DIS=0) before modifying these two assigned values to the target x. Indeed, the target may be requesting an IBI or a controller-role meanwhile the controller intends to modify DA[6:0] or IBIDEN.
0x40005C90 B  REGISTER I3C_MAXRLR: I3C maximum read length register
0x40005C90 C   FIELD 00w16 MRL (rw): maximum data read length (when I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0 and updated by hardware on the reception of SETMRL command (with potentially also updated IBIP[2:0]). Software is notified of a MRL update by the I3C_EVR.MRLUPF and the corresponding interrupt if enabled. This field is used by hardware to return the value on the I3C bus when the target receives a GETMRL CCC.
0x40005C90 C   FIELD 16w03 IBIP (rw): IBI payload data size, in bytes (when I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0 to set the number of data bytes to be sent to the controller after an IBI request has been acknowledged.This field may be updated by hardware on the reception of SETMRL command (which potentially also updated IBIP[2:0]). Software is notified of a MRL update by the I3C_EVR.MRLUPF and the corresponding interrupt if enabled. others: same as 100
0x40005C94 B  REGISTER I3C_MAXWLR: I3C maximum write length register
0x40005C94 C   FIELD 00w16 MWL (rw): maximum data write length (when I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0 and updated by hardware on the reception of SETMWL command. Software is notified of a MWL update by the I3C_EVR.MWLUPF and the corresponding interrupt if enabled. This field is used by hardware to return the value on the I3C bus when the target receives a GETMWL CCC.
0x40005CA0 B  REGISTER I3C_TIMINGR0: I3C timing register 0
0x40005CA0 C   FIELD 00w08 SCLL_PP (rw): SCL low duration in I3C push-pull phases, in number of kernel clocks cycles: tSCLL_PP = (SCLL_PP + 1) x tI3CCLK SCLL_PP is used to generate tLOW (I3C) timing.
0x40005CA0 C   FIELD 08w08 SCLH_I3C (rw): SCL high duration, used for I3C messages (both in push-pull and open-drain phases), in number of kernel clocks cycles: tSCLH_I3C = (SCLH_I3C + 1) x tI3CCLK SCLH_I3C is used to generate both tHIGH (I3C) and tHIGH_MIXED timings.
0x40005CA0 C   FIELD 16w08 SCLL_OD (rw): SCL low duration in open-drain phases, used for legacy I2C commands and for I3C open-drain phases (address header phase following a START, not a Repeated START), in number of kernel clocks cycles: tSCLL_OD = (SCLL_OD + 1) x tI3CCLK SCLL_OD is used to generate both tLOW (I2C) and tLOW_OD timings (max. of the two).
0x40005CA0 C   FIELD 24w08 SCLH_I2C (rw): SCL high duration, used for legacy I2C commands, in number of kernel clocks cycles: tSCLH_I2C = (SCLH_I2C + 1) x tI3CCLK SCLH_I2C is used to generate tHIGH (I2C) timing.
0x40005CA4 B  REGISTER I3C_TIMINGR1: I3C timing register 1
0x40005CA4 C   FIELD 00w08 AVAL (rw): number of kernel clock cycles, that is used whatever I3C is acting as controller or target, to set the following MIPI I3C timings, like bus available condition time: When the I3C is acting as target: for bus available condition time: it must wait for (bus available condition) time to be elapsed after a stop and before issuing a start request for an IBI or a controller-role request (i.e. bus free condition is sustained for at least tAVAL). refer to MIPI timing tAVAL = 1 s. This timing is defined by: tAVAL = (AVAL[7:0] + 2) x tI3CCLK for bus idle condition time: it must wait for (bus idle condition) time to be elapsed after that both SDA and SCL are continuously high and stable before issuing a hot-join event. Refer to MIPI v1.1 timing tIDLE = 200 s . This timing is defined by: tIDLE = (AVAL[7:0] + 2) x 200 x tI3CCLK When the I3C is acting as controller, it can not stall the clock beyond a maximum stall time (i.e. stall the SCL clock low), as follows: on first bit of assigned address during dynamic address assignment: it can not stall the clock beyond the MIPI timing tSTALLDAA = 15 ms. This timing is defined by: tSTALLDAA = (AVAL[7:0] + 1) x 15000 x tI3CCLK on ACK/NACK phase of I3C/I2C transfer, on parity bit of write data transfer, on transition bit of I3C read transfer: it can not stall the clock beyond the MIPI timing tSTALL = 100 s. This timing is defined by: tSTALL = (AVAL[7:0] + 1) x 100 x tI3CCLK Whatever the I3C is acting as controller or as (controller-capable) target, during a controller-role hand-off procedure: The new controller must wait for a time (refer to MIPI timing tNEWCRLock) before pulling SDA low (i.e. issuing a start). And the active controller must wait for the same time while monitoring new controller and before testing the new controller by pulling SDA low. This time to wait is dependent on the defined I3C_TIMINGR1.ANSCR[1:0], as follows: If ASNCR[1:0]=00: tNEWCRLock = (AVAL[7:0] + 1) x tI3CCLK If ASNCR[1:0]=01: tNEWCRLock = (AVAL[7:0] + 1) x 100 x tI3CCLK If ASNCR[1:0]=10: tNEWCRLock = (AVAL[7:0] + 1) x 2000 x tI3CCLK If ASNCR[1:0]=11: tNEWCRLock = (AVAL[7:0] + 1) x 50000 x tI3CCLK
0x40005CA4 C   FIELD 08w02 ASNCR (rw): activity state of the new controller (when I3C is acting as active- controller) This field indicates the time to wait before being accessed as new target, refer to the other field AVAL[7:0]. This field can be modified only when the I3C is acting as controller.
0x40005CA4 C   FIELD 16w07 FREE (rw): number of kernel clocks cycles that is used to set some MIPI timings like bus free condition time (when the I3C is acting as controller)
0x40005CA4 C   FIELD 28w01 SDA_HD (rw): SDA hold time (when the I3C is acting as controller), in number of kernel clocks cycles (refer to MIPI timing SDA hold time in push-pull tHD_PP):
0x40005CA8 B  REGISTER I3C_TIMINGR2: I3C timing register 2
0x40005CA8 C   FIELD 00w01 STALLT (rw): Controller clock stall on T-bit phase of Data enable The SCL is stalled during STALL x tSCLL_PP in the T-bit phase (before 9th bit). This allows the target to prepare data to be sent.
0x40005CA8 C   FIELD 01w01 STALLD (rw): controller clock stall on PAR phase of Data enable The SCL is stalled during STALL x tSCLL_PP in the T-bit phase (before 9th bit). This allows the target to read received data.
0x40005CA8 C   FIELD 02w01 STALLC (rw): controller clock stall on PAR phase of CCC enable The SCL is stalled during STALL x tSCLL_PP in the T-bit phase of common command code (before 9th bit). This allows the target to decode the command.
0x40005CA8 C   FIELD 03w01 STALLA (rw): controller clock stall enable on ACK phase The SCL is stalled (during tSCLL_STALLas defined by STALL) in the address ACK/NACK phase (before 9th bit). This allows the target to prepare data or the controller to respond to target interrupt.
0x40005CA8 C   FIELD 08w08 STALL (rw): controller clock stall time, in number of kernel clock cycles tSCLL_STALL = STALL x tI3CCLK
0x40005CC0 B  REGISTER I3C_BCR: I3C bus characteristics register
0x40005CC0 C   FIELD 00w01 BCR0 (rw): max data speed limitation
0x40005CC0 C   FIELD 02w01 BCR2 (rw): in-band interrupt (IBI) payload
0x40005CC0 C   FIELD 06w01 BCR6 (rw): controller capable
0x40005CC4 B  REGISTER I3C_DCR: I3C device characteristics register
0x40005CC4 C   FIELD 00w08 DCR (rw): device characteristics ID others: ID to describe the type of the I3C sensor/device Note: The latest MIPI DCR ID assignments are available at: https://www.mipi.org/MIPI_I3C_device_characteristics_register
0x40005CC8 B  REGISTER I3C_GETCAPR: I3C get capability register
0x40005CC8 C   FIELD 14w01 CAPPEND (rw): IBI MDB support for pending read notification This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and indicates the support (or not) of the pending read notification via the IBI MDB[7:0] value. This bit is used to return the GETCAP3 byte in response to the GETCAPS CCC format 1.
0x40005CCC B  REGISTER I3C_CRCAPR: I3C controller-role capability register
0x40005CCC C   FIELD 03w01 CAPDHOFF (rw): delayed controller-role hand-off This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and indicates if this target I3C may need additional time to process a controller-role hand-off requested by the current controller. This bit is used to return the CRCAP2 byte in response to the GETCAPS CCC format 2.
0x40005CCC C   FIELD 09w01 CAPGRP (rw): group management support (when acting as controller) This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and indicates if the I3C is able to support group management when it acts as a controller (after controller-role hand-off) via emitted DEFGRPA, RSTGRPA, and SETGRPA CCC. This bit is used to return the CRCAP1 byte in response to the GETCAPS CCC format 2.
0x40005CD0 B  REGISTER I3C_GETMXDSR: I3C get capability register
0x40005CD0 C   FIELD 00w02 HOFFAS (rw): controller hand-off activity state This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and indicates in which initial activity state the (other) current controller should expect the I3C bus after a controller-role hand-off to this controller-capable I3C, when returning the defining byte CRHDLY (0x91) to a GETMXDS CCC. This 2-bit field is used to return the CRHDLY1 byte in response to the GETCAPS CCC format 3, in order to state which is the activity state of this I3C when becoming controller after a controller-role hand-off, and consequently the time the former controller should wait before testing this I3C to be confirmed its ownership.
0x40005CD0 C   FIELD 08w02 FMT (rw): GETMXDS CCC format This field is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and indicates how is returned the GETMXDS format 1 (without MaxRdTurn) and format 2 (with MaxRdTurn). This bit is used to return the 2-byte format 1 (MaxWr, MaxRd) or 5-byte format 2 (MaxWr, MaxRd, 3-byte MaxRdTurn) byte in response to the GETCAPS CCC. - 3-byte MaxRdTurn is returned with MSB=0, middle byte=0 and LSB=RDTURN[7:0]. - Max read turnaround time is less than 256 s. - 3-byte MaxRdTurn is returned with MSB=0, middle byte=RDTURN[7:0] and LSB=0. - Max read turnaround time is between 256 s and 65535 s - 3-byte MaxRdTurn is returned with MSB=RDTURN[7:0], middle byte=0 and LSB=0. - Max read turnaround time is between 65535 s and 16 s.
0x40005CD0 C   FIELD 16w08 RDTURN (rw): programmed byte of the 3-byte MaxRdTurn (maximum read turnaround byte) This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and writes the value of the selected byte (via the FMT[1:0] field) of the 3-byte MaxRdTurn which is returned in response to the GETMXDS CCC format 2 to encode the maximum read turnaround time.
0x40005CD0 C   FIELD 24w01 TSCO (rw): clock-to-data turnaround time (tSCO) This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and is used to specify the clock-to-data turnaround time tSCO (vs the value of 12 ns). This bit is used by the hardware in response to the GETMXDS CCC to return the encoded clock-to-data turnaround time via the returned MaxRd[5:3] bits.
0x40005CD4 B  REGISTER I3C_EPIDR: I3C extended provisioned ID register
0x40005CD4 C   FIELD 12w04 MIPIID (rw): 4-bit MIPI Instance ID This field is written by software to set and identify individually each instance of this I3C IP with a specific number on a single I3C bus. This field represents the bits[15:12] of the 48-bit provisioned ID. Note: The bits[11:0] of the provisioned ID may be 0.
0x40005CD4 C   FIELD 16w01 IDTSEL (ro): provisioned ID type selector This field is set as 0 i.e. vendor fixed value. This field represents the bit[32] of the 48-bit provisioned ID. Note: The bits[31:16] of the provisioned ID may be 0.
0x40005CD4 C   FIELD 17w15 MIPIMID (ro): 15-bit MIPI manufacturer ID This read field is the 15-bit STMicroelectronics MIPI ID i.e. 0x0104. This field represents the bits[47:33] of the 48-bit provisioned ID.
0x40006000 A PERIPHERAL CRS
0x40006000 B  REGISTER CR: CRS control register
0x40006000 C   FIELD 00w01 SYNCOKIE (rw): SYNC event OK interrupt enable
0x40006000 C   FIELD 01w01 SYNCWARNIE (rw): SYNC warning interrupt enable
0x40006000 C   FIELD 02w01 ERRIE (rw): Synchronization or trimming error interrupt enable
0x40006000 C   FIELD 03w01 ESYNCIE (rw): Expected SYNC interrupt enable
0x40006000 C   FIELD 05w01 CEN (rw): Frequency error counter enable This bit enables the oscillator clock for the frequency error counter. When this bit is set, the CRS_CFGR register is write-protected and cannot be modified.
0x40006000 C   FIELD 06w01 AUTOTRIMEN (rw): Automatic trimming enable This bit enables the automatic hardware adjustment of TRIM bits according to the measured frequency error between two SYNC events. If this bit is set, the TRIM bits are read-only. The TRIM value can be adjusted by hardware by one or two steps at a time, depending on the measured frequency error value. Refer to Section 10.5.3 for more details.
0x40006000 C   FIELD 07w01 SWSYNC (rw): Generate software SYNC event This bit is set by software in order to generate a software SYNC event. It is automatically cleared by hardware.
0x40006000 C   FIELD 08w06 TRIM (rw): HSI48 oscillator smooth trimming These bits provide a user-programmable trimming value to the HSI48 oscillator. They can be programmed to adjust to variations in voltage and temperature that influence the frequency of the HSI48 oscillator. The default value is 32, which corresponds to the middle of the trimming interval. The trimming step is specified in the product datasheet. A higher TRIM value corresponds to a higher output frequency. When the AUTOTRIMEN bit is set, this field is controlled by hardware and is read-only.
0x40006004 B  REGISTER CFGR: CRS configuration register
0x40006004 C   FIELD 00w16 RELOAD (rw): Counter reload value RELOAD is the value to be loaded in the frequency error counter with each SYNC event. Refer to Section 10.5.2 for more details about counter behavior.
0x40006004 C   FIELD 16w08 FELIM (rw): Frequency error limit FELIM contains the value to be used to evaluate the captured frequency error value latched in the FECAP[15:0] bits of the CRS_ISR register. Refer to Section 10.5.3 for more details about FECAP evaluation.
0x40006004 C   FIELD 24w03 SYNCDIV (rw): SYNC divider These bits are set and cleared by software to control the division factor of the SYNC signal.
0x40006004 C   FIELD 28w02 SYNCSRC (rw): SYNC signal source selection These bits are set and cleared by software to select the SYNC signal source (see Table 68: CRS internal input/output signals for STM32U575/585): Note: When using USB LPM (Link Power Management) and the device is in Sleep mode, the periodic USB SOF is not generated by the host. No SYNC signal is therefore provided to the CRS to calibrate the HSI48 oscillator on the run. To guarantee the required clock precision after waking up from Sleep mode, the LSE or reference clock on the GPIOs must be used as SYNC signal.
0x40006004 C   FIELD 31w01 SYNCPOL (rw): SYNC polarity selection This bit is set and cleared by software to select the input polarity for the SYNC signal source.
0x40006008 B  REGISTER ISR: CRS interrupt and status register
0x40006008 C   FIELD 00w01 SYNCOKF (ro): SYNC event OK flag This flag is set by hardware when the measured frequency error is smaller than FELIM * 3. This means that either no adjustment of the TRIM value is needed or that an adjustment by one trimming step is enough to compensate the frequency error. An interrupt is generated if the SYNCOKIE bit is set in the CRS_CR register. It is cleared by software by setting the SYNCOKC bit in the CRS_ICR register.
0x40006008 C   FIELD 01w01 SYNCWARNF (ro): SYNC warning flag This flag is set by hardware when the measured frequency error is greater than or equal to FELIM * 3, but smaller than FELIM * 128. This means that to compensate the frequency error, the TRIM value must be adjusted by two steps or more. An interrupt is generated if the SYNCWARNIE bit is set in the CRS_CR register. It is cleared by software by setting the SYNCWARNC bit in the CRS_ICR register.
0x40006008 C   FIELD 02w01 ERRF (ro): Error flag This flag is set by hardware in case of any synchronization or trimming error. It is the logical OR of the TRIMOVF, SYNCMISS and SYNCERR bits. An interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software in reaction to setting the ERRC bit in the CRS_ICR register, which clears the TRIMOVF, SYNCMISS and SYNCERR bits.
0x40006008 C   FIELD 03w01 ESYNCF (ro): Expected SYNC flag This flag is set by hardware when the frequency error counter reached a zero value. An interrupt is generated if the ESYNCIE bit is set in the CRS_CR register. It is cleared by software by setting the ESYNCC bit in the CRS_ICR register.
0x40006008 C   FIELD 08w01 SYNCERR (ro): SYNC error This flag is set by hardware when the SYNC pulse arrives before the ESYNC event and the measured frequency error is greater than or equal to FELIM * 128. This means that the frequency error is too big (internal frequency too low) to be compensated by adjusting the TRIM value, and that some other action has to be taken. An interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software by setting the ERRC bit in the CRS_ICR register.
0x40006008 C   FIELD 09w01 SYNCMISS (ro): SYNC missed This flag is set by hardware when the frequency error counter reached value FELIM * 128 and no SYNC was detected, meaning either that a SYNC pulse was missed or that the frequency error is too big (internal frequency too high) to be compensated by adjusting the TRIM value, and that some other action has to be taken. At this point, the frequency error counter is stopped (waiting for a next SYNC) and an interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software by setting the ERRC bit in the CRS_ICR register.
0x40006008 C   FIELD 10w01 TRIMOVF (ro): Trimming overflow or underflow This flag is set by hardware when the automatic trimming tries to over- or under-flow the TRIM value. An interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software by setting the ERRC bit in the CRS_ICR register.
0x40006008 C   FIELD 15w01 FEDIR (ro): Frequency error direction FEDIR is the counting direction of the frequency error counter latched in the time of the last SYNC event. It shows whether the actual frequency is below or above the target.
0x40006008 C   FIELD 16w16 FECAP (ro): Frequency error capture FECAP is the frequency error counter value latched in the time of the last SYNC event. Refer to Section 10.5.3 for more details about FECAP usage.
0x4000600C B  REGISTER ICR: CRS interrupt flag clear register
0x4000600C C   FIELD 00w01 SYNCOKC (rw): SYNC event OK clear flag Writing 1 to this bit clears the SYNCOKF flag in the CRS_ISR register.
0x4000600C C   FIELD 01w01 SYNCWARNC (rw): SYNC warning clear flag Writing 1 to this bit clears the SYNCWARNF flag in the CRS_ISR register.
0x4000600C C   FIELD 02w01 ERRC (rw): Error clear flag Writing 1 to this bit clears TRIMOVF, SYNCMISS and SYNCERR bits and consequently also the ERRF flag in the CRS_ISR register.
0x4000600C C   FIELD 03w01 ESYNCC (rw): Expected SYNC clear flag Writing 1 to this bit clears the ESYNCF flag in the CRS_ISR register.
0x40008C00 A PERIPHERAL DTS
0x40008C00 B  REGISTER CFGR1: Temperature sensor configuration register 1
0x40008C00 C   FIELD 00w01 TS1_EN (rw): Temperature sensor 1 enable bit This bit is set and cleared by software. Note: Once enabled, the temperature sensor is active after a specific delay time. The TS1_RDY flag will be set when the sensor is ready.
0x40008C00 C   FIELD 04w01 TS1_START (rw): Start frequency measurement on temperature sensor 1 This bit is set and cleared by software.
0x40008C00 C   FIELD 08w04 TS1_INTRIG_SEL (rw): Input trigger selection bit for temperature sensor 1 These bits are set and cleared by software. They select which input triggers a temperature measurement. Refer to Section 19.3.10: Trigger input.
0x40008C00 C   FIELD 16w04 TS1_SMP_TIME (rw): Sampling time for temperature sensor 1 These bits allow increasing the sampling time to improve measurement precision. When the PCLK clock is selected as reference clock (REFCLK_SEL = 0), the measurement will be performed at TS1_SMP_TIME period of CLK_PTAT. When the LSE is selected as reference clock (REFCLK_SEL =1), the measurement will be performed at TS1_SMP_TIME period of LSE.
0x40008C00 C   FIELD 20w01 REFCLK_SEL (rw): Reference clock selection bit This bit is set and cleared by software. It indicates whether the reference clock is the high speed clock (PCLK) or the low speed clock (LSE).
0x40008C00 C   FIELD 21w01 Q_MEAS_OPT (rw): Quick measurement option bit This bit is set and cleared by software. It is used to increase the measurement speed by suppressing the calibration step. It is effective only when the LSE clock is used as reference clock (REFCLK_SEL=1).
0x40008C00 C   FIELD 24w07 HSREF_CLK_DIV (rw): High speed clock division ratio These bits are set and cleared by software. They can be used to define the division ratio for the main clock in order to obtain the internal frequency lower than 1 MHz required for the calibration. They are applicable only for calibration when PCLK is selected as reference clock (REFCLK_SEL=0). ...
0x40008C08 B  REGISTER T0VALR1: Temperature sensor T0 value register 1
0x40008C08 C   FIELD 00w16 TS1_FMT0 (ro): Engineering value of the frequency measured at T0 for temperature sensor 1 This value is expressed in 0.1 kHz.
0x40008C08 C   FIELD 16w02 TS1_T0 (ro): Engineering value of the T0 temperature for temperature sensor 1. Others: Reserved, must not be used.
0x40008C10 B  REGISTER RAMPVALR: Temperature sensor ramp value register
0x40008C10 C   FIELD 00w16 TS1_RAMP_COEFF (ro): Engineering value of the ramp coefficient for the temperature sensor 1. This value is expressed in Hz/ C.
0x40008C14 B  REGISTER ITR1: Temperature sensor interrupt threshold register 1
0x40008C14 C   FIELD 00w16 TS1_LITTHD (rw): Low interrupt threshold for temperature sensor 1 These bits are set and cleared by software. They indicate the lowest value than can be reached before raising an interrupt signal.
0x40008C14 C   FIELD 16w16 TS1_HITTHD (rw): High interrupt threshold for temperature sensor 1 These bits are set and cleared by software. They indicate the highest value than can be reached before raising an interrupt signal.
0x40008C1C B  REGISTER DR: Temperature sensor data register
0x40008C1C C   FIELD 00w16 TS1_MFREQ (rw): Value of the counter output value for temperature sensor 1
0x40008C20 B  REGISTER SR: Temperature sensor status register
0x40008C20 C   FIELD 00w01 TS1_ITEF (ro): Interrupt flag for end of measurement on temperature sensor 1, synchronized on PCLK. This bit is set by hardware when a temperature measure is done. It is cleared by software by writing 1 to the TS2_CITEF bit in the DTS_ICIFR register. Note: This bit is active only when the TS1_ITEFEN bit is set
0x40008C20 C   FIELD 01w01 TS1_ITLF (ro): Interrupt flag for low threshold on temperature sensor 1, synchronized on PCLK. This bit is set by hardware when the low threshold is set and reached. It is cleared by software by writing 1 to the TS1_CITLF bit in the DTS_ICIFR register. Note: This bit is active only when the TS1_ITLFEN bit is set
0x40008C20 C   FIELD 02w01 TS1_ITHF (ro): Interrupt flag for high threshold on temperature sensor 1, synchronized on PCLK This bit is set by hardware when the high threshold is set and reached. It is cleared by software by writing 1 to the TS1_CITHF bit in the DTS_ICIFR register. Note: This bit is active only when the TS1_ITHFEN bit is set
0x40008C20 C   FIELD 04w01 TS1_AITEF (ro): Asynchronous interrupt flag for end of measure on temperature sensor 1 This bit is set by hardware when a temperature measure is done. It is cleared by software by writing 1 to the TS1_CAITEF bit in the DTS_ICIFR register. Note: This bit is active only when the TS1_AITEFEN bit is set
0x40008C20 C   FIELD 05w01 TS1_AITLF (ro): Asynchronous interrupt flag for low threshold on temperature sensor 1 This bit is set by hardware when the low threshold is reached. It is cleared by software by writing 1 to the TS1_CAITLF bit in the DTS_ICIFR register. Note: This bit is active only when the TS1_AITLFEN bit is set
0x40008C20 C   FIELD 06w01 TS1_AITHF (ro): Asynchronous interrupt flag for high threshold on temperature sensor 1 This bit is set by hardware when the high threshold is reached. It is cleared by software by writing 1 to the TS1_CAITHF bit in the DTS_ICIFR register. Note: This bit is active only when the TS1_AITHFEN bit is set
0x40008C20 C   FIELD 15w01 TS1_RDY (ro): Temperature sensor 1 ready flag This bit is set and reset by hardware. It indicates that a measurement is ongoing.
0x40008C24 B  REGISTER ITENR: Temperature sensor interrupt enable register
0x40008C24 C   FIELD 00w01 TS1_ITEEN (rw): Interrupt enable flag for end of measurement on temperature sensor 1, synchronized on PCLK. This bit are set and cleared by software. It enables the synchronous interrupt for end of measurement.
0x40008C24 C   FIELD 01w01 TS1_ITLEN (rw): Interrupt enable flag for low threshold on temperature sensor 1, synchronized on PCLK. This bit are set and cleared by software. It enables the synchronous interrupt when the measure reaches or is below the low threshold.
0x40008C24 C   FIELD 02w01 TS1_ITHEN (rw): Interrupt enable flag for high threshold on temperature sensor 1, synchronized on PCLK. This bit are set and cleared by software. It enables the interrupt when the measure reaches or is above the high threshold.
0x40008C24 C   FIELD 04w01 TS1_AITEEN (rw): Asynchronous interrupt enable flag for end of measurement on temperature sensor 1 This bit are set and cleared by software. It enables the asynchronous interrupt for end of measurement (only when REFCLK_SEL = 1).
0x40008C24 C   FIELD 05w01 TS1_AITLEN (rw): Asynchronous interrupt enable flag for low threshold on temperature sensor 1. This bit are set and cleared by software. It enables the asynchronous interrupt when the temperature is below the low threshold (only when REFCLK_SEL= 1)
0x40008C24 C   FIELD 06w01 TS1_AITHEN (rw): Asynchronous interrupt enable flag on high threshold for temperature sensor 1. This bit are set and cleared by software. It enables the asynchronous interrupt when the temperature is above the high threshold (only when REFCLK_SEL= 1'')
0x40008C28 B  REGISTER ICIFR: Temperature sensor clear interrupt flag register
0x40008C28 C   FIELD 00w01 TS1_CITEF (rw): Interrupt clear flag for end of measurement on temperature sensor 1 Writing 1 to this bit clears the TS1_ITEF flag in the DTS_SR register.
0x40008C28 C   FIELD 01w01 TS1_CITLF (rw): Interrupt clear flag for low threshold on temperature sensor 1 Writing 1 to this bit clears the TS1_ITLF flag in the DTS_SR register.
0x40008C28 C   FIELD 02w01 TS1_CITHF (rw): Interrupt clear flag for high threshold on temperature sensor 1 Writing this bit to 1 clears the TS1_ITHF flag in the DTS_SR register.
0x40008C28 C   FIELD 04w01 TS1_CAITEF (rw): Write once bit. Clear the asynchronous IT flag for End Of Measure for thermal sensor 1. Writing 1 clears the TS1_AITEF flag of the DTS_SR register.
0x40008C28 C   FIELD 05w01 TS1_CAITLF (rw): Asynchronous interrupt clear flag for low threshold on temperature sensor 1 Writing 1 to this bit clears the TS1_AITLF flag in the DTS_SR register.
0x40008C28 C   FIELD 06w01 TS1_CAITHF (rw): Asynchronous interrupt clear flag for high threshold on temperature sensor 1 Writing 1 to this bit clears the TS1_AITHF flag in the DTS_SR register.
0x40008C2C B  REGISTER OR: Temperature sensor option register
0x40008C2C C   FIELD 00w01 TS_OP0 (rw): general purpose option bits
0x40008C2C C   FIELD 01w01 TS_OP1 (rw): general purpose option bits
0x40008C2C C   FIELD 02w01 TS_OP2 (rw): general purpose option bits
0x40008C2C C   FIELD 03w01 TS_OP3 (rw): general purpose option bits
0x40008C2C C   FIELD 04w01 TS_OP4 (rw): general purpose option bits
0x40008C2C C   FIELD 05w01 TS_OP5 (rw): general purpose option bits
0x40008C2C C   FIELD 06w01 TS_OP6 (rw): general purpose option bits
0x40008C2C C   FIELD 07w01 TS_OP7 (rw): general purpose option bits
0x40008C2C C   FIELD 08w01 TS_OP8 (rw): general purpose option bits
0x40008C2C C   FIELD 09w01 TS_OP9 (rw): general purpose option bits
0x40008C2C C   FIELD 10w01 TS_OP10 (rw): general purpose option bits
0x40008C2C C   FIELD 11w01 TS_OP11 (rw): general purpose option bits
0x40008C2C C   FIELD 12w01 TS_OP12 (rw): general purpose option bits
0x40008C2C C   FIELD 13w01 TS_OP13 (rw): general purpose option bits
0x40008C2C C   FIELD 14w01 TS_OP14 (rw): general purpose option bits
0x40008C2C C   FIELD 15w01 TS_OP15 (rw): general purpose option bits
0x40008C2C C   FIELD 16w01 TS_OP16 (rw): general purpose option bits
0x40008C2C C   FIELD 17w01 TS_OP17 (rw): general purpose option bits
0x40008C2C C   FIELD 18w01 TS_OP18 (rw): general purpose option bits
0x40008C2C C   FIELD 19w01 TS_OP19 (rw): general purpose option bits
0x40008C2C C   FIELD 20w01 TS_OP20 (rw): general purpose option bits
0x40008C2C C   FIELD 21w01 TS_OP21 (rw): general purpose option bits
0x40008C2C C   FIELD 22w01 TS_OP22 (rw): general purpose option bits
0x40008C2C C   FIELD 23w01 TS_OP23 (rw): general purpose option bits
0x40008C2C C   FIELD 24w01 TS_OP24 (rw): general purpose option bits
0x40008C2C C   FIELD 25w01 TS_OP25 (rw): general purpose option bits
0x40008C2C C   FIELD 26w01 TS_OP26 (rw): general purpose option bits
0x40008C2C C   FIELD 27w01 TS_OP27 (rw): general purpose option bits
0x40008C2C C   FIELD 28w01 TS_OP28 (rw): general purpose option bits
0x40008C2C C   FIELD 29w01 TS_OP29 (rw): general purpose option bits
0x40008C2C C   FIELD 30w01 TS_OP30 (rw): general purpose option bits
0x40008C2C C   FIELD 31w01 TS_OP31 (rw): general purpose option bits
0x40009400 A PERIPHERAL LPTIM2
0x40009400 B  REGISTER ISR_intput: LPTIM1 interrupt and status register [alternate]
0x40009400 B  REGISTER ISR_output: LPTIM1 interrupt and status register [alternate]
0x40009400 C   FIELD 00w01 CC1IF (ro): Compare 1 interrupt flag If channel CC1 is configured as output: The CC1IF flag is set by hardware to inform application that LPTIM_CNT register value matches the compare register's value. CC1IF flag can be cleared by writing 1 to the CC1CF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 00w01 CC1IF (ro): capture 1 interrupt flag If channel CC1 is configured as input: CC1IF is set by hardware to inform application that the current value of the counter is captured in LPTIM_CCR1 register. The corresponding interrupt or DMA request is generated if enabled. The CC1OF flag is set if the CC1IF flag was already high.
0x40009400 C   FIELD 01w01 ARRM (ro): Autoreload match ARRM is set by hardware to inform application that LPTIM_CNT register's value reached the LPTIM_ARR register's value. ARRM flag can be cleared by writing 1 to the ARRMCF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 01w01 ARRM (ro): Autoreload match ARRM is set by hardware to inform application that LPTIM_CNT register's value reached the LPTIM_ARR register's value. ARRM flag can be cleared by writing 1 to the ARRMCF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 02w01 EXTTRIG (ro): External trigger edge event EXTTRIG is set by hardware to inform application that a valid edge on the selected external trigger input has occurred. If the trigger is ignored because the timer has already started, then this flag is not set. EXTTRIG flag can be cleared by writing 1 to the EXTTRIGCF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 02w01 EXTTRIG (ro): External trigger edge event EXTTRIG is set by hardware to inform application that a valid edge on the selected external trigger input has occurred. If the trigger is ignored because the timer has already started, then this flag is not set. EXTTRIG flag can be cleared by writing 1 to the EXTTRIGCF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 03w01 CMP1OK (ro): Compare register 1 update OK CMP1OK is set by hardware to inform application that the APB bus write operation to the LPTIM_CCR1 register has been successfully completed. CMP1OK flag can be cleared by writing 1 to the CMP1OKCF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 04w01 ARROK (ro): Autoreload register update OK ARROK is set by hardware to inform application that the APB bus write operation to the LPTIM_ARR register has been successfully completed. ARROK flag can be cleared by writing 1 to the ARROKCF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 04w01 ARROK (ro): Autoreload register update OK ARROK is set by hardware to inform application that the APB bus write operation to the LPTIM_ARR register has been successfully completed. ARROK flag can be cleared by writing 1 to the ARROKCF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 05w01 UP (ro): Counter direction change down to up In Encoder mode, UP bit is set by hardware to inform application that the counter direction has changed from down to up. UP flag can be cleared by writing 1 to the UPCF bit in the LPTIM_ICR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009400 C   FIELD 05w01 UP (ro): Counter direction change down to up In Encoder mode, UP bit is set by hardware to inform application that the counter direction has changed from down to up. UP flag can be cleared by writing 1 to the UPCF bit in the LPTIM_ICR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009400 C   FIELD 06w01 DOWN (ro): Counter direction change up to down In Encoder mode, DOWN bit is set by hardware to inform application that the counter direction has changed from up to down. DOWN flag can be cleared by writing 1 to the DOWNCF bit in the LPTIM_ICR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009400 C   FIELD 06w01 DOWN (ro): Counter direction change up to down In Encoder mode, DOWN bit is set by hardware to inform application that the counter direction has changed from up to down. DOWN flag can be cleared by writing 1 to the DOWNCF bit in the LPTIM_ICR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009400 C   FIELD 07w01 UE (ro): LPTIM update event occurred UE is set by hardware to inform application that an update event was generated. The corresponding interrupt or DMA request is generated if enabled. UE flag can be cleared by writing 1 to the UECF bit in the LPTIM_ICR register. The UE flag is automatically cleared by hardware once the LPTIM_ARR register is written by any bus master like CPU or DMA.
0x40009400 C   FIELD 07w01 UE (ro): LPTIM update event occurred UE is set by hardware to inform application that an update event was generated. UE flag can be cleared by writing 1 to the UECF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 08w01 REPOK (ro): Repetition register update OK REPOK is set by hardware to inform application that the APB bus write operation to the LPTIM_RCR register has been successfully completed. REPOK flag can be cleared by writing 1 to the REPOKCF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 08w01 REPOK (ro): Repetition register update OK REPOK is set by hardware to inform application that the APB bus write operation to the LPTIM_RCR register has been successfully completed. REPOK flag can be cleared by writing 1 to the REPOKCF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 09w01 CC2IF (ro): Capture 2 interrupt flag If channel CC2 is configured as input: CC2IF is set by hardware to inform application that the current value of the counter is captured in LPTIM_CCR2 register. The corresponding interrupt or DMA request is generated if enabled. The CC2OF flag is set if the CC2IF flag was already high. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009400 C   FIELD 09w01 CC2IF (ro): Compare 2 interrupt flag If channel CC2 is configured as output: The CC2IF flag is set by hardware to inform application that LPTIM_CNT register value matches the compare register's value. CC2IF flag can be cleared by writing 1 to the CC2CF bit in the LPTIM_ICR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009400 C   FIELD 12w01 CC1OF (ro): Capture 1 over-capture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing 1 to the CC1OCF bit in the LPTIM_ICR register. Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x40009400 C   FIELD 13w01 CC2OF (ro): Capture 2 over-capture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing 1 to the CC2OCF bit in the LPTIM_ICR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009400 C   FIELD 19w01 CMP2OK (ro): Compare register 2 update OK CMP2OK is set by hardware to inform application that the APB bus write operation to the LPTIM_CCR2 register has been successfully completed. CMP2OK flag can be cleared by writing 1 to the CMP2OKCF bit in the LPTIM_ICR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009400 C   FIELD 24w01 DIEROK (ro): Interrupt enable register update OK DIEROK is set by hardware to inform application that the APB bus write operation to the LPTIM_DIER register has been successfully completed. DIEROK flag can be cleared by writing 1 to the DIEROKCF bit in the LPTIM_ICR register.
0x40009400 C   FIELD 24w01 DIEROK (ro): Interrupt enable register update OK DIEROK is set by hardware to inform application that the APB bus write operation to the LPTIM_DIER register has been successfully completed. DIEROK flag can be cleared by writing 1 to the DIEROKCF bit in the LPTIM_ICR register.
0x40009404 B  REGISTER ICR_intput: LPTIM interrupt clear register
0x40009404 B  REGISTER ICR_output: LPTIM1 interrupt clear register [alternate]
0x40009404 C   FIELD 00w01 CC1CF (wo): Capture/compare 1 clear flag Writing 1 to this bit clears the CC1IF flag in the LPTIM_ISR register.
0x40009404 C   FIELD 00w01 CC1CF (wo): Capture/compare 1 clear flag Writing 1 to this bit clears the CC1IF flag in the LPTIM_ISR register.
0x40009404 C   FIELD 01w01 ARRMCF (wo): Autoreload match clear flag Writing 1 to this bit clears the ARRM flag in the LPTIM_ISR register
0x40009404 C   FIELD 01w01 ARRMCF (wo): Autoreload match clear flag Writing 1 to this bit clears the ARRM flag in the LPTIM_ISR register
0x40009404 C   FIELD 02w01 EXTTRIGCF (wo): External trigger valid edge clear flag Writing 1 to this bit clears the EXTTRIG flag in the LPTIM_ISR register
0x40009404 C   FIELD 02w01 EXTTRIGCF (wo): External trigger valid edge clear flag Writing 1 to this bit clears the EXTTRIG flag in the LPTIM_ISR register
0x40009404 C   FIELD 03w01 CMP1OKCF (wo): Compare register 1 update OK clear flag Writing 1 to this bit clears the CMP1OK flag in the LPTIM_ISR register.
0x40009404 C   FIELD 04w01 ARROKCF (wo): Autoreload register update OK clear flag Writing 1 to this bit clears the ARROK flag in the LPTIM_ISR register
0x40009404 C   FIELD 04w01 ARROKCF (wo): Autoreload register update OK clear flag Writing 1 to this bit clears the ARROK flag in the LPTIM_ISR register
0x40009404 C   FIELD 05w01 UPCF (wo): Direction change to UP clear flag Writing 1 to this bit clear the UP flag in the LPTIM_ISR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009404 C   FIELD 05w01 UPCF (wo): Direction change to UP clear flag Writing 1 to this bit clear the UP flag in the LPTIM_ISR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009404 C   FIELD 06w01 DOWNCF (wo): Direction change to down clear flag Writing 1 to this bit clear the DOWN flag in the LPTIM_ISR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009404 C   FIELD 06w01 DOWNCF (wo): Direction change to down clear flag Writing 1 to this bit clear the DOWN flag in the LPTIM_ISR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009404 C   FIELD 07w01 UECF (wo): Update event clear flag Writing 1 to this bit clear the UE flag in the LPTIM_ISR register.
0x40009404 C   FIELD 07w01 UECF (wo): Update event clear flag Writing 1 to this bit clear the UE flag in the LPTIM_ISR register.
0x40009404 C   FIELD 08w01 REPOKCF (wo): Repetition register update OK clear flag Writing 1 to this bit clears the REPOK flag in the LPTIM_ISR register.
0x40009404 C   FIELD 08w01 REPOKCF (wo): Repetition register update OK clear flag Writing 1 to this bit clears the REPOK flag in the LPTIM_ISR register.
0x40009404 C   FIELD 09w01 CC2CF (wo): Capture/compare 2 clear flag Writing 1 to this bit clears the CC2IF flag in the LPTIM_ISR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009404 C   FIELD 09w01 CC2CF (wo): Capture/compare 2 clear flag Writing 1 to this bit clears the CC2IF flag in the LPTIM_ISR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009404 C   FIELD 12w01 CC1OCF (wo): Capture/compare 1 over-capture clear flag Writing 1 to this bit clears the CC1OF flag in the LPTIM_ISR register. Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x40009404 C   FIELD 13w01 CC2OCF (wo): Capture/compare 2 over-capture clear flag Writing 1 to this bit clears the CC2OF flag in the LPTIM_ISR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009404 C   FIELD 19w01 CMP2OKCF (wo): Compare register 2 update OK clear flag Writing 1 to this bit clears the CMP2OK flag in the LPTIM_ISR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009404 C   FIELD 24w01 DIEROKCF (wo): Interrupt enable register update OK clear flag Writing 1 to this bit clears the DIEROK flag in the LPTIM_ISR register.
0x40009404 C   FIELD 24w01 DIEROKCF (wo): Interrupt enable register update OK clear flag Writing 1 to this bit clears the DIEROK flag in the LPTIM_ISR register.
0x40009408 B  REGISTER DIER_intput: LPTIM interrupt enable register
0x40009408 B  REGISTER DIER_output: LPTIM1 interrupt enable register [alternate]
0x40009408 C   FIELD 00w01 CC1IE (rw): Capture/compare 1 interrupt enable
0x40009408 C   FIELD 00w01 CC1IE (rw): Capture/compare 1 interrupt enable
0x40009408 C   FIELD 01w01 ARRMIE (rw): Autoreload match Interrupt Enable
0x40009408 C   FIELD 01w01 ARRMIE (rw): Autoreload match Interrupt Enable
0x40009408 C   FIELD 02w01 EXTTRIGIE (rw): External trigger valid edge Interrupt Enable
0x40009408 C   FIELD 02w01 EXTTRIGIE (rw): External trigger valid edge Interrupt Enable
0x40009408 C   FIELD 03w01 CMP1OKIE (rw): Compare register 1 update OK interrupt enable
0x40009408 C   FIELD 04w01 ARROKIE (rw): Autoreload register update OK Interrupt Enable
0x40009408 C   FIELD 04w01 ARROKIE (rw): Autoreload register update OK Interrupt Enable
0x40009408 C   FIELD 05w01 UPIE (rw): Direction change to UP Interrupt Enable Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009408 C   FIELD 05w01 UPIE (rw): Direction change to UP Interrupt Enable Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009408 C   FIELD 06w01 DOWNIE (rw): Direction change to down Interrupt Enable Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009408 C   FIELD 06w01 DOWNIE (rw): Direction change to down Interrupt Enable Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009408 C   FIELD 07w01 UEIE (rw): Update event interrupt enable
0x40009408 C   FIELD 07w01 UEIE (rw): Update event interrupt enable
0x40009408 C   FIELD 08w01 REPOKIE (rw): Repetition register update OK interrupt Enable
0x40009408 C   FIELD 08w01 REPOKIE (rw): Repetition register update OK interrupt Enable
0x40009408 C   FIELD 09w01 CC2IE (rw): Capture/compare 2 interrupt enable Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009408 C   FIELD 09w01 CC2IE (rw): Capture/compare 2 interrupt enable Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009408 C   FIELD 12w01 CC1OIE (rw): Capture/compare 1 over-capture interrupt enable Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x40009408 C   FIELD 13w01 CC2OIE (rw): Capture/compare 2 over-capture interrupt enable Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009408 C   FIELD 16w01 CC1DE (rw): Capture/compare 1 DMA request enable Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x40009408 C   FIELD 19w01 CMP2OKIE (rw): Compare register 2 update OK interrupt enable Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x40009408 C   FIELD 23w01 UEDE (rw): Update event DMA request enable Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x40009408 C   FIELD 23w01 UEDE (rw): Update event DMA request enable Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x40009408 C   FIELD 25w01 CC2DE (rw): Capture/compare 2 DMA request enable Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x4000940C B  REGISTER CFGR: LPTIM configuration register
0x4000940C C   FIELD 00w01 CKSEL (rw): Clock selector The CKSEL bit selects which clock source the LPTIM uses:
0x4000940C C   FIELD 01w02 CKPOL (rw): Clock Polarity When the LPTIM is clocked by an external clock source, CKPOL bits is used to configure the active edge or edges used by the counter: If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 1 is active. If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 2 is active. Refer to for more details about Encoder mode sub-modes.
0x4000940C C   FIELD 03w02 CKFLT (rw): Configurable digital filter for external clock The CKFLT value sets the number of consecutive equal samples that should be detected when a level change occurs on an external clock signal before it is considered as a valid level transition. An internal clock source must be present to use this feature
0x4000940C C   FIELD 06w02 TRGFLT (rw): Configurable digital filter for trigger The TRGFLT value sets the number of consecutive equal samples that should be detected when a level change occurs on an internal trigger before it is considered as a valid level transition. An internal clock source must be present to use this feature
0x4000940C C   FIELD 09w03 PRESC (rw): Clock prescaler The PRESC bits configure the prescaler division factor. It can be one among the following division factors:
0x4000940C C   FIELD 13w03 TRIGSEL (rw): Trigger selector The TRIGSEL bits select the trigger source that serves as a trigger event for the LPTIM among the below 8 available sources: See for details.
0x4000940C C   FIELD 17w02 TRIGEN (rw): Trigger enable and polarity The TRIGEN bits controls whether the LPTIM counter is started by an external trigger or not. If the external trigger option is selected, three configurations are possible for the trigger active edge:
0x4000940C C   FIELD 19w01 TIMOUT (rw): Timeout enable The TIMOUT bit controls the Timeout feature
0x4000940C C   FIELD 20w01 WAVE (rw): Waveform shape The WAVE bit controls the output shape
0x4000940C C   FIELD 21w01 WAVPOL (rw): Waveform shape polarity The WAVPOL bit controls the output polarity Note: If the LPTIM implements at least one capture/compare channel, this bit is reserved. Please refer to .
0x4000940C C   FIELD 22w01 PRELOAD (rw): Registers update mode The PRELOAD bit controls the LPTIM_ARR, LPTIM_RCR and the LPTIM_CCRx registers update modality
0x4000940C C   FIELD 23w01 COUNTMODE (rw): counter mode enabled The COUNTMODE bit selects which clock source is used by the LPTIM to clock the counter:
0x4000940C C   FIELD 24w01 ENC (rw): Encoder mode enable The ENC bit controls the Encoder mode Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x40009410 B  REGISTER CR: LPTIM control register
0x40009410 C   FIELD 00w01 ENABLE (rw): LPTIM enable The ENABLE bit is set and cleared by software.
0x40009410 C   FIELD 01w01 SNGSTRT (rw): LPTIM start in Single mode This bit is set by software and cleared by hardware. In case of software start (TRIGEN[1:0] = '00'), setting this bit starts the LPTIM in single pulse mode. If the software start is disabled (TRIGEN[1:0] different than '00'), setting this bit starts the LPTIM in single pulse mode as soon as an external trigger is detected. If this bit is set when the LPTIM is in continuous counting mode, then the LPTIM stops at the following match between LPTIM_ARR and LPTIM_CNT registers. This bit can only be set when the LPTIM is enabled. It is automatically reset by hardware.
0x40009410 C   FIELD 02w01 CNTSTRT (rw): Timer start in Continuous mode This bit is set by software and cleared by hardware. In case of software start (TRIGEN[1:0] = '00'), setting this bit starts the LPTIM in Continuous mode. If the software start is disabled (TRIGEN[1:0] different than '00'), setting this bit starts the timer in Continuous mode as soon as an external trigger is detected. If this bit is set when a single pulse mode counting is ongoing, then the timer does not stop at the next match between the LPTIM_ARR and LPTIM_CNT registers and the LPTIM counter keeps counting in Continuous mode. This bit can be set only when the LPTIM is enabled. It is automatically reset by hardware.
0x40009410 C   FIELD 03w01 COUNTRST (rw): Counter reset This bit is set by software and cleared by hardware. When set to '1' this bit triggers a synchronous reset of the LPTIM_CNT counter register. Due to the synchronous nature of this reset, it only takes place after a synchronization delay of 3 LPTimer core clock cycles (LPTimer core clock may be different from APB clock). This bit can be set only when the LPTIM is enabled. It is automatically reset by hardware. COUNTRST must never be set to '1' by software before it is already cleared to '0' by hardware. Software should consequently check that COUNTRST bit is already cleared to '0' before attempting to set it to '1'.
0x40009410 C   FIELD 04w01 RSTARE (rw): Reset after read enable This bit is set and cleared by software. When RSTARE is set to '1', any read access to LPTIM_CNT register asynchronously resets LPTIM_CNT register content. This bit can be set only when the LPTIM is enabled.
0x40009414 B  REGISTER CCR1: LPTIM compare register 1
0x40009414 C   FIELD 00w16 CCR1 (rw): Capture/compare 1 value If channel CC1 is configured as output: CCR1 is the value to be loaded in the capture/compare 1 register. Depending on the PRELOAD option, the CCR1 register is immediately updated if the PRELOAD bit is reset and updated at next LPTIM update event if PREOAD bit is reset. The capture/compare register 1 contains the value to be compared to the counter LPTIM_CNT and signaled on OC1 output. If channel CC1 is configured as input: CCR1 becomes read-only, it contains the counter value transferred by the last input capture 1 event. The LPTIM_CCR1 register is read-only and cannot be programmed.
0x40009418 B  REGISTER ARR: LPTIM autoreload register
0x40009418 C   FIELD 00w16 ARR (rw): Auto reload value ARR is the autoreload value for the LPTIM. This value must be strictly greater than the CCRx[15:0] value.
0x4000941C B  REGISTER CNT: LPTIM counter register
0x4000941C C   FIELD 00w16 CNT (ro): Counter value When the LPTIM is running with an asynchronous clock, reading the LPTIM_CNT register may return unreliable values. So in this case it is necessary to perform two consecutive read accesses and verify that the two returned values are identical.
0x40009428 B  REGISTER RCR: LPTIM repetition register
0x40009428 C   FIELD 00w08 REP (rw): Repetition register value REP is the repetition value for the LPTIM.
0x4000942C B  REGISTER CCMR1: LPTIM capture/compare mode register 1
0x4000942C C   FIELD 00w01 CC1SEL (rw): Capture/compare 1 selection This bitfield defines the direction of the channel input (capture) or output mode.
0x4000942C C   FIELD 01w01 CC1E (rw): Capture/compare 1 output enable. This bit determines if a capture of the counter value can actually be done into the input capture/compare register 1 (LPTIM_CCR1) or not.
0x4000942C C   FIELD 02w02 CC1P (rw): Capture/compare 1 output polarity. Only bit2 is used to set polarity when output mode is enabled, bit3 is don't care. This field is used to select the IC1 polarity for capture operations.
0x4000942C C   FIELD 08w02 IC1PSC (rw): Input capture 1 prescaler This bitfield defines the ratio of the prescaler acting on the CC1 input (IC1).
0x4000942C C   FIELD 12w02 IC1F (rw): Input capture 1 filter This bitfield defines the number of consecutive equal samples that should be detected when a level change occurs on an external input capture signal before it is considered as a valid level transition. An internal clock source must be present to use this feature.
0x4000942C C   FIELD 16w01 CC2SEL (rw): Capture/compare 2 selection This bitfield defines the direction of the channel, input (capture) or output mode.
0x4000942C C   FIELD 17w01 CC2E (rw): Capture/compare 2 output enable. This bit determines if a capture of the counter value can actually be done into the input capture/compare register 2 (LPTIM_CCR2) or not.
0x4000942C C   FIELD 18w02 CC2P (rw): Capture/compare 2 output polarity. Only bit2 is used to set polarity when output mode is enabled, bit3 is don't care. This field is used to select the IC2 polarity for capture operations.
0x4000942C C   FIELD 24w02 IC2PSC (rw): Input capture 2 prescaler This bitfield defines the ratio of the prescaler acting on the CC2 input (IC2).
0x4000942C C   FIELD 28w02 IC2F (rw): Input capture 2 filter This bitfield defines the number of consecutive equal samples that should be detected when a level change occurs on an external input capture signal before it is considered as a valid level transition. An internal clock source must be present to use this feature.
0x40009434 B  REGISTER CCR2: LPTIM compare register 2
0x40009434 C   FIELD 00w16 CCR2 (rw): Capture/compare 2 value If channel CC2 is configured as output: CCR2 is the value to be loaded in the capture/compare 2 register. Depending on the PRELOAD option, the CCR2 register is immediately updated if the PRELOAD bit is reset and updated at next LPTIM update event if PREOAD bit is reset. The capture/compare register 2 contains the value to be compared to the counter LPTIM_CNT and signaled on OC2 output. If channel CC2 is configured as input: CCR2 becomes read-only, it contains the counter value transferred by the last input capture 2 event. The LPTIM_CCR2 register is read-only and cannot be programmed.
0x4000A400 A PERIPHERAL FDCAN1
0x4000A400 B  REGISTER FDCAN_CREL: FDCAN core release register
0x4000A400 C   FIELD 00w08 DAY (ro): 18
0x4000A400 C   FIELD 08w08 MON (ro): 12
0x4000A400 C   FIELD 16w04 YEAR (ro): 4
0x4000A400 C   FIELD 20w04 SUBSTEP (ro): 1
0x4000A400 C   FIELD 24w04 STEP (ro): 2
0x4000A400 C   FIELD 28w04 REL (ro): 3
0x4000A404 B  REGISTER FDCAN_ENDN: FDCAN endian register
0x4000A404 C   FIELD 00w32 ETV (ro): Endianness test value The endianness test value is 0x8765 4321.
0x4000A40C B  REGISTER FDCAN_DBTP: FDCAN data bit timing and prescaler register
0x4000A40C C   FIELD 00w04 DSJW (rw): Synchronization jump width Must always be smaller than DTSEG2, valid values are 0 to 15. The value used by the hardware is the one programmed, incremented by 1: tSJW = (DSJW + 1) x tq.
0x4000A40C C   FIELD 04w04 DTSEG2 (rw): Data time segment after sample point Valid values are 0 to 15. The value used by the hardware is the one programmed, incremented by 1, i.e. tBS2 = (DTSEG2 + 1) x tq.
0x4000A40C C   FIELD 08w05 DTSEG1 (rw): Data time segment before sample point Valid values are 0 to 31. The value used by the hardware is the one programmed, incremented by 1, i.e. tBS1 = (DTSEG1 + 1) x tq.
0x4000A40C C   FIELD 16w05 DBRP (rw): Data bit rate prescaler The value by which the oscillator frequency is divided to generate the bit time quanta. The bit time is built up from a multiple of this quanta. Valid values for the Baud Rate Prescaler are 0 to 31. The hardware interpreters this value as the value programmed plus 1.
0x4000A40C C   FIELD 23w01 TDC (rw): Transceiver delay compensation
0x4000A410 B  REGISTER FDCAN_TEST: FDCAN test register
0x4000A410 C   FIELD 04w01 LBCK (rw): Loop back mode
0x4000A410 C   FIELD 05w02 TX (rw): Control of transmit pin
0x4000A410 C   FIELD 07w01 RX (ro): Receive pin Monitors the actual value of pin FDCANx_RX
0x4000A414 B  REGISTER FDCAN_RWD: FDCAN RAM watchdog register
0x4000A414 C   FIELD 00w08 WDC (rw): Watchdog configuration Start value of the message RAM watchdog counter. With the reset value of 00, the counter is disabled. These are protected write (P) bits, write access is possible only when the bit 1 [CCE] and bit 0 [INIT] of FDCAN_CCCR register are set to 1.
0x4000A414 C   FIELD 08w08 WDV (ro): Watchdog value Actual message RAM watchdog counter value.
0x4000A418 B  REGISTER FDCAN_CCCR: FDCAN CC control register
0x4000A418 C   FIELD 00w01 INIT (rw): Initialization
0x4000A418 C   FIELD 01w01 CCE (rw): Configuration change enable
0x4000A418 C   FIELD 02w01 ASM (rw): ASM restricted operation mode The restricted operation mode is intended for applications that adapt themselves to different CAN bit rates. The application tests different bit rates and leaves the Restricted operation Mode after it has received a valid frame. In the optional Restricted operation Mode the node is able to transmit and receive data and remote frames and it gives acknowledge to valid frames, but it does not send active error frames or overload frames. In case of an error condition or overload condition, it does not send dominant bits, instead it waits for the occurrence of bus idle condition to resynchronize itself to the CAN communication. The error counters are not incremented. Bit ASM can only be set by software when both CCE and INIT are set to 1. The bit can be reset by the software at any time.
0x4000A418 C   FIELD 03w01 CSA (ro): Clock stop acknowledge
0x4000A418 C   FIELD 04w01 CSR (rw): Clock stop request
0x4000A418 C   FIELD 05w01 MON (rw): Bus monitoring mode Bit MON can only be set by software when both CCE and INIT are set to 1. The bit can be reset by the Host at any time.
0x4000A418 C   FIELD 06w01 DAR (rw): Disable automatic retransmission
0x4000A418 C   FIELD 07w01 TEST (rw): Test mode enable
0x4000A418 C   FIELD 08w01 FDOE (rw): FD operation enable
0x4000A418 C   FIELD 09w01 BRSE (rw): FDCAN bit rate switching
0x4000A418 C   FIELD 12w01 PXHD (rw): Protocol exception handling disable
0x4000A418 C   FIELD 13w01 EFBI (rw): Edge filtering during bus integration
0x4000A418 C   FIELD 14w01 TXP (rw): If this bit is set, the FDCAN pauses for two CAN bit times before starting the next transmission after successfully transmitting a frame.
0x4000A418 C   FIELD 15w01 NISO (rw): Non ISO operation If this bit is set, the FDCAN uses the CAN FD frame format as specified by the Bosch CAN FD Specification V1.0.
0x4000A41C B  REGISTER FDCAN_NBTP: FDCAN nominal bit timing and prescaler register
0x4000A41C C   FIELD 00w07 NTSEG2 (rw): Nominal time segment after sample point Valid values are 0 to 127. The actual interpretation by the hardware of this value is such that one more than the programmed value is used.
0x4000A41C C   FIELD 08w08 NTSEG1 (rw): Nominal time segment before sample point Valid values are 0 to 255. The actual interpretation by the hardware of this value is such that one more than the programmed value is used. These are protected write (P) bits, write access is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A41C C   FIELD 16w09 NBRP (rw): Bit rate prescaler Value by which the oscillator frequency is divided for generating the bit time quanta. The bit time is built up from a multiple of this quanta. Valid values are 0 to 511. The actual interpretation by the hardware of this value is such that one more than the value programmed here is used. These are protected write (P) bits, write access is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A41C C   FIELD 25w07 NSJW (rw): Nominal (re)synchronization jump width Valid values are 0 to 127. The actual interpretation by the hardware of this value is such that the used value is the one programmed incremented by one. These are protected write (P) bits, write access is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A420 B  REGISTER FDCAN_TSCC: FDCAN timestamp counter configuration register
0x4000A420 C   FIELD 00w02 TSS (rw): Timestamp select These are protected write (P) bits, write access is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A420 C   FIELD 16w04 TCP (rw): Timestamp counter prescaler Configures the timestamp and timeout counters time unit in multiples of CAN bit times .
0x4000A424 B  REGISTER FDCAN_TSCV: FDCAN timestamp counter value register
0x4000A424 C   FIELD 00w16 TSC (rw): Timestamp counter The internal/external timestamp counter value is captured on start of frame (both Rx and Tx).
0x4000A428 B  REGISTER FDCAN_TOCC: FDCAN timeout counter configuration register
0x4000A428 C   FIELD 00w01 ETOC (rw): Timeout counter enable This is a protected write (P) bit, write access is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A428 C   FIELD 01w02 TOS (rw): Timeout select When operating in Continuous mode, a write to TOCV presets the counter to the value configured by TOCC[TOP] and continues down-counting. When the timeout counter is controlled by one of the FIFOs, an empty FIFO presets the counter to the value configured by TOCC[TOP]. Down-counting is started when the first FIFO element is stored. These are protected write (P) bits, write access is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A428 C   FIELD 16w16 TOP (rw): Timeout period Start value of the timeout counter (down-counter). Configures the timeout period.
0x4000A42C B  REGISTER FDCAN_TOCV: FDCAN timeout counter value register
0x4000A42C C   FIELD 00w16 TOC (rw): Timeout counter The timeout counter is decremented in multiples of CAN bit times depending on the configuration of TSCC.TCP. When decremented to 0, interrupt flag IR.TOO is set and the timeout counter is stopped. Start and reset/restart conditions are configured via TOCC.TOS.
0x4000A440 B  REGISTER FDCAN_ECR: FDCAN error counter register
0x4000A440 C   FIELD 00w08 TEC (ro): Transmit error counter Actual state of the transmit error counter, values between 0 and 255. When CCCR.ASM is set, the CAN protocol controller does not increment TEC and REC when a CAN protocol error is detected, but CEL is still incremented.
0x4000A440 C   FIELD 08w07 REC (ro): Receive error counter Actual state of the receive error counter, values between 0 and 127.
0x4000A440 C   FIELD 15w01 RP (ro): Receive error passive
0x4000A440 C   FIELD 16w08 CEL (rw): CAN error logging The counter is incremented each time when a CAN protocol error causes the transmit error counter or the receive error counter to be incremented. It is reset by read access to CEL. The counter stops at 0xFF; the next increment of TEC or REC sets interrupt flag IR[ELO]. Access type is RX: reset on read.
0x4000A444 B  REGISTER FDCAN_PSR: FDCAN protocol status register
0x4000A444 C   FIELD 00w03 LEC (rw): Last error code The LEC indicates the type of the last error to occur on the CAN bus. This field is cleared to 0 when a message has been transferred (reception or transmission) without error. Access type is RS: set on read.
0x4000A444 C   FIELD 03w02 ACT (ro): Activity Monitors the module's CAN communication state.
0x4000A444 C   FIELD 05w01 EP (ro): Error passive
0x4000A444 C   FIELD 06w01 EW (ro): Warning Sstatus
0x4000A444 C   FIELD 07w01 BO (ro): Bus_Off status
0x4000A444 C   FIELD 08w03 DLEC (rw): Data last error code Type of last error that occurred in the data phase of a FDCAN format frame with its BRS flag set. Coding is the same as for LEC. This field is cleared to 0 when a FDCAN format frame with its BRS flag set has been transferred (reception or transmission) without error. Access type is RS: set on read.
0x4000A444 C   FIELD 11w01 RESI (rw): ESI flag of last received FDCAN message This bit is set together with REDL, independent of acceptance filtering. Access type is RX: reset on read.
0x4000A444 C   FIELD 12w01 RBRS (rw): BRS flag of last received FDCAN message This bit is set together with REDL, independent of acceptance filtering. Access type is RX: reset on read.
0x4000A444 C   FIELD 13w01 REDL (rw): Received FDCAN message This bit is set independent of acceptance filtering. Access type is RX: reset on read.
0x4000A444 C   FIELD 14w01 PXE (rw): Protocol exception event
0x4000A444 C   FIELD 16w07 TDCV (ro): Transmitter delay compensation value Position of the secondary sample point, defined by the sum of the measured delay from FDCAN_TX to FDCAN_RX and TDCR.TDCO. The SSP position is, in the data phase, the number of minimum time quanta (mtq) between the start of the transmitted bit and the secondary sample point. Valid values are 0 to 127 mtq.
0x4000A448 B  REGISTER FDCAN_TDCR: FDCAN transmitter delay compensation register
0x4000A448 C   FIELD 00w07 TDCF (rw): Transmitter delay compensation filter window length Defines the minimum value for the SSP position, dominant edges on FDCAN_RX that would result in an earlier SSP position are ignored for transmitter delay measurements. These are protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A448 C   FIELD 08w07 TDCO (rw): Transmitter delay compensation offset Offset value defining the distance between the measured delay from FDCAN_TX to FDCAN_RX and the secondary sample point. Valid values are 0 to 127 mtq. These are protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A450 B  REGISTER FDCAN_IR: FDCAN interrupt register
0x4000A450 C   FIELD 00w01 RF0N (rw): Rx FIFO 0 new message
0x4000A450 C   FIELD 01w01 RF0F (rw): Rx FIFO 0 full
0x4000A450 C   FIELD 02w01 RF0L (rw): Rx FIFO 0 message lost
0x4000A450 C   FIELD 03w01 RF1N (rw): Rx FIFO 1 new message
0x4000A450 C   FIELD 04w01 RF1F (rw): Rx FIFO 1 full
0x4000A450 C   FIELD 05w01 RF1L (rw): Rx FIFO 1 message lost
0x4000A450 C   FIELD 06w01 HPM (rw): High-priority message
0x4000A450 C   FIELD 07w01 TC (rw): Transmission completed
0x4000A450 C   FIELD 08w01 TCF (rw): Transmission cancellation finished
0x4000A450 C   FIELD 09w01 TFE (rw): Tx FIFO empty
0x4000A450 C   FIELD 10w01 TEFN (rw): Tx event FIFO New Entry
0x4000A450 C   FIELD 11w01 TEFF (rw): Tx event FIFO full
0x4000A450 C   FIELD 12w01 TEFL (rw): Tx event FIFO element lost
0x4000A450 C   FIELD 13w01 TSW (rw): Timestamp wraparound
0x4000A450 C   FIELD 14w01 MRAF (rw): Message RAM access failure The flag is set when the Rx handler: has not completed acceptance filtering or storage of an accepted message until the arbitration field of the following message has been received. In this case acceptance filtering or message storage is aborted and the Rx handler starts processing of the following message. was unable to write a message to the message RAM. In this case message storage is aborted. In both cases the FIFO put index is not updated. The partly stored message is overwritten when the next message is stored to this location. The flag is also set when the Tx Handler was not able to read a message from the Message RAM in time. In this case message transmission is aborted. In case of a Tx Handler access failure the FDCAN is switched into Restricted operation Mode (see mode). To leave Restricted operation Mode, the Host CPU has to reset CCCR.ASM.
0x4000A450 C   FIELD 15w01 TOO (rw): Timeout occurred
0x4000A450 C   FIELD 16w01 ELO (rw): Error logging overflow
0x4000A450 C   FIELD 17w01 EP (rw): Error passive
0x4000A450 C   FIELD 18w01 EW (rw): Warning status
0x4000A450 C   FIELD 19w01 BO (rw): Bus_Off status
0x4000A450 C   FIELD 20w01 WDI (rw): Watchdog interrupt
0x4000A450 C   FIELD 21w01 PEA (rw): Protocol error in arbitration phase (nominal bit time is used)
0x4000A450 C   FIELD 22w01 PED (rw): Protocol error in data phase (data bit time is used)
0x4000A450 C   FIELD 23w01 ARA (rw): Access to reserved address
0x4000A454 B  REGISTER FDCAN_IE: FDCAN interrupt enable register
0x4000A454 C   FIELD 00w01 RF0NE (rw): Rx FIFO 0 new message interrupt enable
0x4000A454 C   FIELD 01w01 RF0FE (rw): Rx FIFO 0 full interrupt enable
0x4000A454 C   FIELD 02w01 RF0LE (rw): Rx FIFO 0 message lost interrupt enable
0x4000A454 C   FIELD 03w01 RF1NE (rw): Rx FIFO 1 new message interrupt enable
0x4000A454 C   FIELD 04w01 RF1FE (rw): Rx FIFO 1 full interrupt enable
0x4000A454 C   FIELD 05w01 RF1LE (rw): Rx FIFO 1 message lost interrupt enable
0x4000A454 C   FIELD 06w01 HPME (rw): High-priority message interrupt enable
0x4000A454 C   FIELD 07w01 TCE (rw): Transmission completed interrupt enable
0x4000A454 C   FIELD 08w01 TCFE (rw): Transmission cancellation finished interrupt enable
0x4000A454 C   FIELD 09w01 TFEE (rw): Tx FIFO empty interrupt enable
0x4000A454 C   FIELD 10w01 TEFNE (rw): Tx event FIFO new entry interrupt enable
0x4000A454 C   FIELD 11w01 TEFFE (rw): Tx event FIFO full interrupt enable
0x4000A454 C   FIELD 12w01 TEFLE (rw): Tx event FIFO element lost interrupt enable
0x4000A454 C   FIELD 13w01 TSWE (rw): Timestamp wraparound interrupt enable
0x4000A454 C   FIELD 14w01 MRAFE (rw): Message RAM access failure interrupt enable
0x4000A454 C   FIELD 15w01 TOOE (rw): Timeout occurred interrupt enable
0x4000A454 C   FIELD 16w01 ELOE (rw): Error logging overflow interrupt enable
0x4000A454 C   FIELD 17w01 EPE (rw): Error passive interrupt enable
0x4000A454 C   FIELD 18w01 EWE (rw): Warning status interrupt enable
0x4000A454 C   FIELD 19w01 BOE (rw): Bus_Off status
0x4000A454 C   FIELD 20w01 WDIE (rw): Watchdog interrupt enable
0x4000A454 C   FIELD 21w01 PEAE (rw): Protocol error in arbitration phase enable
0x4000A454 C   FIELD 22w01 PEDE (rw): Protocol error in data phase enable
0x4000A454 C   FIELD 23w01 ARAE (rw): Access to reserved address enable
0x4000A458 B  REGISTER FDCAN_ILS: FDCAN interrupt line select register
0x4000A458 C   FIELD 00w01 RxFIFO0 (rw): RX FIFO bit grouping the following interruption RF0LL: Rx FIFO 0 message lost interrupt line RF0FL: Rx FIFO 0 full interrupt line RF0NL: Rx FIFO 0 new message interrupt line
0x4000A458 C   FIELD 01w01 RxFIFO1 (rw): RX FIFO bit grouping the following interruption RF1LL: Rx FIFO 1 message lost interrupt line RF1FL: Rx FIFO 1 full Interrupt line RF1NL: Rx FIFO 1 new message interrupt line
0x4000A458 C   FIELD 02w01 SMSG (rw): Status message bit grouping the following interruption TCFL: Transmission cancellation finished interrupt line TCL: Transmission completed interrupt line HPML: High-priority message interrupt line
0x4000A458 C   FIELD 03w01 TFERR (rw): Tx FIFO ERROR grouping the following interruption TEFLL: Tx event FIFO element lost interrupt line TEFFL: Tx event FIFO full interrupt line TEFNL: Tx event FIFO new entry interrupt line TFEL: Tx FIFO empty interrupt line
0x4000A458 C   FIELD 04w01 MISC (rw): Interrupt regrouping the following interruption TOOL: Timeout occurred interrupt line MRAFL: Message RAM access failure interrupt line TSWL: Timestamp wraparound interrupt line
0x4000A458 C   FIELD 05w01 BERR (rw): Bit and line error grouping the following interruption EPL Error passive interrupt line ELOL: Error logging overflow interrupt line
0x4000A458 C   FIELD 06w01 PERR (rw): Protocol error grouping the following interruption ARAL: Access to reserved address line PEDL: Protocol error in data phase line PEAL: Protocol error in arbitration phase line WDIL: Watchdog interrupt line BOL: Bus_Off status EWL: Warning status interrupt line
0x4000A45C B  REGISTER FDCAN_ILE: FDCAN interrupt line enable register
0x4000A45C C   FIELD 00w01 EINT0 (rw): Enable interrupt line 0
0x4000A45C C   FIELD 01w01 EINT1 (rw): Enable interrupt line 1
0x4000A480 B  REGISTER FDCAN_RXGFC: FDCAN global filter configuration register
0x4000A480 C   FIELD 00w01 RRFE (rw): Reject remote frames extended These are protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A480 C   FIELD 01w01 RRFS (rw): Reject remote frames standard These are protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A480 C   FIELD 02w02 ANFE (rw): Accept non-matching frames extended Defines how received messages with 29-bit IDs that do not match any element of the filter list are treated. These are protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A480 C   FIELD 04w02 ANFS (rw): Accept Non-matching frames standard Defines how received messages with 11-bit IDs that do not match any element of the filter list are treated. These are protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A480 C   FIELD 08w01 F1OM (rw): FIFO 1 operation mode (overwrite or blocking) This is a protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A480 C   FIELD 09w01 F0OM (rw): FIFO 0 operation mode (overwrite or blocking) This is protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A480 C   FIELD 16w05 LSS (rw): List size standard 28: Values greater than 28 are interpreted as 28. These are protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A480 C   FIELD 24w04 LSE (rw): List size extended 8: Values greater than 8 are interpreted as 8. These are protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A484 B  REGISTER FDCAN_XIDAM: FDCAN extended ID and mask register
0x4000A484 C   FIELD 00w29 EIDM (rw): Extended ID mask For acceptance filtering of extended frames the Extended ID AND Mask is AND-ed with the Message ID of a received frame. Intended for masking of 29-bit IDs in SAE J1939. With the reset value of all bits set to 1 the mask is not active. These are protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A488 B  REGISTER FDCAN_HPMS: FDCAN high-priority message status register
0x4000A488 C   FIELD 00w03 BIDX (ro): Buffer index Index of Rx FIFO element to which the message was stored. Only valid when MSI[1] = 1.
0x4000A488 C   FIELD 06w02 MSI (ro): Message storage indicator
0x4000A488 C   FIELD 08w05 FIDX (ro): Filter index Index of matching filter element. Range is 0 to RXGFC[LSS] - 1 or RXGFC[LSE] - 1.
0x4000A488 C   FIELD 15w01 FLST (ro): Filter list Indicates the filter list of the matching filter element.
0x4000A490 B  REGISTER FDCAN_RXF0S: FDCAN Rx FIFO 0 status register
0x4000A490 C   FIELD 00w04 F0FL (ro): Rx FIFO 0 fill level Number of elements stored in Rx FIFO 0, range 0 to 3.
0x4000A490 C   FIELD 08w02 F0GI (ro): Rx FIFO 0 get index Rx FIFO 0 read index pointer, range 0 to 2.
0x4000A490 C   FIELD 16w02 F0PI (ro): Rx FIFO 0 put index Rx FIFO 0 write index pointer, range 0 to 2.
0x4000A490 C   FIELD 24w01 F0F (ro): Rx FIFO 0 full
0x4000A490 C   FIELD 25w01 RF0L (ro): Rx FIFO 0 message lost This bit is a copy of interrupt flag IR[RF0L]. When IR[RF0L] is reset, this bit is also reset.
0x4000A494 B  REGISTER FDCAN_RXF0A: CAN Rx FIFO 0 acknowledge register
0x4000A494 C   FIELD 00w03 F0AI (rw): Rx FIFO 0 acknowledge index After the Host has read a message or a sequence of messages from Rx FIFO 0 it has to write the buffer index of the last element read from Rx FIFO 0 to F0AI. This sets the Rx FIFO 0 get index RXF0S[F0GI] to F0AI + 1 and update the FIFO 0 fill level RXF0S[F0FL].
0x4000A498 B  REGISTER FDCAN_RXF1S: FDCAN Rx FIFO 1 status register
0x4000A498 C   FIELD 00w04 F1FL (ro): Rx FIFO 1 fill level Number of elements stored in Rx FIFO 1, range 0 to 3.
0x4000A498 C   FIELD 08w02 F1GI (ro): Rx FIFO 1 get index Rx FIFO 1 read index pointer, range 0 to 2.
0x4000A498 C   FIELD 16w02 F1PI (ro): Rx FIFO 1 put index Rx FIFO 1 write index pointer, range 0 to 2.
0x4000A498 C   FIELD 24w01 F1F (ro): Rx FIFO 1 full
0x4000A498 C   FIELD 25w01 RF1L (ro): Rx FIFO 1 message lost This bit is a copy of interrupt flag IR[RF1L]. When IR[RF1L] is reset, this bit is also reset.
0x4000A49C B  REGISTER FDCAN_RXF1A: FDCAN Rx FIFO 1 acknowledge register
0x4000A49C C   FIELD 00w03 F1AI (rw): Rx FIFO 1 acknowledge index After the Host has read a message or a sequence of messages from Rx FIFO 1 it has to write the buffer index of the last element read from Rx FIFO 1 to F1AI. This sets the Rx FIFO 1 get index RXF1S[F1GI] to F1AI + 1 and update the FIFO 1 Fill Level RXF1S[F1FL].
0x4000A4C0 B  REGISTER FDCAN_TXBC: FDCAN Tx buffer configuration register
0x4000A4C0 C   FIELD 24w01 TFQM (rw): Tx FIFO/queue mode This is a protected write (P) bit, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x4000A4C4 B  REGISTER FDCAN_TXFQS: FDCAN Tx FIFO/queue status register
0x4000A4C4 C   FIELD 00w03 TFFL (ro): Tx FIFO free level Number of consecutive free Tx FIFO elements starting from TFGI, range 0 to 3. Read as 0 when Tx queue operation is configured (TXBC[TFQM] = 1).
0x4000A4C4 C   FIELD 08w02 TFGI (ro): Tx FIFO get index Tx FIFO read index pointer, range 0 to 3. Read as 0 when Tx queue operation is configured (TXBC.TFQM = 1)
0x4000A4C4 C   FIELD 16w02 TFQPI (ro): Tx FIFO/queue put index Tx FIFO/queue write index pointer, range 0 to 3
0x4000A4C4 C   FIELD 21w01 TFQF (ro): Tx FIFO/queue full
0x4000A4C8 B  REGISTER FDCAN_TXBRP: FDCAN Tx buffer request pending register
0x4000A4C8 C   FIELD 00w03 TRP (ro): Transmission request pending Each Tx buffer has its own transmission request pending bit. The bits are set via register TXBAR. The bits are reset after a requested transmission has completed or has been canceled via register TXBCR. After a TXBRP bit has been set, a Tx scan is started to check for the pending Tx request with the highest priority (Tx buffer with lowest Message ID). A cancellation request resets the corresponding transmission request pending bit of register TXBRP. In case a transmission has already been started when a cancellation is requested, this is done at the end of the transmission, regardless whether the transmission was successful or not. The cancellation request bits are reset directly after the corresponding TXBRP bit has been reset. After a cancellation has been requested, a finished cancellation is signaled via TXBCF after successful transmission together with the corresponding TXBTO bit when the transmission has not yet been started at the point of cancellation when the transmission has been aborted due to lost arbitration when an error occurred during frame transmission In DAR mode all transmissions are automatically canceled if they are not successful. The corresponding TXBCF bit is set for all unsuccessful transmissions.
0x4000A4CC B  REGISTER FDCAN_TXBAR: FDCAN Tx buffer add request register
0x4000A4CC C   FIELD 00w03 AR (rw): Add request Each Tx buffer has its own add request bit. Writing a 1 sets the corresponding add request bit; writing a 0 has no impact. This enables the Host to set transmission requests for multiple Tx buffers with one write to TXBAR. When no Tx scan is running, the bits are reset immediately, else the bits remain set until the Tx scan process has completed.
0x4000A4D0 B  REGISTER FDCAN_TXBCR: FDCAN Tx buffer cancellation request register
0x4000A4D0 C   FIELD 00w03 CR (rw): Cancellation request Each Tx buffer has its own cancellation request bit. Writing a 1 sets the corresponding CR bit; writing a 0 has no impact. This enables the Host to set cancellation requests for multiple Tx buffers with one write to TXBCR. The bits remain set until the corresponding TXBRP bit is reset.
0x4000A4D4 B  REGISTER FDCAN_TXBTO: FDCAN Tx buffer transmission occurred register
0x4000A4D4 C   FIELD 00w03 TO (ro): Transmission occurred. Each Tx buffer has its own TO bit. The bits are set when the corresponding TXBRP bit is cleared after a successful transmission. The bits are reset when a new transmission is requested by writing a 1 to the corresponding bit of register TXBAR.
0x4000A4D8 B  REGISTER FDCAN_TXBCF: FDCAN Tx buffer cancellation finished register
0x4000A4D8 C   FIELD 00w03 CF (ro): Cancellation finished Each Tx buffer has its own CF bit. The bits are set when the corresponding TXBRP bit is cleared after a cancellation was requested via TXBCR. In case the corresponding TXBRP bit was not set at the point of cancellation, CF is set immediately. The bits are reset when a new transmission is requested by writing a 1 to the corresponding bit of register TXBAR.
0x4000A4DC B  REGISTER FDCAN_TXBTIE: FDCAN Tx buffer transmission interrupt enable register
0x4000A4DC C   FIELD 00w03 TIE (rw): Transmission interrupt enable Each Tx buffer has its own TIE bit.
0x4000A4E0 B  REGISTER FDCAN_TXBCIE: FDCAN Tx buffer cancellation finished interrupt enable register
0x4000A4E0 C   FIELD 00w03 CFIE (rw): Cancellation finished interrupt enable. Each Tx buffer has its own CFIE bit.
0x4000A4E4 B  REGISTER FDCAN_TXEFS: FDCAN Tx event FIFO status register
0x4000A4E4 C   FIELD 00w03 EFFL (ro): Event FIFO fill level Number of elements stored in Tx event FIFO, range 0 to 3.
0x4000A4E4 C   FIELD 08w02 EFGI (ro): Event FIFO get index Tx event FIFO read index pointer, range 0 to 3.
0x4000A4E4 C   FIELD 16w02 EFPI (ro): Event FIFO put index Tx event FIFO write index pointer, range 0 to 3.
0x4000A4E4 C   FIELD 24w01 EFF (ro): Event FIFO full
0x4000A4E4 C   FIELD 25w01 TEFL (ro): Tx event FIFO element lost This bit is a copy of interrupt flag IR[TEFL]. When IR[TEFL] is reset, this bit is also reset. 0 No Tx event FIFO element lost 1 Tx event FIFO element lost, also set after write attempt to Tx event FIFO of size 0.
0x4000A4E8 B  REGISTER FDCAN_TXEFA: FDCAN Tx event FIFO acknowledge register
0x4000A4E8 C   FIELD 00w02 EFAI (rw): Event FIFO acknowledge index After the Host has read an element or a sequence of elements from the Tx event FIFO, it has to write the index of the last element read from Tx event FIFO to EFAI. This sets the Tx event FIFO get index TXEFS[EFGI] to EFAI + 1 and updates the FIFO 0 fill level TXEFS[EFFL].
0x4000A500 B  REGISTER FDCAN_CKDIV: FDCAN CFG clock divider register
0x4000A500 C   FIELD 00w04 PDIV (rw): input clock divider The APB clock could be divided prior to be used by the CAN sub system. The rate must be computed using the divider output clock. These are protected write (P) bits, which means that write access by the bits is possible only when the bit 1 [CCE] and bit 0 [INIT] of CCCR register are set to 1.
0x40012C00 A PERIPHERAL TIM1
0x40012C00 B  REGISTER CR1: TIM1 control register 1
0x40012C00 C   FIELD 00w01 CEN (rw): Counter enable Note: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware.
0x40012C00 C   FIELD 01w01 UDIS (rw): Update disable This bit is set and cleared by software to enable/disable UEV event generation. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller Buffered registers are then loaded with their preload values.
0x40012C00 C   FIELD 02w01 URS (rw): Update request source This bit is set and cleared by software to select the UEV event sources. Counter overflow/underflow Setting the UG bit Update generation through the slave mode controller
0x40012C00 C   FIELD 03w01 OPM (rw): One-pulse mode
0x40012C00 C   FIELD 04w01 DIR (rw): Direction Note: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode.
0x40012C00 C   FIELD 05w02 CMS (rw): Center-aligned mode selection Note: It is not allowed to switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1)
0x40012C00 C   FIELD 07w01 ARPE (rw): Auto-reload preload enable
0x40012C00 C   FIELD 08w02 CKD (rw): Clock division This bit-field indicates the division ratio between the timer clock (tim_ker_ck) frequency and the dead-time and sampling clock (t DTS )used by the dead-time generators and the digital filters (tim_etr_in, tim_tix),
0x40012C00 C   FIELD 11w01 UIFREMAP (rw): UIF status bit remapping
0x40012C00 C   FIELD 12w01 DITHEN (rw): Dithering enable Note: The DITHEN bit can only be modified when CEN bit is reset.
0x40012C04 B  REGISTER CR2: TIM1 control register 2
0x40012C04 C   FIELD 00w01 CCPC (rw): Capture/compare preloaded control Note: This bit acts only on channels that have a complementary output.
0x40012C04 C   FIELD 02w01 CCUS (rw): Capture/compare control update selection Note: This bit acts only on channels that have a complementary output.
0x40012C04 C   FIELD 03w01 CCDS (rw): Capture/compare DMA selection
0x40012C04 C   FIELD 04w03 MMS_L (rw): MMS[2:0]: Master mode selection These bits select the information to be sent in master mode to slave timers for synchronization (tim_trgo). The combination is as follows: Other codes reserved Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.
0x40012C04 C   FIELD 07w01 TI1S (rw): tim_ti1 selection
0x40012C04 C   FIELD 08w01 OIS1 (rw): Output Idle state (OC1 output)
0x40012C04 C   FIELD 09w01 OIS1N (rw): Output Idle state (OC1N output)
0x40012C04 C   FIELD 10w01 OIS2 (rw): Output Idle state (OC2 output)
0x40012C04 C   FIELD 11w01 OIS2N (rw): Output Idle state (OC2N output)
0x40012C04 C   FIELD 12w01 OIS3 (rw): Output Idle state (OC3 output)
0x40012C04 C   FIELD 13w01 OIS3N (rw): Output Idle state (OC3N output)
0x40012C04 C   FIELD 14w01 OIS4 (rw): Output Idle state (OC4 output)
0x40012C04 C   FIELD 15w01 OIS4N (rw): Output Idle state (OC4N output)
0x40012C04 C   FIELD 16w01 OIS5 (rw): Output Idle state (OC5 output)
0x40012C04 C   FIELD 18w01 OIS6 (rw): Output Idle state (OC6 output)
0x40012C04 C   FIELD 20w04 MMS2 (rw): Master mode selection 2 These bits allow the information to be sent to ADC for synchronization (tim_trgo2) to be selected. The combination is as follows: Note: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.
0x40012C04 C   FIELD 25w01 MMS_H (rw): MMS[3]
0x40012C08 B  REGISTER SMCR: TIM1 slave mode control register
0x40012C08 C   FIELD 00w03 SMS_L (rw): SMS[2:0]: Slave mode selection
0x40012C08 C   FIELD 03w01 OCCS (rw): OCREF clear selection This bit is used to select the OCREF clear source.
0x40012C08 C   FIELD 04w03 TS_L (rw): TS[2:0]: Trigger selection This bitfield is combined with TS[4:3] bits. This bit-field selects the trigger input to be used to synchronize the counter. Others: Reserved See Table 605: TIMx internal trigger connection for more details on tim_itrx meaning for each Timer. Note: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.
0x40012C08 C   FIELD 07w01 MSM (rw): Master/slave mode
0x40012C08 C   FIELD 08w04 ETF (rw): External trigger filter This bit-field then defines the frequency used to sample tim_etrp signal and the length of the digital filter applied to tim_etrp. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:
0x40012C08 C   FIELD 12w02 ETPS (rw): External trigger prescaler External trigger signal tim_etrp frequency must be at most 1/4 of TIMxCLK frequency. A prescaler can be enabled to reduce tim_etrp frequency. It is useful when inputting fast external clocks on tim_etr_in.
0x40012C08 C   FIELD 14w01 ECE (rw): External clock enable This bit enables External clock mode 2. Note: Setting the ECE bit has the same effect as selecting external clock mode 1 with tim_trgi connected to tim_etrf (SMS=111 and TS=00111). It is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, tim_trgi must not be connected to tim_etrf in this case (TS bits must not be 00111). Note: If external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is tim_etrf.
0x40012C08 C   FIELD 15w01 ETP (rw): External trigger polarity This bit selects whether tim_etr_in or tim_etr_in is used for trigger operations
0x40012C08 C   FIELD 16w01 SMS_H (rw): SMS[3]
0x40012C08 C   FIELD 20w02 TS_H (rw): TS[4:3]
0x40012C08 C   FIELD 24w01 SMSPE (rw): SMS preload enable This bit selects whether the SMS[3:0] bitfield is preloaded
0x40012C08 C   FIELD 25w01 SMSPS (rw): SMS preload source This bit selects whether the events that triggers the SMS[3:0] bitfield transfer from preload to active
0x40012C0C B  REGISTER DIER: TIM1 DMA/interrupt enable register
0x40012C0C C   FIELD 00w01 UIE (rw): Update interrupt enable
0x40012C0C C   FIELD 01w01 CC1IE (rw): Capture/Compare 1 interrupt enable
0x40012C0C C   FIELD 02w01 CC2IE (rw): Capture/Compare 2 interrupt enable
0x40012C0C C   FIELD 03w01 CC3IE (rw): Capture/Compare 3 interrupt enable
0x40012C0C C   FIELD 04w01 CC4IE (rw): Capture/Compare 4 interrupt enable
0x40012C0C C   FIELD 05w01 COMIE (rw): COM interrupt enable
0x40012C0C C   FIELD 06w01 TIE (rw): Trigger interrupt enable
0x40012C0C C   FIELD 07w01 BIE (rw): Break interrupt enable
0x40012C0C C   FIELD 08w01 UDE (rw): Update DMA request enable
0x40012C0C C   FIELD 09w01 CC1DE (rw): Capture/Compare 1 DMA request enable
0x40012C0C C   FIELD 10w01 CC2DE (rw): Capture/Compare 2 DMA request enable
0x40012C0C C   FIELD 11w01 CC3DE (rw): Capture/Compare 3 DMA request enable
0x40012C0C C   FIELD 12w01 CC4DE (rw): Capture/Compare 4 DMA request enable
0x40012C0C C   FIELD 13w01 COMDE (rw): COM DMA request enable
0x40012C0C C   FIELD 14w01 TDE (rw): Trigger DMA request enable
0x40012C0C C   FIELD 20w01 IDXIE (rw): Index interrupt enable
0x40012C0C C   FIELD 21w01 DIRIE (rw): Direction change interrupt enable
0x40012C0C C   FIELD 22w01 IERRIE (rw): Index error interrupt enable
0x40012C0C C   FIELD 23w01 TERRIE (rw): Transition error interrupt enable
0x40012C10 B  REGISTER SR: TIM1 status register
0x40012C10 C   FIELD 00w01 UIF (rw): Update interrupt flag This bit is set by hardware on an update event. It is cleared by software. At overflow or underflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register. When CNT is reinitialized by a trigger event (refer to Section 65.6.3: TIM1 slave mode control register (TIM1_SMCR)), if URS=0 and UDIS=0 in the TIMx_CR1 register.
0x40012C10 C   FIELD 01w01 CC1IF (rw): Capture/compare 1 interrupt flag
0x40012C10 C   FIELD 02w01 CC2IF (rw): Capture/compare 2 interrupt flag
0x40012C10 C   FIELD 03w01 CC3IF (rw): Capture/compare 3 interrupt flag
0x40012C10 C   FIELD 04w01 CC4IF (rw): Capture/compare 4 interrupt flag
0x40012C10 C   FIELD 05w01 COMIF (rw): COM interrupt flag This flag is set by hardware on COM event (when capture/compare Control bits - CCxE, CCxNE, OCxM - have been updated). It is cleared by software.
0x40012C10 C   FIELD 06w01 TIF (rw): Trigger interrupt flag This flag is set by hardware on the TRG trigger event (active edge detected on tim_trgi input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software.
0x40012C10 C   FIELD 07w01 BIF (rw): Break interrupt flag This flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active.
0x40012C10 C   FIELD 08w01 B2IF (rw): Break 2 interrupt flag This flag is set by hardware as soon as the break 2 input goes active. It can be cleared by software if the break 2 input is not active.
0x40012C10 C   FIELD 09w01 CC1OF (rw): Capture/Compare 1 overcapture flag
0x40012C10 C   FIELD 10w01 CC2OF (rw): Capture/Compare 2 overcapture flag
0x40012C10 C   FIELD 11w01 CC3OF (rw): Capture/Compare 3 overcapture flag
0x40012C10 C   FIELD 12w01 CC4OF (rw): Capture/Compare 4 overcapture flag
0x40012C10 C   FIELD 13w01 SBIF (rw): System break interrupt flag This flag is set by hardware as soon as the system break input goes active. It can be cleared by software if the system break input is not active. This flag must be reset to re-start PWM operation.
0x40012C10 C   FIELD 16w01 CC5IF (rw): Compare 5 interrupt flag Refer to CC1IF description Note: Channel 5 can only be configured as output.
0x40012C10 C   FIELD 17w01 CC6IF (rw): Compare 6 interrupt flag Refer to CC1IF description Note: Channel 6 can only be configured as output.
0x40012C10 C   FIELD 20w01 IDXF (rw): Index interrupt flag This flag is set by hardware when an index event is detected. It is cleared by software by writing it to '0'.
0x40012C10 C   FIELD 21w01 DIRF (rw): Direction change interrupt flag This flag is set by hardware when the direction changes in encoder mode (DIR bit value in TIMx_CR is changing). It is cleared by software by writing it to '0'.
0x40012C10 C   FIELD 22w01 IERRF (rw): Index error interrupt flag This flag is set by hardware when an index error is detected. It is cleared by software by writing it to '0'.
0x40012C10 C   FIELD 23w01 TERRF (rw): Transition error interrupt flag This flag is set by hardware when a transition error is detected in encoder mode. It is cleared by software by writing it to '0'.
0x40012C14 B  REGISTER EGR: TIM1 event generation register
0x40012C14 C   FIELD 00w01 UG (wo): Update generation This bit can be set by software, it is automatically cleared by hardware.
0x40012C14 C   FIELD 01w01 CC1G (wo): Capture/compare 1 generation
0x40012C14 C   FIELD 02w01 CC2G (wo): Capture/compare 2 generation
0x40012C14 C   FIELD 03w01 CC3G (wo): Capture/compare 3 generation
0x40012C14 C   FIELD 04w01 CC4G (wo): Capture/compare 4 generation
0x40012C14 C   FIELD 05w01 COMG (wo): Capture/compare control update generation This bit can be set by software, it is automatically cleared by hardware Note: This bit acts only on channels having a complementary output.
0x40012C14 C   FIELD 06w01 TG (wo): Trigger generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.
0x40012C14 C   FIELD 07w01 BG (wo): Break generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.
0x40012C14 C   FIELD 08w01 B2G (wo): Break 2 generation This bit is set by software in order to generate an event, it is automatically cleared by hardware.
0x40012C18 B  REGISTER CCMR1_Input: TIM1 capture/compare mode register 1 [alternate]
0x40012C18 B  REGISTER CCMR1_Output: TIM1 capture/compare mode register 1 [alternate]
0x40012C18 C   FIELD 00w02 CC1S (rw): Capture/Compare 1 selection
0x40012C18 C   FIELD 00w02 CC1S (rw): Capture/compare 1 Selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC1S bits are writable only when the channel is OFF (CC1E = '0' in TIMx_CCER).
0x40012C18 C   FIELD 02w01 OC1FE (rw): Output compare 1 fast enable
0x40012C18 C   FIELD 02w02 IC1PSC (rw): Input capture 1 prescaler
0x40012C18 C   FIELD 03w01 OC1PE (rw): Output compare 1 preload enable
0x40012C18 C   FIELD 04w03 OC1M (rw): Output compare 1 mode
0x40012C18 C   FIELD 04w04 IC1F (rw): Input capture 1 filter
0x40012C18 C   FIELD 07w01 OC1CE (rw): Output compare 1 clear enable
0x40012C18 C   FIELD 08w02 CC2S (rw): Capture/Compare 2 selection
0x40012C18 C   FIELD 08w02 CC2S (rw): Capture/compare 2 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC2S bits are writable only when the channel is OFF (CC2E = '0' in TIMx_CCER).
0x40012C18 C   FIELD 10w01 OC2FE (rw): Output compare 2 fast enable
0x40012C18 C   FIELD 10w02 IC2PSC (rw): Input capture 2 prescaler
0x40012C18 C   FIELD 11w01 OC2PE (rw): Output compare 2 preload enable
0x40012C18 C   FIELD 12w03 OC2M (rw): Output compare 2 mode
0x40012C18 C   FIELD 12w04 IC2F (rw): Input capture 2 filter
0x40012C18 C   FIELD 15w01 OC2CE (rw): Output compare 2 clear enable
0x40012C18 C   FIELD 16w01 OC1M_3 (rw): Output compare 1 mode, bit 3
0x40012C18 C   FIELD 24w01 OC2M_3 (rw): Output compare 2 mode, bit 3
0x40012C1C B  REGISTER CCMR2_Input: TIM1 capture/compare mode register 2 [alternate]
0x40012C1C B  REGISTER CCMR2_Output: TIM1 capture/compare mode register 2 [alternate]
0x40012C1C C   FIELD 00w02 CC3S (=TIM1.CCMR1_Output.CC%sS) (rw): Capture/Compare 3 selection
0x40012C1C C   FIELD 00w02 CC3S (rw): Capture/compare 3 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC3S bits are writable only when the channel is OFF (CC3E = '0' in TIMx_CCER).
0x40012C1C C   FIELD 02w01 OC3FE (=TIM1.CCMR1_Output.OC%sFE) (rw): Output compare 3 fast enable
0x40012C1C C   FIELD 02w02 IC3PSC (=TIM1.CCMR1_Input.IC%sPSC) (rw): Input capture 3 prescaler
0x40012C1C C   FIELD 03w01 OC3PE (=TIM1.CCMR1_Output.OC%sPE) (rw): Output compare 3 preload enable
0x40012C1C C   FIELD 04w03 OC3M (=TIM1.CCMR1_Output.OC%sM) (rw): Output compare 3 mode
0x40012C1C C   FIELD 04w04 IC3F (=TIM1.CCMR1_Input.IC%sF) (rw): Input capture 3 filter
0x40012C1C C   FIELD 07w01 OC3CE (=TIM1.CCMR1_Output.OC%sCE) (rw): Output compare 3 clear enable
0x40012C1C C   FIELD 08w02 CC4S (=TIM1.CCMR1_Output.CC%sS) (rw): Capture/Compare 4 selection
0x40012C1C C   FIELD 08w02 CC4S (rw): Capture/compare 4 selection This bit-field defines the direction of the channel (input/output) as well as the used input. Note: CC4S bits are writable only when the channel is OFF (CC4E = '0' in TIMx_CCER).
0x40012C1C C   FIELD 10w01 OC4FE (=TIM1.CCMR1_Output.OC%sFE) (rw): Output compare 4 fast enable
0x40012C1C C   FIELD 10w02 IC4PSC (=TIM1.CCMR1_Input.IC%sPSC) (rw): Input capture 4 prescaler
0x40012C1C C   FIELD 11w01 OC4PE (=TIM1.CCMR1_Output.OC%sPE) (rw): Output compare 4 preload enable
0x40012C1C C   FIELD 12w03 OC4M (=TIM1.CCMR1_Output.OC%sM) (rw): Output compare 4 mode
0x40012C1C C   FIELD 12w04 IC4F (=TIM1.CCMR1_Input.IC%sF) (rw): Input capture 4 filter
0x40012C1C C   FIELD 15w01 OC4CE (=TIM1.CCMR1_Output.OC%sCE) (rw): Output compare 4 clear enable
0x40012C1C C   FIELD 16w01 OC3M_3 (=TIM1.CCMR1_Output.OC%sM_3) (rw): Output compare 3 mode, bit 3
0x40012C1C C   FIELD 24w01 OC4M_3 (=TIM1.CCMR1_Output.OC%sM_3) (rw): Output compare 4 mode, bit 3
0x40012C20 B  REGISTER CCER: TIM1 capture/compare enable register
0x40012C20 C   FIELD 00w01 CC1E (rw): Capture/Compare 1 output enable
0x40012C20 C   FIELD 01w01 CC1P (rw): Capture/Compare 1 output Polarity
0x40012C20 C   FIELD 02w01 CC1NE (rw): Capture/Compare 1 complementary output enable
0x40012C20 C   FIELD 03w01 CC1NP (rw): Capture/Compare 1 output Polarity
0x40012C20 C   FIELD 04w01 CC2E (rw): Capture/Compare 2 output enable
0x40012C20 C   FIELD 05w01 CC2P (rw): Capture/Compare 2 output Polarity
0x40012C20 C   FIELD 06w01 CC2NE (rw): Capture/Compare 2 complementary output enable
0x40012C20 C   FIELD 07w01 CC2NP (rw): Capture/Compare 2 output Polarity
0x40012C20 C   FIELD 08w01 CC3E (rw): Capture/Compare 3 output enable
0x40012C20 C   FIELD 09w01 CC3P (rw): Capture/Compare 3 output Polarity
0x40012C20 C   FIELD 10w01 CC3NE (rw): Capture/Compare 3 complementary output enable
0x40012C20 C   FIELD 11w01 CC3NP (rw): Capture/Compare 3 output Polarity
0x40012C20 C   FIELD 12w01 CC4E (rw): Capture/Compare 4 output enable
0x40012C20 C   FIELD 13w01 CC4P (rw): Capture/Compare 4 output Polarity
0x40012C20 C   FIELD 14w01 CC4NE (rw): Capture/Compare 4 complementary output enable
0x40012C20 C   FIELD 15w01 CC4NP (rw): Capture/Compare 4 output Polarity
0x40012C20 C   FIELD 16w01 CC5E (rw): Capture/Compare 5 output enable
0x40012C20 C   FIELD 17w01 CC5P (rw): Capture/Compare 5 output Polarity
0x40012C20 C   FIELD 20w01 CC6E (rw): Capture/Compare 6 output enable
0x40012C20 C   FIELD 21w01 CC6P (rw): Capture/Compare 6 output Polarity
0x40012C24 B  REGISTER CNT: TIM1 counter
0x40012C24 C   FIELD 00w16 CNT (rw): Counter value Non-dithering mode (DITHEN = 0) The register holds the counter value. Dithering mode (DITHEN = 1) The register only holds the non-dithered part in CNT[15:0]. The fractional part is not available.
0x40012C24 C   FIELD 31w01 UIFCPY (ro): UIF copy This bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in the TIMxCR1 is reset, bit 31 is reserved and read at 0.
0x40012C28 B  REGISTER PSC: TIM1 prescaler
0x40012C28 C   FIELD 00w16 PSC (rw): Prescaler value The counter clock frequency (f tim_cnt_ck ) is equal to f tim_psc_ck / (PSC[15:0] + 1). PSC contains the value to be loaded in the active prescaler register at each update event (including when the counter is cleared through UG bit of TIMx_EGR register or through trigger controller when configured in 'reset mode').
0x40012C2C B  REGISTER ARR: TIM1 auto-reload register
0x40012C2C C   FIELD 00w20 ARR (rw): Auto-reload value ARR is the value to be loaded in the actual auto-reload register. Refer to the Section 65.3.3: Time-base unit on page 4457 for more details about ARR update and behavior. The counter is blocked while the auto-reload value is null. Non-dithering mode (DITHEN = 0) The register holds the auto-reload value. Dithering mode (DITHEN = 1) The register holds the integer part in ARR[19:4]. The ARR[3:0] bitfield contains the dithered part.
0x40012C30 B  REGISTER RCR: TIM1 repetition counter register
0x40012C30 C   FIELD 00w16 REP (rw): Repetition counter reload value This bitfield defines the update rate of the compare registers (i.e. periodic transfers from preload to active registers) when preload registers are enable. It also defines the update interrupt generation rate, if this interrupt is enable. When the repetition down-counter reaches zero, an update event is generated and it restarts counting from REP value. As the repetition counter is reloaded with REP value only at the repetition update event UEV, any write to the TIMx_RCR register is not taken in account until the next repetition update event. It means in PWM mode (REP+1) corresponds to: the number of PWM periods in edge-aligned mode the number of half PWM period in center-aligned mode.
0x40012C34 B  REGISTER CCR1: capture/compare register
0x40012C34 C   FIELD 00w20 CCR (rw): Capture/Compare value
0x40012C38 B  REGISTER CCR2: capture/compare register
0x40012C38 C   FIELD 00w20 CCR (rw): Capture/Compare value
0x40012C3C B  REGISTER CCR3: capture/compare register
0x40012C3C C   FIELD 00w20 CCR (rw): Capture/Compare value
0x40012C40 B  REGISTER CCR4: capture/compare register
0x40012C40 C   FIELD 00w20 CCR (rw): Capture/Compare value
0x40012C44 B  REGISTER BDTR: TIM1 break and dead-time register
0x40012C44 C   FIELD 00w08 DTG (rw): Dead-time generator setup This bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration. DTG[7:5]=0xx = DT=DTG[7:0]x t dtg with t dtg =t DTS . DTG[7:5]=10x = DT=(64+DTG[5:0])xt dtg with T dtg =2xt DTS . DTG[7:5]=110 = DT=(32+DTG[4:0])xt dtg with T dtg =8xt DTS . DTG[7:5]=111 = DT=(32+DTG[4:0])xt dtg with T dtg =16xt DTS . Example if T DTS =125ns (8MHz), dead-time possible values are: 0 to 15875 ns by 125 ns steps, 16 us to 31750 ns by 250 ns steps, 32 us to 63us by 1 us steps, 64 us to 126 us by 2 us steps Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C44 C   FIELD 08w02 LOCK (rw): Lock configuration These bits offer a write protection against software errors. Note: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset.
0x40012C44 C   FIELD 10w01 OSSI (rw): Off-state selection for idle mode This bit is used when MOE=0 due to a break event or by a software write, on channels configured as outputs. See OC/OCN enable description for more details (Section 65.6.11: TIM1 capture/compare enable register (TIM1_CCER)). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C44 C   FIELD 11w01 OSSR (rw): Off-state selection for Run mode This bit is used when MOE=1 on channels having a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer. See OC/OCN enable description for more details (Section 65.6.11: TIM1 capture/compare enable register (TIM1_CCER)). Note: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C44 C   FIELD 12w01 BKE (rw): Break enable This bit enables the complete break protection (including all sources connected to bk_acth and BKIN sources, as per Figure 635: Break and Break2 circuitry overview). Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.
0x40012C44 C   FIELD 13w01 BKP (rw): Break polarity Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.
0x40012C44 C   FIELD 14w01 AOE (rw): Automatic output enable Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C44 C   FIELD 15w01 MOE (rw): Main output enable This bit is cleared asynchronously by hardware as soon as one of the break inputs is active (tim_brk or tim_brk2). It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output. In response to a break event or if MOE is written to 0: OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit. See OC/OCN enable description for more details (Section 65.6.11: TIM1 capture/compare enable register (TIM1_CCER)).
0x40012C44 C   FIELD 16w04 BKF (rw): Break filter This bit-field defines the frequency used to sample tim_brk input and the length of the digital filter applied to tim_brk. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C44 C   FIELD 20w04 BK2F (rw): Break 2 filter This bit-field defines the frequency used to sample tim_brk2 input and the length of the digital filter applied to tim_brk2. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output: Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C44 C   FIELD 24w01 BK2E (rw): Break 2 enable This bit enables the complete break 2 protection (including all sources connected to bk_acth and BKIN sources, as per Figure 635: Break and Break2 circuitry overview). Note: The BRKIN2 must only be used with OSSR = OSSI = 1. Note: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.
0x40012C44 C   FIELD 25w01 BK2P (rw): Break 2 polarity Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.
0x40012C44 C   FIELD 26w01 BKDSRM (rw): Break disarm This bit is cleared by hardware when no break source is active. The BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared. Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.
0x40012C44 C   FIELD 27w01 BK2DSRM (rw): Break2 disarm Refer to BKDSRM description
0x40012C44 C   FIELD 28w01 BKBID (rw): Break bidirectional In the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices. Note: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register). Note: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective.
0x40012C44 C   FIELD 29w01 BK2BID (rw): Break2 bidirectional Refer to BKBID description
0x40012C48 B  REGISTER CCR5: capture/compare register
0x40012C48 C   FIELD 00w20 CCR (rw): Capture/Compare value
0x40012C48 C   FIELD 29w01 GC5C1 (rw): Group channel 5 and channel 1 Distortion on channel 1 output: This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR1). Note: it is also possible to apply this distortion on combined PWM signals.
0x40012C48 C   FIELD 30w01 GC5C2 (rw): Group channel 5 and channel 2 Distortion on channel 2 output: This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR1). Note: it is also possible to apply this distortion on combined PWM signals.
0x40012C48 C   FIELD 31w01 GC5C3 (rw): Group channel 5 and channel 3 Distortion on channel 3 output: This bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR2). Note: it is also possible to apply this distortion on combined PWM signals.
0x40012C4C B  REGISTER CCR6: capture/compare register
0x40012C4C C   FIELD 00w20 CCR (rw): Capture/Compare value
0x40012C50 B  REGISTER CCMR3: TIM1 capture/compare mode register 3
0x40012C50 C   FIELD 02w01 OC5FE (rw): Output compare 5 fast enable
0x40012C50 C   FIELD 03w01 OC5PE (rw): Output compare 5 preload enable
0x40012C50 C   FIELD 04w03 OC5M (rw): OC5M[2:0]: Output compare 5 mode
0x40012C50 C   FIELD 07w01 OC5CE (rw): Output compare 5 clear enable
0x40012C50 C   FIELD 10w01 OC6FE (rw): Output compare 6 fast enable
0x40012C50 C   FIELD 11w01 OC6PE (rw): Output compare 6 preload enable
0x40012C50 C   FIELD 12w03 OC6M (rw): OC6M[2:0]: Output compare 6 mode
0x40012C50 C   FIELD 15w01 OC6CE (rw): Output compare 6 clear enable
0x40012C50 C   FIELD 16w01 OC5M_1 (rw): OC5M[3]
0x40012C50 C   FIELD 24w01 OC6M_1 (rw): OC6M[3]
0x40012C54 B  REGISTER DTR2: TIM1 timer deadtime register 2
0x40012C54 C   FIELD 00w08 DTGF (rw): Dead-time falling edge generator setup This bit-field defines the duration of the dead-time inserted between the complementary outputs, on the falling edge. DTGF[7:5]=0xx = DTF=DTGF[7:0]x t dtg with t dtg =t DTS . DTGF[7:5]=10x = DTF=(64+DTGF[5:0])xt dtg with T dtg =2xt DTS . DTGF[7:5]=110 = DTF=(32+DTGF[4:0])xt dtg with T dtg =8xt DTS . DTGF[7:5]=111 = DTF=(32+DTGF[4:0])xt dtg with T dtg =16xt DTS . Example if T DTS =125ns (8MHz), dead-time possible values are: 0 to 15875 ns by 125 ns steps, 16 us to 31750 ns by 250 ns steps, 32 us to 63us by 1 us steps, 64 us to 126 us by 2 us steps Note: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C54 C   FIELD 16w01 DTAE (rw): Deadtime asymmetric enable Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C54 C   FIELD 17w01 DTPE (rw): Deadtime preload enable Note: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C58 B  REGISTER ECR: TIM1 timer encoder control register
0x40012C58 C   FIELD 00w01 IE (rw): Index enable This bit indicates if the Index event resets the counter.
0x40012C58 C   FIELD 01w02 IDIR (rw): Index direction This bit indicates in which direction the Index event resets the counter. Note: The IDR[1:0] bitfield must be written when IE bit is reset (index disabled).
0x40012C58 C   FIELD 03w02 IBLK (rw): Index blanking This bit indicates if the Index event is conditioned by the tim_ti3 input
0x40012C58 C   FIELD 05w01 FIDX (rw): First index This bit indicates if the first index only is taken into account
0x40012C58 C   FIELD 06w02 IPOS (rw): Index positioning In quadrature encoder mode (SMS[3:0] = 0001, 0010, 0011, 1110, 1111), this bit indicates in which AB input configuration the Index event resets the counter. In directional clock mode or clock plus direction mode (SMS[3:0] = 1010, 1011, 1100, 1101), these bits indicates on which level the Index event resets the counter. In bidirectional clock mode, this applies for both clock inputs. x0: Index resets the counter when clock is 0 x1: Index resets the counter when clock is 1 Note: IPOS[1] bit is not significant
0x40012C58 C   FIELD 16w08 PW (rw): Pulse width This bitfield defines the pulse duration, as following: t PW = PW[7:0] x t PWG
0x40012C58 C   FIELD 24w03 PWPRSC (rw): Pulse width prescaler This bitfield sets the clock prescaler for the pulse generator, as following: t PWG = (2sup(PWPRSC[2:0])/sup) x t tim_ker_ck
0x40012C5C B  REGISTER TISEL: TIM1 timer input selection register
0x40012C5C C   FIELD 00w04 TI1SEL (rw): Selects tim_ti1[0..15] input ... Refer to Section 65.3.2: TIM1 pins and internal signals for interconnects list.
0x40012C5C C   FIELD 08w04 TI2SEL (rw): Selects tim_ti2[0..15] input ... Refer to Section 65.3.2: TIM1 pins and internal signals for interconnects list.
0x40012C5C C   FIELD 16w04 TI3SEL (rw): Selects tim_ti3[0..15] input ... Refer to Section 65.3.2: TIM1 pins and internal signals for interconnects list.
0x40012C5C C   FIELD 24w04 TI4SEL (rw): Selects tim_ti4[0..15] input ... Refer to Section 65.3.2: TIM1 pins and internal signals for interconnects list.
0x40012C60 B  REGISTER AF1: TIM1 alternate function option register 1
0x40012C60 C   FIELD 00w01 BKINE (rw): TIMx_BKIN input enable This bit enables the TIMx_BKIN alternate function input for the timer's tim_brk input. TIMx_BKIN input is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 01w01 BKCMP1E (rw): tim_brk_cmp1 enable This bit enables the tim_brk_cmp1 for the timer's tim_brk input. tim_brk_cmp1 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 02w01 BKCMP2E (rw): tim_brk_cmp2 enable This bit enables the tim_brk_cmp2 for the timer's tim_brk input. tim_brk_cmp2 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 03w01 BKCMP3E (rw): tim_brk_cmp3 enable This bit enables the tim_brk_cmp3 for the timer's tim_brk input. tim_brk_cmp3 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 04w01 BKCMP4E (rw): tim_brk_cmp4 enable This bit enables the tim_brk_cmp4 for the timer's tim_brk input. tim_brk_cmp4 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 05w01 BKCMP5E (rw): tim_brk_cmp5 enable This bit enables the tim_brk_cmp5 for the timer's tim_brk input. tim_brk_cmp5 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 06w01 BKCMP6E (rw): tim_brk_cmp6 enable This bit enables the tim_brk_cmp6 for the timer's tim_brk input. tim_brk_cmp6 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 07w01 BKCMP7E (rw): tim_brk_cmp7 enable This bit enables the tim_brk_cmp7 for the timer's tim_brk input. tim_brk_cmp7 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 08w01 BKCMP8E (rw): tim_brk_cmp8 enable This bit enables the tim_brk_cmp8 for the timer's tim_brk input. tim_brk_cmp8 output is 'ORed' with the other tim_brk sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 09w01 BKINP (rw): TIMx_BKIN input polarity This bit selects the TIMx_BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 10w01 BKCMP1P (rw): tim_brk_cmp1 input polarity This bit selects the tim_brk_cmp1 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 11w01 BKCMP2P (rw): tim_brk_cmp2 input polarity This bit selects the tim_brk_cmp2 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 12w01 BKCMP3P (rw): tim_brk_cmp3 input polarity This bit selects the tim_brk_cmp3 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 13w01 BKCMP4P (rw): tim_brk_cmp4 input polarity This bit selects the tim_brk_cmp4 input sensitivity. It must be programmed together with the BKP polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C60 C   FIELD 14w04 ETRSEL (rw): etr_in source selection These bits select the etr_in input source. ... Refer to Section 65.3.2: TIM1 pins and internal signals for product specific implementation. Note: These bits can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 B  REGISTER AF2: TIM1 alternate function register 2
0x40012C64 C   FIELD 00w01 BK2INE (rw): TIMx_BKIN2 input enable This bit enables the TIMx_BKIN2 alternate function input for the timer's tim_brk2 input. TIMx_BKIN2 input is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 01w01 BK2CMP1E (rw): tim_brk2_cmp1 enable This bit enables the tim_brk2_cmp1 for the timer's tim_brk2 input. tim_brk2_cmp1 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 02w01 BK2CMP2E (rw): tim_brk2_cmp2 enable This bit enables the tim_brk2_cmp2 for the timer's tim_brk2 input. tim_brk2_cmp2 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 03w01 BK2CMP3E (rw): tim_brk2_cmp3 enable This bit enables the tim_brk2_cmp3 for the timer's tim_brk2 input. tim_brk2_cmp3 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 04w01 BK2CMP4E (rw): tim_brk2_cmp4 enable This bit enables the tim_brk2_cmp4 for the timer's tim_brk2 input. tim_brk2_cmp4 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 05w01 BK2CMP5E (rw): tim_brk2_cmp5 enable This bit enables the tim_brk2_cmp5 for the timer's tim_brk2 input. tim_brk2_cmp5 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 06w01 BK2CMP6E (rw): tim_brk2_cmp6 enable This bit enables the tim_brk2_cmp6 for the timer's tim_brk2 input. tim_brk2_cmp6 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 07w01 BK2CMP7E (rw): tim_brk2_cmp7 enable This bit enables the tim_brk2_cmp7 for the timer's tim_brk2 input. tim_brk2_cmp7 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 08w01 BK2CMP8E (rw): tim_brk2_cmp8 enable This bit enables the tim_brk2_cmp8 for the timer's tim_brk2 input. tim_brk2_cmp8 output is 'ORed' with the other tim_brk2 sources. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 09w01 BK2INP (rw): TIMx_BKIN2 input polarity This bit selects the TIMx_BKIN2 alternate function input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 10w01 BK2CMP1P (rw): tim_brk2_cmp1 input polarity This bit selects the tim_brk2_cmp1 input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 11w01 BK2CMP2P (rw): tim_brk2_cmp2 input polarity This bit selects the tim_brk2_cmp2 input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 12w01 BK2CMP3P (rw): tim_brk2_cmp3 input polarity This bit selects the tim_brk2_cmp3 input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 13w01 BK2CMP4P (rw): tim_brk2_cmp4 input polarity This bit selects the tim_brk2_cmp4 input sensitivity. It must be programmed together with the BK2P polarity bit. Note: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012C64 C   FIELD 16w03 OCRSEL (rw): ocref_clr source selection These bits select the ocref_clr input source. ... Refer to Section 65.3.2: TIM1 pins and internal signals for product specific information. Note: These bits can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).
0x40012FDC B  REGISTER DCR: TIM1 DMA control register
0x40012FDC C   FIELD 00w05 DBA (rw): DMA base address This 5-bits vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register. Example: ...
0x40012FDC C   FIELD 08w05 DBL (rw): DMA burst length This 5-bit vector defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below). ... Example: Let us consider the following transfer: DBL = 7 bytes & DBA = TIM2_CR1. If DBL = 7 bytes and DBA = TIM2_CR1 represents the address of the byte to be transferred, the address of the transfer should be given by the following equation: (TIMx_CR1 address) + DBA + (DMA index), where DMA index = DBL In this example, 7 bytes are added to (TIMx_CR1 address) + DBA, which gives us the address from/to which the data are copied. In this case, the transfer is done to 7 registers starting from the following address: (TIMx_CR1 address) + DBA According to the configuration of the DMA Data Size, several cases may occur: If the DMA Data Size is configured in half-words, 16-bit data are transferred to each of the 7 registers. If the DMA Data Size is configured in bytes, the data are also transferred to 7 registers: the first register contains the first MSB byte, the second register, the first LSB byte and so on. So with the transfer Timer, one also has to specify the size of data transferred by DMA.
0x40012FDC C   FIELD 16w04 DBSS (rw): DMA burst source selection This bitfield defines the interrupt source that triggers the DMA burst transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address). Others: reserved
0x40012FE0 B  REGISTER DMAR: TIM1 DMA address for full transfer
0x40012FE0 C   FIELD 00w32 DMAB (rw): DMA register for burst accesses A read or write operation to the DMAR register accesses the register located at the address (TIMx_CR1 address) + (DBA + DMA index) x 4 where TIMx_CR1 address is the address of the control register 1, DBA is the DMA base address configured in TIMx_DCR register, DMA index is automatically controlled by the DMA transfer, and ranges from 0 to DBL (DBL configured in TIMx_DCR).
0x40013000 A PERIPHERAL SPI1
0x40013000 B  REGISTER CR1: SPI/I2S control register 1
0x40013000 C   FIELD 00w01 SPE (rw): serial peripheral enable This bit is set by and cleared by software. When SPE=1, SPI data transfer is enabled, SPI_CFG1 and SPI_CFG2 configuration registers, CRCPOLY, UDRDR, IOLOCK bit in the SPI_CR1 register are write protected. They can be changed only when SPE=0. When SPE=0 any SPI operation is stopped and disabled, all the pending requests of the events with enabled interrupt are blocked except the MODF interrupt request (but their pending still propagates the request of the spi_plck clock), the SS output is deactivated at master, the RDY signal keeps not ready status at slave, the internal state machine is reseted, all the FIFOs content is flushed, CRC calculation initialized, receive data register is read zero. SPE is cleared and cannot be set when MODF error flag is active.
0x40013000 C   FIELD 08w01 MASRX (rw): master automatic suspension in Receive mode This bit is set and cleared by software to control continuous SPI transfer in master receiver mode and automatic management in order to avoid overrun condition. When SPI communication is suspended by hardware automatically, it could happen that few bits of next frame are already clocked out due to internal synchronization delay. This is why, the automatic suspension is not quite reliable when size of data drops below 8 bits. In this case, a safe suspension can be achieved by combination with delay inserted between data frames applied when MIDI parameter keeps a non zero value; sum of data size and the interleaved SPI cycles should always produce interval at length of 8 SPI clock periods at minimum. After software clearing of the SUSP bit, the communication resumes and continues by subsequent bits transaction without any next constraint. Prior the SUSP bit is cleared, the user must release the RxFIFO space as much as possible by reading out all the data packets available at RxFIFO based on the RXP flag indication to prevent any subsequent suspension.
0x40013000 C   FIELD 09w01 CSTART (rw): master transfer start This bit can be set by software if SPI is enabled only to start an SPI or I2S/PCM communication. In SPI mode, it is cleared by hardware when end of transfer (EOT) flag is set or when a transaction suspend request is accepted. In I2S/PCM mode, it is also cleared by hardware as described in the . In SPI mode, the bit is taken into account at master mode only. If transmission is enabled, communication starts or continues only if any data is available in the transmission FIFO.
0x40013000 C   FIELD 10w01 CSUSP (wo): master SUSPend request This bit reads as zero. In Master mode, when this bit is set by software, the CSTART bit is reset at the end of the current frame and communication is suspended. The user has to check SUSP flag to check end of the frame transaction. The Master mode communication must be suspended (using this bit or keeping TXDR empty) before going to Low-power mode. Can be used in SPI or I2S mode. After software suspension, SUSP flag has to be cleared and SPI disabled and re-enabled before the next transaction starts.
0x40013000 C   FIELD 11w01 HDDIR (rw): Rx/Tx direction at Half-duplex mode In Half-Duplex configuration the HDDIR bit establishes the Rx/Tx direction of the data transfer. This bit is ignored in Full-Duplex or any Simplex configuration.
0x40013000 C   FIELD 12w01 SSI (rw): internal SS signal input level This bit has an effect only when the SSM bit is set. The value of this bit is forced onto the peripheral SS input internally and the I/O value of the SS pin is ignored.
0x40013000 C   FIELD 13w01 CRC33_17 (rw): 32-bit CRC polynomial configuration
0x40013000 C   FIELD 14w01 RCRCINI (rw): CRC calculation initialization pattern control for receiver
0x40013000 C   FIELD 15w01 TCRCINI (rw): CRC calculation initialization pattern control for transmitter
0x40013000 C   FIELD 16w01 IOLOCK (rw): locking the AF configuration of associated IOs This bit is set by software and cleared by hardware whenever the SPE bit is changed from 1 to 0. When this bit is set, SPI_CFG2 register content cannot be modified. This bit can be set when SPI is disabled only else it is write protected. It is cleared and cannot be set when MODF bit is set.
0x40013004 B  REGISTER CR2: SPI/I2S control register 2
0x40013004 C   FIELD 00w16 TSIZE (rw): number of data at current transfer When these bits are changed by software, the SPI has to be disabled. Endless transaction is initialized when CSTART is set while zero value is stored at TSIZE. TSIZE cannot be set to 0xFFFF respective 0x3FFF value when CRC is enabled. Note: TSIZE[15:10] bits are reserved at limited feature set instances and must be kept at reset value.
0x40013008 B  REGISTER CFG1: SPI/I2S configuration register 1
0x40013008 C   FIELD 00w05 DSIZE (rw): number of bits in at single SPI data frame ..... Note: Maximum data size can be limited up to 16-bits at some instances. At instances with limited set of features, DSIZE2:0] bits are reserved and must be kept at reset state. DSIZE[4:3] bits then control next settings of data size: 00xxx: 8-bits 01xxx: 16-bits 10xxx: 24-bits 11xxx: 32-bits.
0x40013008 C   FIELD 05w04 FTHLV (rw): FIFO threshold level Defines number of data frames at single data packet. Size of the packet should not exceed 1/2 of FIFO space.
0x40013008 C   FIELD 09w01 UDRCFG (rw): behavior of slave transmitter at underrun condition For more details see underrun condition.
0x40013008 C   FIELD 14w01 RXDMAEN (rw): Rx DMA stream enable
0x40013008 C   FIELD 15w01 TXDMAEN (rw): Tx DMA stream enable
0x40013008 C   FIELD 16w05 CRCSIZE (rw): length of CRC frame to be transacted and compared Most significant bits are taken into account from polynomial calculation when CRC result is transacted or compared. The length of the polynomial is not affected by this setting. ..... The value must be set equal or multiply of data size (DSIZE[4:0]). Its maximum size corresponds to DSIZE maximum at the instance. Note: The most significant bit at CRCSIZE bit field is reserved at the peripheral instances where data size is limited to 16-bit.
0x40013008 C   FIELD 22w01 CRCEN (rw): hardware CRC computation enable
0x40013008 C   FIELD 28w03 MBR (rw): master baud rate prescaler setting Note: MBR setting is considered at slave working at TI mode, too (see mode).
0x40013008 C   FIELD 31w01 BPASS (rw): bypass of the prescaler at master baud rate clock generator
0x4001300C B  REGISTER CFG2: SPI/I2S configuration register 2
0x4001300C C   FIELD 00w04 MSSI (rw): Master SS Idleness Specifies an extra delay, expressed in number of SPI clock cycle periods, inserted additionally between active edge of SS opening a session and the beginning of the first data frame of the session in Master mode when SSOE is enabled. ... Note: This feature is not supported in TI mode. To include the delay, the SPI must be disabled and re-enabled between sessions.
0x4001300C C   FIELD 04w04 MIDI (rw): master Inter-Data Idleness Specifies minimum time delay (expressed in SPI clock cycles periods) inserted between two consecutive data frames in Master mode. ... Note: This feature is not supported in TI mode.
0x4001300C C   FIELD 13w01 RDIOM (rw): RDY signal input/output management Note: When DSIZE at the SPI_CFG1 register is configured shorter than 8-bit, the RDIOM bit has to be kept at zero.
0x4001300C C   FIELD 14w01 RDIOP (rw): RDY signal input/output polarity
0x4001300C C   FIELD 15w01 IOSWP (rw): swap functionality of MISO and MOSI pins When this bit is set, the function of MISO and MOSI pins alternate functions are inverted. Original MISO pin becomes MOSI and original MOSI pin becomes MISO. Note: This bit can be also used in PCM and I2S modes to swap SDO and SDI pins.
0x4001300C C   FIELD 17w02 COMM (rw): SPI Communication Mode
0x4001300C C   FIELD 19w03 SP (rw): serial protocol others: reserved, must not be used
0x4001300C C   FIELD 22w01 MASTER (rw): SPI Master
0x4001300C C   FIELD 23w01 LSBFRST (rw): data frame format Note: This bit can be also used in PCM and I2S modes.
0x4001300C C   FIELD 24w01 CPHA (rw): clock phase
0x4001300C C   FIELD 25w01 CPOL (rw): clock polarity
0x4001300C C   FIELD 26w01 SSM (rw): software management of SS signal input When master uses hardware SS output (SSM=0 and SSOE=1) the SS signal input is forced to not active state internally to prevent master mode fault error.
0x4001300C C   FIELD 28w01 SSIOP (rw): SS input/output polarity
0x4001300C C   FIELD 29w01 SSOE (rw): SS output enable This bit is taken into account in Master mode only
0x4001300C C   FIELD 30w01 SSOM (rw): SS output management in Master mode This bit is taken into account in Master mode when SSOE is enabled. It allows the SS output to be configured between two consecutive data transfers.
0x4001300C C   FIELD 31w01 AFCNTR (rw): alternate function GPIOs control This bit is taken into account when SPE=0 only When SPI has to be disabled temporary for a specific configuration reason (e.g. CRC reset, CPHA or HDDIR change) setting this bit prevents any glitches on the associated outputs configured at alternate function mode by keeping them forced at state corresponding the current SPI configuration. Note: This bit can be also used in PCM and I2S modes. Note: The bit AFCNTR must not be set to 1, when the block is in slave mode.
0x40013010 B  REGISTER IER: SPI/I2S interrupt enable register
0x40013010 C   FIELD 00w01 RXPIE (rw): RXP interrupt enable
0x40013010 C   FIELD 01w01 TXPIE (rw): TXP interrupt enable TXPIE is set by software and cleared by TXTF flag set event.
0x40013010 C   FIELD 02w01 DXPIE (rw): DXP interrupt enabled DXPIE is set by software and cleared by TXTF flag set event.
0x40013010 C   FIELD 03w01 EOTIE (rw): EOT, SUSP and TXC interrupt enable
0x40013010 C   FIELD 04w01 TXTFIE (rw): TXTFIE interrupt enable
0x40013010 C   FIELD 05w01 UDRIE (rw): UDR interrupt enable
0x40013010 C   FIELD 06w01 OVRIE (rw): OVR interrupt enable
0x40013010 C   FIELD 07w01 CRCEIE (rw): CRC error interrupt enable
0x40013010 C   FIELD 08w01 TIFREIE (rw): TIFRE interrupt enable
0x40013010 C   FIELD 09w01 MODFIE (rw): mode Fault interrupt enable
0x40013014 B  REGISTER SR: SPI/I2S status register
0x40013014 C   FIELD 00w01 RXP (ro): Rx-Packet available In I2S mode, it must be interpreted as follow: RxFIFO level is lower than FTHLV In I2S mode, it must be interpreted as follow: RxFIFO level is higher or equal to FTHLV RXP flag is changed by hardware. It monitors number of overall data currently available at RxFIFO if SPI is enabled. It has to be checked once a data packet is completely read out from RxFIFO.
0x40013014 C   FIELD 01w01 TXP (ro): Tx-Packet space available In I2S mode, it must be interpreted as follow: there is less than FTHLV free locations in the TxFIFO In I2S mode, it must be interpreted as follow: there is FTHLV or more than FTHLV free locations in the TxFIFO TXP flag is changed by hardware. It monitors overall space currently available at TxFIFO no matter if SPI is enabled or not. It has to be checked once a complete data packet is stored at TxFIFO.
0x40013014 C   FIELD 02w01 DXP (ro): duplex packet DXP flag is set whenever both TXP and RXP flags are set regardless SPI mode.
0x40013014 C   FIELD 03w01 EOT (ro): end of transfer EOT is set by hardware as soon as a full transfer is complete, that is when SPI is re-enabled or when TSIZE number of data have been transmitted and/or received on the SPI. EOT is cleared when SPI is re-enabled or by writing 1 to EOTC bit of SPI_IFCR optionally. EOT flag triggers an interrupt if EOTIE bit is set. If DXP flag is used until TXTF flag is set and DXPIE is cleared, EOT can be used to download the last packets contained into RxFIFO in one-shot. In master, EOT event terminates the data transaction and handles SS output optionally. When CRC is applied, the EOT event is extended over the CRC frame transaction. To restart the internal state machine properly, SPI is strongly suggested to be disabled and re-enabled before next transaction starts despite its setting is not changed.
0x40013014 C   FIELD 04w01 TXTF (ro): transmission transfer filled TXTF is set by hardware as soon as all of the data packets in a transfer have been submitted for transmission by application software or DMA, that is when TSIZE number of data have been pushed into the TxFIFO. This bit is cleared by software write 1 to TXTFC bit of SPI_IFCR exclusively. TXTF flag triggers an interrupt if TXTFIE bit is set. TXTF setting clears the TXPIE and DXPIE masks so to off-load application software from calculating when to disable TXP and DXP interrupts.
0x40013014 C   FIELD 05w01 UDR (ro): underrun This bit is cleared when SPI is re-enabled or by writing 1 to UDRC bit of SPI_IFCR optionally. Note: In SPI mode, the UDR flag applies to Slave mode only. In I2S/PCM mode, (when available) this flag applies to Master and Slave mode
0x40013014 C   FIELD 06w01 OVR (ro): overrun This bit is cleared when SPI is re-enabled or by writing 1 to OVRC bit of SPI_IFCR optionally.
0x40013014 C   FIELD 07w01 CRCE (ro): CRC error This bit is cleared when SPI is re-enabled or by writing 1 to CRCEC bit of SPI_IFCR optionally.
0x40013014 C   FIELD 08w01 TIFRE (ro): TI frame format error This bit is cleared by writing 1 to TIFREC bit of SPI_IFCR exclusively.
0x40013014 C   FIELD 09w01 MODF (ro): mode fault This bit is cleared by writing 1 to MODFC bit of SPI_IFCR exclusively.
0x40013014 C   FIELD 11w01 SUSP (ro): suspension status In Master mode, SUSP is set by hardware either as soon as the current frame is completed after CSUSP request is done or at master automatic suspend receive mode (MASRX bit is set at SPI_CR1 register) on RxFIFO full condition. SUSP generates an interrupt when EOTIE is set. This bit has to be cleared prior SPI is disabled and this is done by writing 1 to SUSPC bit of SPI_IFCR exclusively.
0x40013014 C   FIELD 12w01 TXC (ro): TxFIFO transmission complete The flag behavior depends on TSIZE setting. When TSIZE=0 the TXC is changed by hardware exclusively and it raises each time the TxFIFO becomes empty and there is no activity on the bus. If TSIZE 0 there is no specific reason to monitor TXC as it just copies the EOT flag value including its software clearing. The TXC generates an interrupt when EOTIE is set.
0x40013014 C   FIELD 13w02 RXPLVL (ro): RxFIFO packing level When RXWNE=0 and data size is set up to 16-bit, the value gives number of remaining data frames persisting at RxFIFO. Note: (*): Optional value when data size is set up to 8-bit only. When data size is greater than 16-bit, these bits are always read as 00. In that consequence, the single data frame received at the FIFO cannot be detected neither by RWNE nor by RXPLVL bits if data size is set from 17 to 24 bits. The user then must apply other methods like TSIZE0 or FTHLV=0.
0x40013014 C   FIELD 15w01 RXWNE (ro): RxFIFO word not empty Note: This bit value does not depend on DSIZE setting and keeps together with RXPLVL[1:0] information about RxFIFO occupancy by residual data.
0x40013014 C   FIELD 16w16 CTSIZE (ro): number of data frames remaining in current TSIZE session The value is not quite reliable when traffic is ongoing on bus or during autonomous operation in low-power mode. Note: CTSIZE[15:0] bits are not available in instances with limited set of features.
0x40013018 B  REGISTER IFCR: SPI/I2S interrupt/status flags clear register
0x40013018 C   FIELD 03w01 EOTC (wo): end of transfer flag clear Writing a 1 into this bit clears EOT flag in the SPI_SR register
0x40013018 C   FIELD 04w01 TXTFC (wo): transmission transfer filled flag clear Writing a 1 into this bit clears TXTF flag in the SPI_SR register
0x40013018 C   FIELD 05w01 UDRC (wo): underrun flag clear Writing a 1 into this bit clears UDR flag in the SPI_SR register
0x40013018 C   FIELD 06w01 OVRC (wo): overrun flag clear Writing a 1 into this bit clears OVR flag in the SPI_SR register
0x40013018 C   FIELD 07w01 CRCEC (wo): CRC error flag clear Writing a 1 into this bit clears CRCE flag in the SPI_SR register
0x40013018 C   FIELD 08w01 TIFREC (wo): TI frame format error flag clear Writing a 1 into this bit clears TIFRE flag in the SPI_SR register
0x40013018 C   FIELD 09w01 MODFC (wo): mode fault flag clear Writing a 1 into this bit clears MODF flag in the SPI_SR register
0x40013018 C   FIELD 11w01 SUSPC (wo): SUSPend flag clear Writing a 1 into this bit clears SUSP flag in the SPI_SR register
0x40013020 B  REGISTER TXDR16 (wo): Direct 16-bit access to transmit data register
0x40013020 B  REGISTER TXDR8 (wo): Direct 8-bit access to transmit data register
0x40013020 B  REGISTER TXDR: SPI/I2S transmit data register
0x40013020 C   FIELD 00w08 TXDR: Transmit data register
0x40013020 C   FIELD 00w16 TXDR: Transmit data register
0x40013020 C   FIELD 00w32 TXDR (wo): transmit data register The register serves as an interface with TxFIFO. A write to it accesses TxFIFO. Note: In SPI mode, data is always right-aligned. Alignment of data at I2S mode depends on DATLEN and DATFMT setting. Unused bits are ignored when writing to the register, and read as zero when the register is read. Note: DR can be accessed byte-wise (8-bit access): in this case only one data-byte is written by single access. halfword-wise (16 bit access) in this case 2 data-bytes or 1 halfword-data can be written by single access. word-wise (32 bit access). In this case 4 data-bytes or 2 halfword-data or word-data can be written by single access. Write access of this register less than the configured data size is forbidden.
0x40013030 B  REGISTER RXDR16 (ro): Direct 16-bit access to receive data register
0x40013030 B  REGISTER RXDR8 (ro): Direct 8-bit access to receive data register
0x40013030 B  REGISTER RXDR: SPI/I2S receive data register
0x40013030 C   FIELD 00w08 RXDR: Receive data register
0x40013030 C   FIELD 00w16 RXDR: Receive data register
0x40013030 C   FIELD 00w32 RXDR (ro): receive data register The register serves as an interface with RxFIFO. When it is read, RxFIFO is accessed. Note: In SPI mode, data is always right-aligned. Alignment of data at I2S mode depends on DATLEN and DATFMT setting. Unused bits are read as zero when the register is read. Writing to the register is ignored. Note: DR can be accessed byte-wise (8-bit access): in this case only one data-byte is read by single access halfword-wise (16 bit access) in this case 2 data-bytes or 1 halfword-data can be read by single access word-wise (32 bit access). In this case 4 data-bytes or 2 halfword-data or word-data can be read by single access. Read access of this register less than the configured data size is forbidden.
0x40013040 B  REGISTER CRCPOLY: SPI/I2S polynomial register
0x40013040 C   FIELD 00w32 CRCPOLY (rw): CRC polynomial register This register contains the polynomial for the CRC calculation. The default 9-bit polynomial setting 0x107 corresponds to default 8-bit setting of DSIZE. It is compatible with setting 0x07 used at some other ST products with fixed length of the polynomial string where the most significant bit of the string is always kept hidden. Length of the polynomial is given by the most significant bit of the value stored at this register. It has to be set greater than DSIZE. CRC33_17 bit has to be set additionally with CRCPOLY register when DSIZE is configured to maximum 32-bit or 16-bit size and CRC is enabled (to keep polynomial length grater than data size). Note: CRCPOLY[31:16] bits are reserved at instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored.
0x40013044 B  REGISTER TXCRC: SPI/I2S transmitter CRC register
0x40013044 C   FIELD 00w32 TXCRC (ro): CRC register for transmitter When CRC calculation is enabled, the TXCRC[31:0] bits contain the computed CRC value of the subsequently transmitted bytes. CRC calculation is initialized when the CRCEN bit of SPI_CR1 is written to 1 or when a data block is transacted completely. The CRC is calculated serially using the polynomial programmed in the SPI_CRCPOLY register. The number of bits considered at calculation depends on SPI_CRCPOLY register and CRCSIZE bits settings at SPI_CFG1 register. Note: a read to this register when the communication is ongoing could return an incorrect value. Note: not used for the I2S mode. Note: TXCRC[31-16] bits are reserved at instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored. Note: The configuration of CRCSIZE bit field is not taken into account when the content of this register is read by software. No masking is applied for unused bits at this case.
0x40013048 B  REGISTER RXCRC: SPI/I2S receiver CRC register
0x40013048 C   FIELD 00w32 RXCRC (ro): CRC register for receiver When CRC calculation is enabled, the RXCRC[31:0] bits contain the computed CRC value of the subsequently received bytes. CRC calculation is initialized when the CRCEN bit of SPI_CR1 is written to 1 or when a data block is transacted completely. The CRC is calculated serially using the polynomial programmed in the SPI_CRCPOLY register. The number of bits considered at calculation depends on SPI_CRCPOLY register and CRCSIZE bits settings at SPI_CFG1 register. Note: a read to this register when the communication is ongoing could return an incorrect value. Not used for the I2S mode. RXCRC[31-16] bits are reserved at the peripheral instances with data size limited to 16-bit. There is no constrain when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored. Note: The configuration of CRCSIZE bit field is not taken into account when the content of this register is read by software. No masking is applied for unused bits at this case.
0x4001304C B  REGISTER UDRDR: SPI/I2S underrun data register
0x4001304C C   FIELD 00w32 UDRDR (rw): data at slave underrun condition The register is taken into account in Slave mode and at underrun condition only. The number of bits considered depends on DSIZE bit settings of the SPI_CFG1 register. Underrun condition handling depends on setting UDRCFG bit at SPI_CFG1 register. Note: UDRDR[31-16] bits are reserved at the peripheral instances with data size limited to 16-bit. There is no constraint when 32-bit access is applied at these addresses. Reserved bits 31-16 are always read zero while any write to them is ignored.
0x40013050 B  REGISTER I2SCFGR: SPI/I2S configuration register
0x40013050 C   FIELD 00w01 I2SMOD (rw): I2S mode selection
0x40013050 C   FIELD 01w03 I2SCFG (rw): I2S configuration mode others, not used
0x40013050 C   FIELD 04w02 I2SSTD (rw): I2S standard selection For more details on I2S standards, refer to
0x40013050 C   FIELD 07w01 PCMSYNC (rw): PCM frame synchronization
0x40013050 C   FIELD 08w02 DATLEN (rw): data length to be transferred
0x40013050 C   FIELD 10w01 CHLEN (rw): channel length (number of bits per audio channel)
0x40013050 C   FIELD 11w01 CKPOL (rw): serial audio clock polarity
0x40013050 C   FIELD 12w01 FIXCH (rw): fixed channel length in slave
0x40013050 C   FIELD 13w01 WSINV (rw): word select inversion This bit is used to invert the default polarity of WS signal. WS is LOW. In PCM mode the start of frame is indicated by a rising edge. WS is HIGH. In PCM mode the start of frame is indicated by a falling edge.
0x40013050 C   FIELD 14w01 DATFMT (rw): data format
0x40013050 C   FIELD 16w08 I2SDIV (rw): I2S linear prescaler I2SDIV can take any values except the value 1, when ODD is also equal to 1. Refer to for details
0x40013050 C   FIELD 24w01 ODD (rw): odd factor for the prescaler Refer to for details
0x40013050 C   FIELD 25w01 MCKOE (rw): master clock output enable
0x40013800 A PERIPHERAL USART1
0x40013800 B  REGISTER CR1: USART control register 1 [alternate]
0x40013800 C   FIELD 00w01 UE (rw): USART enable When this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit. In Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value.
0x40013800 C   FIELD 01w01 UESM (rw): USART enable in low-power mode When this bit is cleared, the USART cannot wake up the MCU from low-power mode. When this bit is set, the USART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode, and clear it when exiting low-power mode.
0x40013800 C   FIELD 02w01 RE (rw): Receiver enable This bit enables the receiver. It is set and cleared by software.
0x40013800 C   FIELD 03w01 TE (rw): Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0' followed by '1') sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1'. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.
0x40013800 C   FIELD 04w01 IDLEIE (rw): IDLE interrupt enable This bit is set and cleared by software.
0x40013800 C   FIELD 05w01 RXNEIE (rw): RXFIFO not empty interrupt enable This bit is set and cleared by software.
0x40013800 C   FIELD 06w01 TCIE (rw): Transmission complete interrupt enable This bit is set and cleared by software.
0x40013800 C   FIELD 07w01 TXEIE (rw): TXFIFO not full interrupt enable This bit is set and cleared by software.
0x40013800 C   FIELD 08w01 PEIE (rw): PE interrupt enable This bit is set and cleared by software.
0x40013800 C   FIELD 09w01 PS (rw): Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the USART is disabled (UE=0).
0x40013800 C   FIELD 10w01 PCE (rw): Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M=1; 8th bit if M=0) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the USART is disabled (UE=0).
0x40013800 C   FIELD 11w01 WAKE (rw): Receiver wakeup method This bit determines the USART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40013800 C   FIELD 12w01 M0 (rw): Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description). This bit can only be written when the USART is disabled (UE=0).
0x40013800 C   FIELD 13w01 MME (rw): Mute mode enable This bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software.
0x40013800 C   FIELD 14w01 CMIE (rw): Character match interrupt enable This bit is set and cleared by software.
0x40013800 C   FIELD 15w01 OVER8 (rw): Oversampling mode This bit can only be written when the USART is disabled (UE=0). Note: In LIN, IrDA and Smartcard modes, this bit must be kept cleared.
0x40013800 C   FIELD 16w05 DEDT (rw): Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). If the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013800 C   FIELD 21w05 DEAT (rw): Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate). This bitfield can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013800 C   FIELD 26w01 RTOIE (rw): Receiver timeout interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. .
0x40013800 C   FIELD 27w01 EOBIE (rw): End of Block interrupt enable This bit is set and cleared by software. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40013800 C   FIELD 28w01 M1 (rw): Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00': 1 start bit, 8 Data bits, n Stop bit M[1:0] = '01': 1 start bit, 9 Data bits, n Stop bit M[1:0] = '10': 1 start bit, 7 Data bits, n Stop bit This bit can only be written when the USART is disabled (UE=0). Note: In 7-bits data length mode, the Smartcard mode, LIN master mode and auto baud rate (0x7F and 0x55 frames detection) are not supported.
0x40013800 C   FIELD 29w01 FIFOEN (rw): FIFO mode enable This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0). Note: FIFO mode can be used on standard UART communication, in SPI Master/Slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes.
0x40013800 C   FIELD 30w01 TXFEIE (rw): TXFIFO empty interrupt enable This bit is set and cleared by software.
0x40013800 C   FIELD 31w01 RXFFIE (rw): RXFIFO Full interrupt enable This bit is set and cleared by software.
0x40013804 B  REGISTER CR2: USART control register 2
0x40013804 C   FIELD 00w01 SLVEN (rw): Synchronous Slave mode enable When the SLVEN bit is set, the Synchronous slave mode is enabled. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013804 C   FIELD 03w01 DIS_NSS (rw): When the DIS_NSS bit is set, the NSS pin input is ignored. Note: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013804 C   FIELD 04w01 ADDM7 (rw): 7-bit Address Detection/4-bit Address Detection This bit is for selection between 4-bit address detection or 7-bit address detection. This bit can only be written when the USART is disabled (UE=0) Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.
0x40013804 C   FIELD 05w01 LBDL (rw): LIN break detection length This bit is for selection between 11 bit or 10 bit break detection. This bit can only be written when the USART is disabled (UE=0). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013804 C   FIELD 06w01 LBDIE (rw): LIN break detection interrupt enable Break interrupt mask (break detection using break delimiter). Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013804 C   FIELD 08w01 LBCL (rw): Last bit clock pulse This bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in Synchronous mode. The last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register. This bit can only be written when the USART is disabled (UE=0). Note: If Synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013804 C   FIELD 09w01 CPHA (rw): Clock phase This bit is used to select the phase of the clock output on the SCLK pin in Synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see and ) This bit can only be written when the USART is disabled (UE=0). Note: If Synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013804 C   FIELD 10w01 CPOL (rw): Clock polarity This bit enables the user to select the polarity of the clock output on the SCLK pin in Synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship This bit can only be written when the USART is disabled (UE=0). Note: If Synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013804 C   FIELD 11w01 CLKEN (rw): Clock enable This bit enables the user to enable the SCLK pin. This bit can only be written when the USART is disabled (UE=0). Note: If neither Synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to . In Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected: UE = 0 SCEN = 1 GTPR configuration CLKEN= 1 UE = 1
0x40013804 C   FIELD 12w02 STOP (rw): stop bits These bits are used for programming the stop bits. This bitfield can only be written when the USART is disabled (UE=0).
0x40013804 C   FIELD 14w01 LINEN (rw): LIN mode enable This bit is set and cleared by software. The LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks. This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to .
0x40013804 C   FIELD 15w01 SWAP (rw): Swap TX/RX pins This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40013804 C   FIELD 16w01 RXINV (rw): RX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the RX line. This bitfield can only be written when the USART is disabled (UE=0).
0x40013804 C   FIELD 17w01 TXINV (rw): TX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the TX line. This bitfield can only be written when the USART is disabled (UE=0).
0x40013804 C   FIELD 18w01 DATAINV (rw): Binary data inversion This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40013804 C   FIELD 19w01 MSBFIRST (rw): Most significant bit first This bit is set and cleared by software. This bitfield can only be written when the USART is disabled (UE=0).
0x40013804 C   FIELD 20w01 ABREN (rw): Auto baud rate enable This bit is set and cleared by software. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .
0x40013804 C   FIELD 21w02 ABRMOD (rw): Auto baud rate mode These bits are set and cleared by software. This bitfield can only be written when ABREN = 0 or the USART is disabled (UE=0). Note: If DATAINV=1 and/or MSBFIRST=1 the patterns must be the same on the line, for example 0xAA for MSBFIRST) If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .
0x40013804 C   FIELD 23w01 RTOEN (rw): Receiver timeout enable This bit is set and cleared by software. When this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register). Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to .
0x40013804 C   FIELD 24w08 ADD (rw): Address of the USART node These bits give the address of the USART node in Mute mode or a character code to be recognized in low-power or Run mode: In Mute mode: they are used in multiprocessor communication to wakeup from Mute mode with 4-bit/7-bit address mark detection. The MSB of the character sent by the transmitter should be equal to 1. In 4-bit address mark detection, only ADD[3:0] bits are used. In low-power mode: they are used for wake up from low-power mode on character match. When WUS[1:0] is programmed to 0b00 (WUF active on address match), the wakeup from low-power mode is performed when the received character corresponds to the character programmed through ADD[6:0] or ADD[3:0] bitfield (depending on ADDM7 bit), and WUF interrupt is enabled by setting WUFIE bit. The MSB of the character sent by transmitter should be equal to 1. In Run mode with Mute mode inactive (for example, end-of-block detection in ModBus protocol): the whole received character (8 bits) is compared to ADD[7:0] value and CMF flag is set on match. An interrupt is generated if the CMIE bit is set. These bits can only be written when the reception is disabled (RE = 0) or when the USART is disabled (UE = 0).
0x40013808 B  REGISTER CR3: USART control register 3
0x40013808 C   FIELD 00w01 EIE (rw): Error interrupt enable Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FE=1 or ORE=1 or NE=1or UDR = 1 in the USART_ISR register).
0x40013808 C   FIELD 01w01 IREN (rw): IrDA mode enable This bit is set and cleared by software. This bit can only be written when the USART is disabled (UE=0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013808 C   FIELD 02w01 IRLP (rw): IrDA low-power This bit is used for selecting between normal and low-power IrDA modes This bit can only be written when the USART is disabled (UE=0). Note: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013808 C   FIELD 03w01 HDSEL (rw): Half-duplex selection Selection of Single-wire Half-duplex mode This bit can only be written when the USART is disabled (UE=0).
0x40013808 C   FIELD 04w01 NACK (rw): Smartcard NACK enable This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40013808 C   FIELD 05w01 SCEN (rw): Smartcard mode enable This bit is used for enabling Smartcard mode. This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40013808 C   FIELD 06w01 DMAR (rw): DMA enable receiver This bit is set/reset by software
0x40013808 C   FIELD 07w01 DMAT (rw): DMA enable transmitter This bit is set/reset by software
0x40013808 C   FIELD 08w01 RTSE (rw): RTS enable This bit can only be written when the USART is disabled (UE=0). Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013808 C   FIELD 09w01 CTSE (rw): CTS enable This bit can only be written when the USART is disabled (UE=0) Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013808 C   FIELD 10w01 CTSIE (rw): CTS interrupt enable Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013808 C   FIELD 11w01 ONEBIT (rw): One sample bit method enable This bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled. This bit can only be written when the USART is disabled (UE=0).
0x40013808 C   FIELD 12w01 OVRDIS (rw): Overrun Disable This bit is used to disable the receive overrun detection. the ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data are written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used. This bit can only be written when the USART is disabled (UE=0). Note: This control bit enables checking the communication flow w/o reading the data
0x40013808 C   FIELD 13w01 DDRE (rw): DMA Disable on Reception Error This bit can only be written when the USART is disabled (UE=0). Note: The reception errors are: parity error, framing error or noise error.
0x40013808 C   FIELD 14w01 DEM (rw): Driver enable mode This bit enables the user to activate the external transceiver control, through the DE signal. This bit can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. .
0x40013808 C   FIELD 15w01 DEP (rw): Driver enable polarity selection This bit can only be written when the USART is disabled (UE=0). Note: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013808 C   FIELD 17w03 SCARCNT (rw): Smartcard auto-retry count This bitfield specifies the number of retries for transmission and reception in Smartcard mode. In Transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set). In Reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set). This bitfield must be programmed only when the USART is disabled (UE=0). When the USART is enabled (UE=1), this bitfield may only be written to 0x0, in order to stop retransmission. Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013808 C   FIELD 20w02 WUS: Wakeup from low-power mode interrupt flag selection This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag). This bitfield can only be written when the USART is disabled (UE=0). Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40013808 C   FIELD 22w01 WUFIE (rw): Wakeup from low-power mode interrupt enable This bit is set and cleared by software. Note: WUFIE must be set before entering in low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40013808 C   FIELD 23w01 TXFTIE (rw): TXFIFO threshold interrupt enable This bit is set and cleared by software.
0x40013808 C   FIELD 24w01 TCBGTIE (rw): Transmission Complete before guard time, interrupt enable This bit is set and cleared by software. Note: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40013808 C   FIELD 25w03 RXFTCFG (rw): Receive FIFO threshold configuration Remaining combinations: Reserved
0x40013808 C   FIELD 28w01 RXFTIE (rw): RXFIFO threshold interrupt enable This bit is set and cleared by software.
0x40013808 C   FIELD 29w03 TXFTCFG (rw): TXFIFO threshold configuration Remaining combinations: Reserved
0x4001380C B  REGISTER BRR: USART baud rate register
0x4001380C C   FIELD 00w16 BRR (rw): USART baud rate BRR[15:4] BRR[15:4] correspond to USARTDIV[15:4] BRR[3:0] When OVER8 = 0, BRR[3:0] = USARTDIV[3:0]. When OVER8 = 1: BRR[2:0] = USARTDIV[3:0] shifted 1 bit to the right. BRR[3] must be kept cleared.
0x40013810 B  REGISTER GTPR: USART guard time and prescaler register
0x40013810 C   FIELD 00w08 PSC (rw): Prescaler value PSC[7:0] = IrDA Normal and Low-power baud rate This bitfield is used for programming the prescaler for dividing the USART source clock to achieve the low-power frequency: The source clock is divided by the value given in the register (8 significant bits): ... PSC[4:0]: Prescaler value This bitfield is used for programming the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency: ... This bitfield can only be written when the USART is disabled (UE=0). Note: Bits [7:5] must be kept cleared if Smartcard mode is used. This bitfield is reserved and forced by hardware to '0' when the Smartcard and IrDA modes are not supported. Refer to .
0x40013810 C   FIELD 08w08 GT (rw): Guard time value This bitfield is used to program the Guard time value in terms of number of baud clock periods. This is used in Smartcard mode. The Transmission Complete flag is set after this guard time value. This bitfield can only be written when the USART is disabled (UE=0). Note: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013814 B  REGISTER RTOR: USART receiver timeout register
0x40013814 C   FIELD 00w24 RTO (rw): Receiver timeout value This bitfield gives the Receiver timeout value in terms of number of bit duration. In Standard mode, the RTOF flag is set if, after the last received character, no new start bit is detected for more than the RTO value. In Smartcard mode, this value is used to implement the CWT and BWT. See Smartcard chapter for more details. In the standard, the CWT/BWT measurement is done starting from the start bit of the last received character. Note: This value must only be programmed once per received character.
0x40013814 C   FIELD 24w08 BLEN (rw): Block Length This bitfield gives the Block length in Smartcard T=1 Reception. Its value equals the number of information characters + the length of the Epilogue Field (1-LEC/2-CRC) - 1. Examples: BLEN = 0 - 0 information characters + LEC BLEN = 1 - 0 information characters + CRC BLEN = 255 - 254 information characters + CRC (total 256 characters)) In Smartcard mode, the Block length counter is reset when TXE=0 (TXFE = 0 in case FIFO mode is enabled). This bitfield can be used also in other modes. In this case, the Block length counter is reset when RE=0 (receiver disabled) and/or when the EOBCF bit is written to 1. Note: This value can be programmed after the start of the block reception (using the data from the LEN character in the Prologue Field). It must be programmed only once per received block.
0x40013818 B  REGISTER RQR: USART request register
0x40013818 C   FIELD 00w01 ABRRQ (wo): auto baud rate request Writing 1 to this bit resets the ABRF and ABRE flags in the USART_ISR and requests an automatic baud rate measurement on the next received data frame. Note: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .
0x40013818 C   FIELD 01w01 SBKRQ (wo): Send break request Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available. Note: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit.
0x40013818 C   FIELD 02w01 MMRQ (wo): Mute mode request Writing 1 to this bit puts the USART in Mute mode and resets the RWU flag.
0x40013818 C   FIELD 03w01 RXFRQ (wo): Receive data flush request Writing 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE. This enables to discard the received data without reading them, and avoid an overrun condition.
0x40013818 C   FIELD 04w01 TXFRQ (wo): Transmit data flush request When FIFO mode is disabled, writing '1' to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. When FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes. Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register.
0x4001381C B  REGISTER ISR: USART interrupt and status register
0x4001381C C   FIELD 00w01 PE (ro): Parity error This bit is set by hardware when a parity error occurs in Reception mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register. An interrupt is generated if PEIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.
0x4001381C C   FIELD 01w01 FE (ro): Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE = 1 in the USART_CR1 register. Note: This error is associated with the character in the USART_RDR.
0x4001381C C   FIELD 02w01 NE (ro): Noise detection flag This bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NFCF bit in the USART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. When the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page 2317). This error is associated with the character in the USART_RDR.
0x4001381C C   FIELD 03w01 ORE (ro): Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register. An interrupt is generated if RXFNEIE=1 or EIE = 1 in the USART_CR1 register. Note: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register.
0x4001381C C   FIELD 04w01 IDLE (ro): Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE=1 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register. Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME=1), IDLE is set if the USART is not mute (RWU=0), whatever the Mute mode selected by the WAKE bit. If RWU=1, IDLE is not set.
0x4001381C C   FIELD 05w01 RXFNE (ro): RXFIFO not empty RXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO. RXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register. An interrupt is generated if RXFNEIE=1 in the USART_CR1 register.
0x4001381C C   FIELD 06w01 TC (ro): Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. The TC flag behaves as follows: When TDN = 0, the TC flag is set when the transmission of a frame containing data is complete and when TXE/TXFE is set. When TDN is equal to the number of data in the TXFIFO, the TC flag is set when TXFIFO is empty and TDN is reached. When TDN is greater than the number of data in the TXFIFO, TC remains cleared until the TXFIFO is filled again to reach the programmed number of data to be transferred. When TDN is less than the number of data in the TXFIFO, TC is set when TDN is reached even if the TXFIFO is not empty. An interrupt is generated if TCIE=1 in the USART_CR1 register. TC bit is cleared by software by writing 1 to the TCCF in the USART_ICR register or by writing to the USART_TDR register.
0x4001381C C   FIELD 07w01 TXFNF (ro): TXFIFO not full TXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR. An interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register. Note: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE is set at the same time). This bit is used during single buffer transmission.
0x4001381C C   FIELD 08w01 LBDF (ro): LIN break detection flag This bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR. An interrupt is generated if LBDIE = 1 in the USART_CR2 register. Note: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to .
0x4001381C C   FIELD 09w01 CTSIF (ro): CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register. An interrupt is generated if CTSIE=1 in the USART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.
0x4001381C C   FIELD 10w01 CTS (ro): CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.
0x4001381C C   FIELD 11w01 RTOF (ro): Receiver timeout This bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register. An interrupt is generated if RTOIE=1 in the USART_CR2 register. In Smartcard mode, the timeout corresponds to the CWT or BWT timings. Note: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set. The counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set. If the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value.
0x4001381C C   FIELD 12w01 EOBF (ro): End of block flag This bit is set by hardware when a complete block has been received (for example T=1 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4. An interrupt is generated if EOBIE = 1 in the USART_CR1 register. It is cleared by software, writing 1 to EOBCF in the USART_ICR register. Note: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to .
0x4001381C C   FIELD 13w01 UDR (ro): SPI slave underrun error flag In Slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register. Note: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to .
0x4001381C C   FIELD 14w01 ABRE (ro): Auto baud rate error This bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed) It is cleared by software, by writing 1 to the ABRRQ bit in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.
0x4001381C C   FIELD 15w01 ABRF (ro): Auto baud rate flag This bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABRE=1) (ABRE, RXFNE and FE are also set in this case) It is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register. Note: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value.
0x4001381C C   FIELD 16w01 BUSY (ro): Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).
0x4001381C C   FIELD 17w01 CMF (ro): Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register. An interrupt is generated if CMIE=1in the USART_CR1 register.
0x4001381C C   FIELD 18w01 SBKF (ro): Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.
0x4001381C C   FIELD 19w01 RWU (ro): Receiver wakeup from Mute mode This bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .
0x4001381C C   FIELD 20w01 WUF (ro): Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register. An interrupt is generated if WUFIE=1 in the USART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .
0x4001381C C   FIELD 21w01 TEACK (ro): Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART. It can be used when an idle frame request is generated by writing TE=0, followed by TE=1 in the USART_CR1 register, in order to respect the TE=0 minimum period.
0x4001381C C   FIELD 22w01 REACK (ro): Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART. It can be used to verify that the USART is ready for reception before entering low-power mode. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .
0x4001381C C   FIELD 23w01 TXFE (ro): TXFIFO Empty This bit is set by hardware when TXFIFO is Empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register. An interrupt is generated if the TXFEIE bit =1 (bit 30) in the USART_CR1 register.
0x4001381C C   FIELD 24w01 RXFF (ro): RXFIFO Full This bit is set by hardware when the number of received data corresponds to RXFIFO size + 1 (RXFIFO full + 1 data in the USART_RDR register. An interrupt is generated if the RXFFIE bit =1 in the USART_CR1 register.
0x4001381C C   FIELD 25w01 TCBGT (ro): Transmission complete before guard time flag This bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register. It is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE=1 in the USART_CR3 register. This bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register. Note: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1'. Refer to on page 2297.
0x4001381C C   FIELD 26w01 RXFT (ro): RXFIFO threshold flag This bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit =1 (bit 27) in the USART_CR3 register. Note: When the RXFTCFG threshold is configured to '101', RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data.
0x4001381C C   FIELD 27w01 TXFT (ro): TXFIFO threshold flag This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit =1 (bit 31) in the USART_CR3 register.
0x40013820 B  REGISTER ICR: USART interrupt flag clear register
0x40013820 C   FIELD 00w01 PECF (wo): Parity error clear flag Writing 1 to this bit clears the PE flag in the USART_ISR register.
0x40013820 C   FIELD 01w01 FECF (wo): Framing error clear flag Writing 1 to this bit clears the FE flag in the USART_ISR register.
0x40013820 C   FIELD 02w01 NECF (wo): Noise detected clear flag Writing 1 to this bit clears the NE flag in the USART_ISR register.
0x40013820 C   FIELD 03w01 ORECF (wo): Overrun error clear flag Writing 1 to this bit clears the ORE flag in the USART_ISR register.
0x40013820 C   FIELD 04w01 IDLECF (wo): Idle line detected clear flag Writing 1 to this bit clears the IDLE flag in the USART_ISR register.
0x40013820 C   FIELD 05w01 TXFECF (wo): TXFIFO empty clear flag Writing 1 to this bit clears the TXFE flag in the USART_ISR register.
0x40013820 C   FIELD 06w01 TCCF (wo): Transmission complete clear flag Writing 1 to this bit clears the TC flag in the USART_ISR register.
0x40013820 C   FIELD 07w01 TCBGTCF (wo): Transmission complete before Guard time clear flag Writing 1 to this bit clears the TCBGT flag in the USART_ISR register.
0x40013820 C   FIELD 08w01 LBDCF (wo): LIN break detection clear flag Writing 1 to this bit clears the LBDF flag in the USART_ISR register. Note: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013820 C   FIELD 09w01 CTSCF (wo): CTS clear flag Writing 1 to this bit clears the CTSIF flag in the USART_ISR register. Note: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to .
0x40013820 C   FIELD 11w01 RTOCF (wo): Receiver timeout clear flag Writing 1 to this bit clears the RTOF flag in the USART_ISR register. Note: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40013820 C   FIELD 12w01 EOBCF (wo): End of block clear flag Writing 1 to this bit clears the EOBF flag in the USART_ISR register. Note: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to .
0x40013820 C   FIELD 13w01 UDRCF (wo): SPI slave underrun clear flag Writing 1 to this bit clears the UDRF flag in the USART_ISR register. Note: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to
0x40013820 C   FIELD 17w01 CMCF (wo): Character match clear flag Writing 1 to this bit clears the CMF flag in the USART_ISR register.
0x40013820 C   FIELD 20w01 WUCF (wo): Wakeup from low-power mode clear flag Writing 1 to this bit clears the WUF flag in the USART_ISR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2297.
0x40013824 B  REGISTER RDR: USART receive data register
0x40013824 C   FIELD 00w09 RDR (ro): Receive data value Contains the received data character. The RDR register provides the parallel interface between the input shift register and the internal bus (see ). When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
0x40013828 B  REGISTER TDR: USART transmit data register
0x40013828 C   FIELD 00w09 TDR (rw): Transmit data value Contains the data character to be transmitted. The USART_TDR register provides the parallel interface between the internal bus and the output shift register (see ). When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register), the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect because it is replaced by the parity. Note: This register must be written only when TXE/TXFNF=1.
0x4001382C B  REGISTER PRESC: USART prescaler register
0x4001382C C   FIELD 00w04 PRESCALER (rw): Clock prescaler The USART input clock can be divided by a prescaler factor: Remaining combinations: Reserved Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is equal to '1011' i.e. input clock divided by 256.
0x40016000 A PERIPHERAL USB
0x40016000 B  REGISTER CHEP0R: USB endpoint/channel 0 register
0x40016000 C   FIELD 00w04 EA (rw): endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction.
0x40016000 C   FIELD 04w02 STATTX (wo): Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX = 1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be 'VALID' or 'DISABLED'. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL' or 'NAK' for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions ('Host mode' descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.
0x40016000 C   FIELD 06w01 DTOGTX (wo): Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1.
0x40016000 C   FIELD 07w01 VTTX (rw): Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions.
0x40016000 C   FIELD 08w01 EPKIND (rw): endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL' instead of 'ACK'. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required.
0x40016000 C   FIELD 09w02 UTYPE (rw): USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode
0x40016000 C   FIELD 11w01 SETUP (ro): Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated.
0x40016000 C   FIELD 12w02 STATRX (wo): Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page 2492. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX = 1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only 'VALID' or 'DISABLED', so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL' or 'NAK' for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.
0x40016000 C   FIELD 14w01 DTOGRX (wo): Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1.
0x40016000 C   FIELD 15w01 VTRX (rw): USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect.
0x40016000 C   FIELD 16w07 DEVADDR (rw): Host mode Device address assigned to the endpoint during the enumeration process.
0x40016000 C   FIELD 23w01 NAK (rw): Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device.
0x40016000 C   FIELD 24w01 LS_EP (rw): Low speed endpoint host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.
0x40016000 C   FIELD 25w01 ERR_TX (rw): Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016000 C   FIELD 26w01 ERR_RX (rw): Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016000 C   FIELD 27w02 THREE_ERR_TX (rw): Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016000 C   FIELD 29w02 THREE_ERR_RX (rw): Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016004 B  REGISTER CHEP1R: USB endpoint/channel 1 register
0x40016004 C   FIELD 00w04 EA (rw): endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction.
0x40016004 C   FIELD 04w02 STATTX (wo): Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX = 1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be 'VALID' or 'DISABLED'. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL' or 'NAK' for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions ('Host mode' descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.
0x40016004 C   FIELD 06w01 DTOGTX (wo): Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1.
0x40016004 C   FIELD 07w01 VTTX (rw): Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions.
0x40016004 C   FIELD 08w01 EPKIND (rw): endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL' instead of 'ACK'. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required.
0x40016004 C   FIELD 09w02 UTYPE (rw): USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode
0x40016004 C   FIELD 11w01 SETUP (ro): Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated.
0x40016004 C   FIELD 12w02 STATRX (wo): Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page 2492. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX = 1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only 'VALID' or 'DISABLED', so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL' or 'NAK' for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.
0x40016004 C   FIELD 14w01 DTOGRX (wo): Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1.
0x40016004 C   FIELD 15w01 VTRX (rw): USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect.
0x40016004 C   FIELD 16w07 DEVADDR (rw): Host mode Device address assigned to the endpoint during the enumeration process.
0x40016004 C   FIELD 23w01 NAK (rw): Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device.
0x40016004 C   FIELD 24w01 LS_EP (rw): Low speed endpoint host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.
0x40016004 C   FIELD 25w01 ERR_TX (rw): Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016004 C   FIELD 26w01 ERR_RX (rw): Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016004 C   FIELD 27w02 THREE_ERR_TX (rw): Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016004 C   FIELD 29w02 THREE_ERR_RX (rw): Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016008 B  REGISTER CHEP2R: USB endpoint/channel 2 register
0x40016008 C   FIELD 00w04 EA (rw): endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction.
0x40016008 C   FIELD 04w02 STATTX (wo): Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX = 1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be 'VALID' or 'DISABLED'. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL' or 'NAK' for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions ('Host mode' descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.
0x40016008 C   FIELD 06w01 DTOGTX (wo): Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1.
0x40016008 C   FIELD 07w01 VTTX (rw): Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions.
0x40016008 C   FIELD 08w01 EPKIND (rw): endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL' instead of 'ACK'. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required.
0x40016008 C   FIELD 09w02 UTYPE (rw): USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode
0x40016008 C   FIELD 11w01 SETUP (ro): Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated.
0x40016008 C   FIELD 12w02 STATRX (wo): Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page 2492. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX = 1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only 'VALID' or 'DISABLED', so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL' or 'NAK' for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.
0x40016008 C   FIELD 14w01 DTOGRX (wo): Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1.
0x40016008 C   FIELD 15w01 VTRX (rw): USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect.
0x40016008 C   FIELD 16w07 DEVADDR (rw): Host mode Device address assigned to the endpoint during the enumeration process.
0x40016008 C   FIELD 23w01 NAK (rw): Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device.
0x40016008 C   FIELD 24w01 LS_EP (rw): Low speed endpoint host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.
0x40016008 C   FIELD 25w01 ERR_TX (rw): Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016008 C   FIELD 26w01 ERR_RX (rw): Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016008 C   FIELD 27w02 THREE_ERR_TX (rw): Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016008 C   FIELD 29w02 THREE_ERR_RX (rw): Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x4001600C B  REGISTER CHEP3R: USB endpoint/channel 3 register
0x4001600C C   FIELD 00w04 EA (rw): endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction.
0x4001600C C   FIELD 04w02 STATTX (wo): Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX = 1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be 'VALID' or 'DISABLED'. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL' or 'NAK' for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions ('Host mode' descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.
0x4001600C C   FIELD 06w01 DTOGTX (wo): Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1.
0x4001600C C   FIELD 07w01 VTTX (rw): Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions.
0x4001600C C   FIELD 08w01 EPKIND (rw): endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL' instead of 'ACK'. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required.
0x4001600C C   FIELD 09w02 UTYPE (rw): USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode
0x4001600C C   FIELD 11w01 SETUP (ro): Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated.
0x4001600C C   FIELD 12w02 STATRX (wo): Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page 2492. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX = 1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only 'VALID' or 'DISABLED', so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL' or 'NAK' for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.
0x4001600C C   FIELD 14w01 DTOGRX (wo): Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1.
0x4001600C C   FIELD 15w01 VTRX (rw): USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect.
0x4001600C C   FIELD 16w07 DEVADDR (rw): Host mode Device address assigned to the endpoint during the enumeration process.
0x4001600C C   FIELD 23w01 NAK (rw): Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device.
0x4001600C C   FIELD 24w01 LS_EP (rw): Low speed endpoint host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.
0x4001600C C   FIELD 25w01 ERR_TX (rw): Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x4001600C C   FIELD 26w01 ERR_RX (rw): Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x4001600C C   FIELD 27w02 THREE_ERR_TX (rw): Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x4001600C C   FIELD 29w02 THREE_ERR_RX (rw): Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016010 B  REGISTER CHEP4R: USB endpoint/channel 4 register
0x40016010 C   FIELD 00w04 EA (rw): endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction.
0x40016010 C   FIELD 04w02 STATTX (wo): Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX = 1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be 'VALID' or 'DISABLED'. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL' or 'NAK' for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions ('Host mode' descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.
0x40016010 C   FIELD 06w01 DTOGTX (wo): Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1.
0x40016010 C   FIELD 07w01 VTTX (rw): Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions.
0x40016010 C   FIELD 08w01 EPKIND (rw): endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL' instead of 'ACK'. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required.
0x40016010 C   FIELD 09w02 UTYPE (rw): USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode
0x40016010 C   FIELD 11w01 SETUP (ro): Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated.
0x40016010 C   FIELD 12w02 STATRX (wo): Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page 2492. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX = 1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only 'VALID' or 'DISABLED', so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL' or 'NAK' for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.
0x40016010 C   FIELD 14w01 DTOGRX (wo): Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1.
0x40016010 C   FIELD 15w01 VTRX (rw): USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect.
0x40016010 C   FIELD 16w07 DEVADDR (rw): Host mode Device address assigned to the endpoint during the enumeration process.
0x40016010 C   FIELD 23w01 NAK (rw): Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device.
0x40016010 C   FIELD 24w01 LS_EP (rw): Low speed endpoint host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.
0x40016010 C   FIELD 25w01 ERR_TX (rw): Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016010 C   FIELD 26w01 ERR_RX (rw): Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016010 C   FIELD 27w02 THREE_ERR_TX (rw): Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016010 C   FIELD 29w02 THREE_ERR_RX (rw): Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016014 B  REGISTER CHEP5R: USB endpoint/channel 5 register
0x40016014 C   FIELD 00w04 EA (rw): endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction.
0x40016014 C   FIELD 04w02 STATTX (wo): Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX = 1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be 'VALID' or 'DISABLED'. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL' or 'NAK' for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions ('Host mode' descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.
0x40016014 C   FIELD 06w01 DTOGTX (wo): Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1.
0x40016014 C   FIELD 07w01 VTTX (rw): Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions.
0x40016014 C   FIELD 08w01 EPKIND (rw): endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL' instead of 'ACK'. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required.
0x40016014 C   FIELD 09w02 UTYPE (rw): USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode
0x40016014 C   FIELD 11w01 SETUP (ro): Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated.
0x40016014 C   FIELD 12w02 STATRX (wo): Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page 2492. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX = 1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only 'VALID' or 'DISABLED', so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL' or 'NAK' for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.
0x40016014 C   FIELD 14w01 DTOGRX (wo): Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1.
0x40016014 C   FIELD 15w01 VTRX (rw): USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect.
0x40016014 C   FIELD 16w07 DEVADDR (rw): Host mode Device address assigned to the endpoint during the enumeration process.
0x40016014 C   FIELD 23w01 NAK (rw): Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device.
0x40016014 C   FIELD 24w01 LS_EP (rw): Low speed endpoint host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.
0x40016014 C   FIELD 25w01 ERR_TX (rw): Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016014 C   FIELD 26w01 ERR_RX (rw): Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016014 C   FIELD 27w02 THREE_ERR_TX (rw): Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016014 C   FIELD 29w02 THREE_ERR_RX (rw): Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016018 B  REGISTER CHEP6R: USB endpoint/channel 6 register
0x40016018 C   FIELD 00w04 EA (rw): endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction.
0x40016018 C   FIELD 04w02 STATTX (wo): Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX = 1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be 'VALID' or 'DISABLED'. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL' or 'NAK' for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions ('Host mode' descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.
0x40016018 C   FIELD 06w01 DTOGTX (wo): Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1.
0x40016018 C   FIELD 07w01 VTTX (rw): Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions.
0x40016018 C   FIELD 08w01 EPKIND (rw): endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL' instead of 'ACK'. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required.
0x40016018 C   FIELD 09w02 UTYPE (rw): USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode
0x40016018 C   FIELD 11w01 SETUP (ro): Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated.
0x40016018 C   FIELD 12w02 STATRX (wo): Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page 2492. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX = 1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only 'VALID' or 'DISABLED', so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL' or 'NAK' for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.
0x40016018 C   FIELD 14w01 DTOGRX (wo): Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1.
0x40016018 C   FIELD 15w01 VTRX (rw): USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect.
0x40016018 C   FIELD 16w07 DEVADDR (rw): Host mode Device address assigned to the endpoint during the enumeration process.
0x40016018 C   FIELD 23w01 NAK (rw): Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device.
0x40016018 C   FIELD 24w01 LS_EP (rw): Low speed endpoint host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.
0x40016018 C   FIELD 25w01 ERR_TX (rw): Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016018 C   FIELD 26w01 ERR_RX (rw): Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x40016018 C   FIELD 27w02 THREE_ERR_TX (rw): Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016018 C   FIELD 29w02 THREE_ERR_RX (rw): Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x4001601C B  REGISTER CHEP7R: USB endpoint/channel 7 register
0x4001601C C   FIELD 00w04 EA (rw): endpoint/channel address Device mode Software must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint. Host mode Software must write in this field the 4-bit address used to identify the channel addressed by the host transaction.
0x4001601C C   FIELD 04w02 STATTX (wo): Status bits, for transmission transfers Device mode These bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX = 1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted. Double-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can only be 'VALID' or 'DISABLED'. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL' or 'NAK' for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode The STATTX bits contain the information about the channel status. Refer to for the full descriptions ('Host mode' descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.
0x4001601C C   FIELD 06w01 DTOGTX (wo): Data toggle, for transmission transfers If the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint. If the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode) If the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1.
0x4001601C C   FIELD 07w01 VTTX (rw): Valid USB transaction transmitted Device mode This bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written. Host mode Same as VTRX behavior but for USB OUT and SETUP transactions.
0x4001601C C   FIELD 08w01 EPKIND (rw): endpoint/channel kind The meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. summarizes the different meanings. DBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode. STATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL' instead of 'ACK'. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required.
0x4001601C C   FIELD 09w02 UTYPE (rw): USB type of transaction These bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one. Bulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit. The usage of isochronous channels/endpoints is explained in transfers in Device mode
0x4001601C C   FIELD 11w01 SETUP (ro): Setup transaction completed Device mode This bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only. Host mode This bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated.
0x4001601C C   FIELD 12w02 STATRX (wo): Status bits, for reception transfers Device mode These bits contain information about the endpoint status, which are listed in Reception status encoding on page 2492. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX = 1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction. Double-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode). If the endpoint is defined as isochronous, its status can be only 'VALID' or 'DISABLED', so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL' or 'NAK' for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1. Host mode These bits are the host application controls to start, retry, or abort host transactions driven by the channel. These bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states: - DISABLE DISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated. - VALID A host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction. VALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled. - NAK NAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE - STALL STALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.
0x4001601C C   FIELD 14w01 DTOGRX (wo): Data Toggle, for reception transfers If the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0 = DATA0, 1 = DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host). If the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode). If the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers. This bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1.
0x4001601C C   FIELD 15w01 VTRX (rw): USB valid transaction received Device mode This bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. A transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches. This bit is read/write but only 0 can be written, writing 1 has no effect. Host mode This bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. - A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID. - A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate. - A transaction ended with ACK handshake sets this bit If double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register. If double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register. - A transaction ended with error sets this bit. Errors can be seen via the bits ERR_RX (host mode only). This bit is read/write but only 0 can be written, writing 1 has no effect.
0x4001601C C   FIELD 16w07 DEVADDR (rw): Host mode Device address assigned to the endpoint during the enumeration process.
0x4001601C C   FIELD 23w01 NAK (rw): Host mode This bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device.
0x4001601C C   FIELD 24w01 LS_EP (rw): Low speed endpoint host with HUB only Host mode This bit is set by the software to send an LS transaction to the corresponding endpoint.
0x4001601C C   FIELD 25w01 ERR_TX (rw): Received error for an OUT/SETUP transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x4001601C C   FIELD 26w01 ERR_RX (rw): Received error for an IN transaction Host mode This bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated.
0x4001601C C   FIELD 27w02 THREE_ERR_TX (rw): Three errors for an OUT or SETUP transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x4001601C C   FIELD 29w02 THREE_ERR_RX (rw): Three errors for an IN transaction Host mode This bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit. Coding of the received error:
0x40016040 B  REGISTER CNTR: 
0x40016040 C   FIELD 00w01 USBRST (rw): USB Reset Software can set this bit to reset the USB core, exactly as it happens when receiving a RESET signaling on the USB.The USB peripheral, in response to a RESET, resets its internal protocol state machine. Reception and transmission are disabled until the RST_DCON bit is cleared. All configuration registers do not reset: the microcontroller must explicitly clear these registers (this is to ensure that the RST_DCON interrupt can be safely delivered, and any transaction immediately followed by a RESET can be completed). The function address and endpoint registers are reset by an USB reset event. Software sets this bit to drive USB reset state on the bus and initialize the device. USB reset terminates as soon as this bit is cleared by software.
0x40016040 C   FIELD 01w01 PDWN (rw): Power down This bit is used to completely switch off all USB-related analog parts if it is required to completely disable the USB peripheral for any reason. When this bit is set, the USB peripheral is disconnected from the transceivers and it cannot be used.
0x40016040 C   FIELD 02w01 SUSPRDY (ro): Suspend state effective This bit is set by hardware as soon as the suspend state entered through the SUSPEN control gets internally effective. In this state USB activity is suspended, USB clock is gated, transceiver is set in low power mode by disabling the differential receiver. Only asynchronous wakeup logic and single ended receiver is kept alive to detect remote wakeup or resume events. Software must poll this bit to confirm it to be set before any STOP mode entry. This bit is cleared by hardware simultaneously to the WAKEUP flag being set.
0x40016040 C   FIELD 03w01 SUSPEN (rw): Suspend state enable Software can set this bit when the SUSP interrupt is received, which is issued when no traffic is received by the USB peripheral for 3 ms. Software can also set this bit when the L1REQ interrupt is received with positive acknowledge sent. As soon as the suspend state is propagated internally all device activity is stopped, USB clock is gated, USB transceiver is set into low power mode and the SUSPRDY bit is set by hardware. In the case that device application wants to pursue more aggressive power saving by stopping the USB clock source and by moving the microcontroller to stop mode, as in the case of bus powered device application, it must first wait few cycles to see the SUSPRDY = 1 acknowledge the suspend request. This bit is cleared by hardware simultaneous with the WAKEUP flag set. Software can set this bit when host application has nothing scheduled for the next frames and wants to enter long term power saving. When set, it stops immediately SOF generation and any other host activity, gates the USB clock and sets the transceiver in low power mode. If any USB transaction is on-going at the time SUSPEN is set, suspend is entered at the end of the current transaction. As soon as suspend state is propagated internally and gets effective the SUSPRDY bit is set. In the case that host application wants to pursue more aggressive power saving by stopping the USB clock source and by moving the micro-controller to STOP mode, it must first wait few cycles to see SUSPRDY=1 acknowledge to the suspend request. This bit is cleared by hardware simultaneous with the WAKEUP flag set.
0x40016040 C   FIELD 04w01 L2RES (rw): L2 remote wakeup / resume driver Device mode The microcontroller can set this bit to send remote wake-up signaling to the host. It must be activated, according to USB specifications, for no less than 1 ms and no more than 15 ms after which the host PC is ready to drive the resume sequence up to its end. Host mode Software sets this bit to send resume signaling to the device. Software clears this bit to send end of resume to device and restart SOF generation. In the context of remote wake up, this bit is to be set following the WAKEUP interrupt.
0x40016040 C   FIELD 05w01 L1RES (rw): L1 remote wakeup / resume driver Device mode Software sets this bit to send a LPM L1 50 us remote wakeup signaling to the host. After the signaling ends, this bit is cleared by hardware.
0x40016040 C   FIELD 07w01 L1REQM (rw): LPM L1 state request interrupt mask
0x40016040 C   FIELD 08w01 ESOFM (rw): Expected start of frame interrupt mask
0x40016040 C   FIELD 09w01 SOFM (rw): Start of frame interrupt mask
0x40016040 C   FIELD 10w01 RST_DCONM (rw): USB reset request (Device mode) or device connect/disconnect (Host mode) interrupt mask
0x40016040 C   FIELD 11w01 SUSPM (rw): Suspend mode interrupt mask
0x40016040 C   FIELD 12w01 WKUPM (rw): Wakeup interrupt mask
0x40016040 C   FIELD 13w01 ERRM (rw): Error interrupt mask
0x40016040 C   FIELD 14w01 PMAOVRM (rw): Packet memory area over / underrun interrupt mask
0x40016040 C   FIELD 15w01 CTRM (rw): Correct transfer interrupt mask
0x40016040 C   FIELD 16w01 THR512M (rw): 512 byte threshold interrupt mask
0x40016040 C   FIELD 17w01 DDISCM (rw): Device disconnection mask Host mode
0x40016040 C   FIELD 31w01 HOST (rw): HOST mode HOST bit selects betweens host or device USB mode of operation. It must be set before enabling the USB peripheral by the function enable bit.
0x40016044 B  REGISTER ISTR: USB interrupt status register
0x40016044 C   FIELD 00w04 IDN (ro): Device Endpoint / host channel identification number These bits are written by the hardware according to the host channel or device endpoint number, which generated the interrupt request. If several endpoint/channel transactions are pending, the hardware writes the identification number related to the endpoint/channel having the highest priority defined in the following way: two levels are defined, in order of priority: isochronous and double-buffered bulk channels/endpoints are considered first and then the others are examined. If more than one endpoint/channel from the same set is requesting an interrupt, the IDN bits in USB_ISTR register are assigned according to the lowest requesting register, CHEP0R having the highest priority followed by CHEP1R and so on. The application software can assign a register to each endpoint/channel according to this priority scheme, so as to order the concurring endpoint/channel requests in a suitable way. These bits are read only.
0x40016044 C   FIELD 04w01 DIR (ro): Direction of transaction This bit is written by the hardware according to the direction of the successful transaction, which generated the interrupt request. If DIR bit = 0, VTTX bit is set in the USB_CHEPnR register related to the interrupting endpoint. The interrupting transaction is of IN type (data transmitted by the USB peripheral to the host PC). If DIR bit = 1, VTRX bit or both VTTX/VTRX are set in the USB_CHEPnR register related to the interrupting endpoint. The interrupting transaction is of OUT type (data received by the USB peripheral from the host PC) or two pending transactions are waiting to be processed. This information can be used by the application software to access the USB_CHEPnR bits related to the triggering transaction since it represents the direction having the interrupt pending. This bit is read-only.
0x40016044 C   FIELD 07w01 L1REQ (rw): LPM L1 state request Device mode This bit is set by the hardware when LPM command to enter the L1 state is successfully received and acknowledged. This bit is read/write but only 0 can be written and writing 1 has no effect.
0x40016044 C   FIELD 08w01 ESOF (rw): Expected start of frame Device mode This bit is set by the hardware when an SOF packet is expected but not received. The host sends an SOF packet each 1 ms, but if the device does not receive it properly, the suspend timer issues this interrupt. If three consecutive ESOF interrupts are generated (for example three SOF packets are lost) without any traffic occurring in between, a SUSP interrupt is generated. This bit is set even when the missing SOF packets occur while the suspend timer is not yet locked. This bit is read/write but only 0 can be written and writing 1 has no effect.
0x40016044 C   FIELD 09w01 SOF (rw): Start of frame This bit signals the beginning of a new USB frame and it is set when a SOF packet arrives through the USB bus. The interrupt service routine may monitor the SOF events to have a 1 ms synchronization event to the USB host and to safely read the USB_FNR register which is updated at the SOF packet reception (this could be useful for isochronous applications). This bit is read/write but only 0 can be written and writing 1 has no effect.
0x40016044 C   FIELD 10w01 RST_DCON (rw): USB reset request (Device mode) or device connect/disconnect (Host mode) Device mode This bit is set by hardware when an USB reset is released by the host and the bus returns to idle. USB reset state is internally detected after the sampling of 60 consecutive SE0 cycles. Host mode This bit is set by hardware when device connection or device disconnection is detected. Device connection is signaled after J state is sampled for 22 cycles consecutively from unconnected state. Device disconnection is signaled after SE0 state is seen for 22 bit times consecutively from connected state.
0x40016044 C   FIELD 11w01 SUSP (rw): Suspend mode request Device mode This bit is set by the hardware when no traffic has been received for 3 ms, indicating a suspend mode request from the USB bus. The suspend condition check is enabled immediately after any USB reset and it is disabled by the hardware when the suspend mode is active (SUSPEN=1) until the end of resume sequence. This bit is read/write but only 0 can be written and writing 1 has no effect.
0x40016044 C   FIELD 12w01 WKUP (rw): Wakeup This bit is set to 1 by the hardware when, during suspend mode, activity is detected that wakes up the USB peripheral. This event asynchronously clears the SUSPRDY bit in the CTLR register and activates the USB_WAKEUP line, which can be used to notify the rest of the device (for example wakeup unit) about the start of the resume process. This bit is read/write but only 0 can be written and writing 1 has no effect.
0x40016044 C   FIELD 13w01 ERR (rw): Error This flag is set whenever one of the errors listed below has occurred: NANS: No ANSwer. The timeout for a host response has expired. CRC: Cyclic redundancy check error. One of the received CRCs, either in the token or in the data, was wrong. BST: Bit stuffing error. A bit stuffing error was detected anywhere in the PID, data, and/or CRC. FVIO: Framing format violation. A non-standard frame was received (EOP not in the right place, wrong token sequence, etc.). The USB software can usually ignore errors, since the USB peripheral and the PC host manage retransmission in case of errors in a fully transparent way. This interrupt can be useful during the software development phase, or to monitor the quality of transmission over the USB bus, to flag possible problems to the user (for example loose connector, too noisy environment, broken conductor in the USB cable and so on). This bit is read/write but only 0 can be written and writing 1 has no effect.
0x40016044 C   FIELD 14w01 PMAOVR (rw): Packet memory area over / underrun This bit is set if the microcontroller has not been able to respond in time to an USB memory request. The USB peripheral handles this event in the following way: During reception an ACK handshake packet is not sent, during transmission a bit-stuff error is forced on the transmitted stream; in both cases the host retries the transaction. The PMAOVR interrupt should never occur during normal operations. Since the failed transaction is retried by the host, the application software has the chance to speed-up device operations during this interrupt handling, to be ready for the next transaction retry; however this does not happen during isochronous transfers (no isochronous transaction is anyway retried) leading to a loss of data in this case. This bit is read/write but only 0 can be written and writing 1 has no effect.
0x40016044 C   FIELD 15w01 CTR (ro): Completed transfer in host mode This bit is set by the hardware to indicate that an endpoint/channel has successfully completed a transaction; using DIR and IDN bits software can determine which endpoint/channel requested the interrupt. This bit is read-only.
0x40016044 C   FIELD 16w01 THR512 (rw): 512 byte threshold interrupt This bit is set to 1 by the hardware when 512 bytes have been transmitted or received during isochronous transfers. This bit is read/write but only 0 can be written and writing 1 has no effect. Note that no information is available to indicate the associated channel/endpoint, however in practice only one ISO endpoint/channel with such large packets can be supported, so that channel.
0x40016044 C   FIELD 17w01 DDISC (rw): Device connection Host mode This bit is set when a device connection is detected. This bit is read/write but only 0 can be written and writing 1 has no effect.
0x40016044 C   FIELD 29w01 DCON_STAT (ro): Device connection status Host mode: This bit contains information about device connection status. It is set by hardware when a LS/FS device is attached to the host while it is reset when the device is disconnected.
0x40016044 C   FIELD 30w01 LS_DCON (ro): Low speed device connected Host mode: This bit is set by hardware when an LS device connection is detected. Device connection is signaled after LS J-state is sampled for 22 consecutive cycles of the USB clock (48 MHz) from the unconnected state.
0x40016048 B  REGISTER FNR: USB frame number register
0x40016048 C   FIELD 00w11 FN (ro): Frame number This bit field contains the 11-bits frame number contained in the last received SOF packet. The frame number is incremented for every frame sent by the host and it is useful for isochronous transfers. This bit field is updated on the generation of an SOF interrupt.
0x40016048 C   FIELD 11w02 LSOF (ro): Lost SOF Device mode These bits are written by the hardware when an ESOF interrupt is generated, counting the number of consecutive SOF packets lost. At the reception of an SOF packet, these bits are cleared.
0x40016048 C   FIELD 13w01 LCK (ro): Locked Device mode This bit is set by the hardware when at least two consecutive SOF packets have been received after the end of an USB reset condition or after the end of an USB resume sequence. Once locked, the frame timer remains in this state until an USB reset or USB suspend event occurs.
0x40016048 C   FIELD 14w01 RXDM (ro): Receive data - line status This bit can be used to observe the status of received data minus upstream port data line. It can be used during end-of-suspend routines to help determining the wakeup event.
0x40016048 C   FIELD 15w01 RXDP (ro): Receive data + line status This bit can be used to observe the status of received data plus upstream port data line. It can be used during end-of-suspend routines to help determining the wakeup event.
0x4001604C B  REGISTER DADDR: USB_DADDR
0x4001604C C   FIELD 00w07 ADD (rw): Device address Device mode These bits contain the USB function address assigned by the host PC during the enumeration process. Both this field and the endpoint/channel address (EA) field in the associated USB_CHEPnR register must match with the information contained in a USB token in order to handle a transaction to the required endpoint. Host mode These bits contain the address transmitted with the LPM transaction
0x4001604C C   FIELD 07w01 EF (rw): Enable function This bit is set by the software to enable the USB Device. The address of this device is contained in the following ADD[6:0] bits. If this bit is at 0 no transactions are handled, irrespective of the settings of USB_CHEPnR registers.
0x40016054 B  REGISTER LPMCSR: USB_LPMCSR
0x40016054 C   FIELD 00w01 LPMEN (rw): LPM support enable Device mode This bit is set by the software to enable the LPM support within the USB Device. If this bit is at 0 no LPM transactions are handled.
0x40016054 C   FIELD 01w01 LPMACK (rw): LPM token acknowledge enable Device mode: The NYET/ACK is returned only on a successful LPM transaction: No errors in both the EXT token and the LPM token (else ERROR) A valid bLinkState = 0001B (L1) is received (else STALL)
0x40016054 C   FIELD 03w01 REMWAKE (ro): bRemoteWake value Device mode This bit contains the bRemoteWake value received with last ACKed LPM Token
0x40016054 C   FIELD 04w04 BESL (ro): BESL value Device mode These bits contain the BESL value received with last ACKed LPM Token
0x40016058 B  REGISTER BCDR: USB_BCDR
0x40016058 C   FIELD 00w01 BCDEN (rw): Battery charging detector (BCD) enable Device mode This bit is set by the software to enable the BCD support within the USB Device. When enabled, the USB PHY is fully controlled by BCD and cannot be used for normal communication. Once the BCD discovery is finished, the BCD should be placed in OFF mode by clearing this bit to 0 in order to allow the normal USB operation.
0x40016058 C   FIELD 01w01 DCDEN (rw): Data contact detection (DCD) mode enable Device mode This bit is set by the software to put the BCD into DCD mode. Only one detection mode (DCD, PD, SD or OFF) should be selected to work correctly.
0x40016058 C   FIELD 02w01 PDEN (rw): Primary detection (PD) mode enable Device mode This bit is set by the software to put the BCD into PD mode. Only one detection mode (DCD, PD, SD or OFF) should be selected to work correctly.
0x40016058 C   FIELD 03w01 SDEN (rw): Secondary detection (SD) mode enable Device mode This bit is set by the software to put the BCD into SD mode. Only one detection mode (DCD, PD, SD or OFF) should be selected to work correctly.
0x40016058 C   FIELD 04w01 DCDET (ro): Data contact detection (DCD) status Device mode This bit gives the result of DCD.
0x40016058 C   FIELD 05w01 PDET (ro): Primary detection (PD) status Device mode This bit gives the result of PD.
0x40016058 C   FIELD 06w01 SDET (ro): Secondary detection (SD) status Device mode This bit gives the result of SD.
0x40016058 C   FIELD 07w01 PS2DET (ro): DM pull-up detection status Device mode This bit is active only during PD and gives the result of comparison between DM voltage level and VLGC threshold. In normal situation, the DM level should be below this threshold. If it is above, it means that the DM is externally pulled high. This can be caused by connection to a PS2 port (which pulls-up both DP and DM lines) or to some proprietary charger not following the BCD specification.
0x40016058 C   FIELD 15w01 DPPU_DPD (rw): DP pull-up / DPDM pull-down Device mode This bit is set by software to enable the embedded pull-up on DP line. Clearing it to 0 can be used to signal disconnect to the host when needed by the user software. Host mode This bit is set by software to enable the embedded pull-down on DP and DM lines.
0x40020000 A PERIPHERAL GPDMA1
0x40020004 B  REGISTER PRIVCFGR: GPDMA privileged configuration register
0x40020004 C   FIELD 00w01 PRIV0 (rw): privileged state of channel x
0x40020004 C   FIELD 01w01 PRIV1 (rw): privileged state of channel x
0x40020004 C   FIELD 02w01 PRIV2 (rw): privileged state of channel x
0x40020004 C   FIELD 03w01 PRIV3 (rw): privileged state of channel x
0x40020004 C   FIELD 04w01 PRIV4 (rw): privileged state of channel x
0x40020004 C   FIELD 05w01 PRIV5 (rw): privileged state of channel x
0x40020004 C   FIELD 06w01 PRIV6 (rw): privileged state of channel x
0x40020004 C   FIELD 07w01 PRIV7 (rw): privileged state of channel x
0x4002000C B  REGISTER MISR: GPDMA masked interrupt status register
0x4002000C C   FIELD 00w01 MIS0 (ro): masked interrupt status of channel x
0x4002000C C   FIELD 01w01 MIS1 (ro): masked interrupt status of channel x
0x4002000C C   FIELD 02w01 MIS2 (ro): masked interrupt status of channel x
0x4002000C C   FIELD 03w01 MIS3 (ro): masked interrupt status of channel x
0x4002000C C   FIELD 04w01 MIS4 (ro): masked interrupt status of channel x
0x4002000C C   FIELD 05w01 MIS5 (ro): masked interrupt status of channel x
0x4002000C C   FIELD 06w01 MIS6 (ro): masked interrupt status of channel x
0x4002000C C   FIELD 07w01 MIS7 (ro): masked interrupt status of channel x
0x40020050 B  CLUSTER CH0: Channel cluster
0x40020050 B  REGISTER LBAR0: GPDMA channel 0 linked-list base address register
0x40020050 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x4002005C B  REGISTER FCR0: GPDMA channel 0 flag clear register
0x4002005C C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x4002005C C   FIELD 09w01 HTF (wo): half transfer flag clear
0x4002005C C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x4002005C C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x4002005C C   FIELD 12w01 USEF (wo): user setting error flag clear
0x4002005C C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x4002005C C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x40020060 B  REGISTER SR0: GPDMA channel 0 status register
0x40020060 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x40020060 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x40020060 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x40020060 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x40020060 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x40020060 C   FIELD 12w01 USEF (ro): user setting error flag
0x40020060 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x40020060 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x40020060 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x40020064 B  REGISTER CR0: GPDMA channel 0 control register
0x40020064 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x40020064 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x40020064 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x40020064 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x40020064 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x40020064 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x40020064 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x40020064 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x40020064 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x40020064 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x40020064 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40020064 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40020064 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020090 B  REGISTER TR10: GPDMA channel 0 transfer register 1
0x40020090 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40020090 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020090 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020090 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40020090 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40020090 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020090 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40020090 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020090 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020090 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40020090 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40020090 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020094 B  REGISTER TR20: GPDMA channel 0 transfer register 2
0x40020094 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40020094 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40020094 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40020094 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40020094 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40020094 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40020094 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40020094 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40020094 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40020098 B  REGISTER BR10: GPDMA channel 0 block register 1
0x40020098 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002009C B  REGISTER SAR0: GPDMA channel 0 source address register
0x4002009C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x400200A0 B  REGISTER DAR0: GPDMA channel 0 destination address register
0x400200A0 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x400200CC B  REGISTER LLR0: GPDMA channel 0 linked-list address register
0x400200CC C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x400200CC C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x400200CC C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x400200CC C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x400200CC C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x400200CC C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x400200CC C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x400200D0 B  CLUSTER CH1: Channel cluster
0x400200D0 B  REGISTER LBAR1: GPDMA channel 0 linked-list base address register
0x400200D0 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x400200DC B  REGISTER FCR1: GPDMA channel 0 flag clear register
0x400200DC C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x400200DC C   FIELD 09w01 HTF (wo): half transfer flag clear
0x400200DC C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x400200DC C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x400200DC C   FIELD 12w01 USEF (wo): user setting error flag clear
0x400200DC C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x400200DC C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x400200E0 B  REGISTER SR1: GPDMA channel 0 status register
0x400200E0 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x400200E0 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x400200E0 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x400200E0 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x400200E0 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x400200E0 C   FIELD 12w01 USEF (ro): user setting error flag
0x400200E0 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x400200E0 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x400200E0 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x400200E4 B  REGISTER CR1: GPDMA channel 0 control register
0x400200E4 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x400200E4 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x400200E4 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x400200E4 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x400200E4 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x400200E4 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x400200E4 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x400200E4 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x400200E4 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x400200E4 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x400200E4 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400200E4 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400200E4 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020110 B  REGISTER TR11: GPDMA channel 0 transfer register 1
0x40020110 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40020110 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020110 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020110 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40020110 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40020110 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020110 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40020110 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020110 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020110 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40020110 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40020110 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020114 B  REGISTER TR21: GPDMA channel 0 transfer register 2
0x40020114 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40020114 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40020114 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40020114 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40020114 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40020114 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40020114 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40020114 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40020114 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40020118 B  REGISTER BR11: GPDMA channel 0 block register 1
0x40020118 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002011C B  REGISTER SAR1: GPDMA channel 0 source address register
0x4002011C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x40020120 B  REGISTER DAR1: GPDMA channel 0 destination address register
0x40020120 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x4002014C B  REGISTER LLR1: GPDMA channel 0 linked-list address register
0x4002014C C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x4002014C C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x4002014C C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x4002014C C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x4002014C C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x4002014C C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x4002014C C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x40020150 B  CLUSTER CH2: Channel cluster
0x40020150 B  REGISTER LBAR2: GPDMA channel 0 linked-list base address register
0x40020150 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x4002015C B  REGISTER FCR2: GPDMA channel 0 flag clear register
0x4002015C C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x4002015C C   FIELD 09w01 HTF (wo): half transfer flag clear
0x4002015C C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x4002015C C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x4002015C C   FIELD 12w01 USEF (wo): user setting error flag clear
0x4002015C C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x4002015C C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x40020160 B  REGISTER SR2: GPDMA channel 0 status register
0x40020160 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x40020160 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x40020160 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x40020160 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x40020160 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x40020160 C   FIELD 12w01 USEF (ro): user setting error flag
0x40020160 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x40020160 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x40020160 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x40020164 B  REGISTER CR2: GPDMA channel 0 control register
0x40020164 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x40020164 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x40020164 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x40020164 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x40020164 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x40020164 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x40020164 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x40020164 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x40020164 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x40020164 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x40020164 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40020164 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40020164 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020190 B  REGISTER TR12: GPDMA channel 0 transfer register 1
0x40020190 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40020190 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020190 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020190 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40020190 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40020190 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020190 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40020190 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020190 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020190 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40020190 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40020190 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020194 B  REGISTER TR22: GPDMA channel 0 transfer register 2
0x40020194 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40020194 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40020194 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40020194 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40020194 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40020194 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40020194 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40020194 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40020194 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40020198 B  REGISTER BR12: GPDMA channel 0 block register 1
0x40020198 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002019C B  REGISTER SAR2: GPDMA channel 0 source address register
0x4002019C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x400201A0 B  REGISTER DAR2: GPDMA channel 0 destination address register
0x400201A0 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x400201CC B  REGISTER LLR2: GPDMA channel 0 linked-list address register
0x400201CC C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x400201CC C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x400201CC C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x400201CC C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x400201CC C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x400201CC C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x400201CC C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x400201D0 B  CLUSTER CH3: Channel cluster
0x400201D0 B  REGISTER LBAR3: GPDMA channel 0 linked-list base address register
0x400201D0 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x400201DC B  REGISTER FCR3: GPDMA channel 0 flag clear register
0x400201DC C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x400201DC C   FIELD 09w01 HTF (wo): half transfer flag clear
0x400201DC C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x400201DC C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x400201DC C   FIELD 12w01 USEF (wo): user setting error flag clear
0x400201DC C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x400201DC C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x400201E0 B  REGISTER SR3: GPDMA channel 0 status register
0x400201E0 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x400201E0 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x400201E0 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x400201E0 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x400201E0 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x400201E0 C   FIELD 12w01 USEF (ro): user setting error flag
0x400201E0 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x400201E0 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x400201E0 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x400201E4 B  REGISTER CR3: GPDMA channel 0 control register
0x400201E4 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x400201E4 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x400201E4 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x400201E4 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x400201E4 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x400201E4 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x400201E4 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x400201E4 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x400201E4 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x400201E4 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x400201E4 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400201E4 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400201E4 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020210 B  REGISTER TR13: GPDMA channel 0 transfer register 1
0x40020210 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40020210 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020210 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020210 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40020210 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40020210 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020210 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40020210 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020210 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020210 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40020210 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40020210 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020214 B  REGISTER TR23: GPDMA channel 0 transfer register 2
0x40020214 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40020214 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40020214 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40020214 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40020214 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40020214 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40020214 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40020214 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40020214 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40020218 B  REGISTER BR13: GPDMA channel 0 block register 1
0x40020218 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002021C B  REGISTER SAR3: GPDMA channel 0 source address register
0x4002021C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x40020220 B  REGISTER DAR3: GPDMA channel 0 destination address register
0x40020220 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x4002024C B  REGISTER LLR3: GPDMA channel 0 linked-list address register
0x4002024C C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x4002024C C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x4002024C C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x4002024C C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x4002024C C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x4002024C C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x4002024C C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x40020250 B  CLUSTER CH4: Channel cluster
0x40020250 B  REGISTER LBAR4: GPDMA channel 0 linked-list base address register
0x40020250 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x4002025C B  REGISTER FCR4: GPDMA channel 0 flag clear register
0x4002025C C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x4002025C C   FIELD 09w01 HTF (wo): half transfer flag clear
0x4002025C C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x4002025C C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x4002025C C   FIELD 12w01 USEF (wo): user setting error flag clear
0x4002025C C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x4002025C C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x40020260 B  REGISTER SR4: GPDMA channel 0 status register
0x40020260 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x40020260 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x40020260 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x40020260 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x40020260 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x40020260 C   FIELD 12w01 USEF (ro): user setting error flag
0x40020260 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x40020260 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x40020260 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x40020264 B  REGISTER CR4: GPDMA channel 0 control register
0x40020264 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x40020264 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x40020264 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x40020264 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x40020264 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x40020264 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x40020264 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x40020264 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x40020264 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x40020264 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x40020264 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40020264 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40020264 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020290 B  REGISTER TR14: GPDMA channel 0 transfer register 1
0x40020290 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40020290 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020290 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020290 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40020290 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40020290 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020290 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40020290 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020290 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020290 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40020290 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40020290 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020294 B  REGISTER TR24: GPDMA channel 0 transfer register 2
0x40020294 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40020294 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40020294 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40020294 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40020294 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40020294 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40020294 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40020294 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40020294 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40020298 B  REGISTER BR14: GPDMA channel 0 block register 1
0x40020298 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002029C B  REGISTER SAR4: GPDMA channel 0 source address register
0x4002029C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x400202A0 B  REGISTER DAR4: GPDMA channel 0 destination address register
0x400202A0 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x400202CC B  REGISTER LLR4: GPDMA channel 0 linked-list address register
0x400202CC C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x400202CC C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x400202CC C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x400202CC C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x400202CC C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x400202CC C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x400202CC C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x400202D0 B  CLUSTER CH5: Channel cluster
0x400202D0 B  REGISTER LBAR5: GPDMA channel 0 linked-list base address register
0x400202D0 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x400202DC B  REGISTER FCR5: GPDMA channel 0 flag clear register
0x400202DC C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x400202DC C   FIELD 09w01 HTF (wo): half transfer flag clear
0x400202DC C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x400202DC C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x400202DC C   FIELD 12w01 USEF (wo): user setting error flag clear
0x400202DC C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x400202DC C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x400202E0 B  REGISTER SR5: GPDMA channel 0 status register
0x400202E0 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x400202E0 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x400202E0 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x400202E0 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x400202E0 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x400202E0 C   FIELD 12w01 USEF (ro): user setting error flag
0x400202E0 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x400202E0 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x400202E0 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x400202E4 B  REGISTER CR5: GPDMA channel 0 control register
0x400202E4 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x400202E4 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x400202E4 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x400202E4 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x400202E4 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x400202E4 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x400202E4 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x400202E4 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x400202E4 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x400202E4 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x400202E4 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400202E4 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400202E4 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020310 B  REGISTER TR15: GPDMA channel 0 transfer register 1
0x40020310 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40020310 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020310 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020310 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40020310 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40020310 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020310 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40020310 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020310 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020310 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40020310 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40020310 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020314 B  REGISTER TR25: GPDMA channel 0 transfer register 2
0x40020314 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40020314 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40020314 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40020314 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40020314 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40020314 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40020314 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40020314 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40020314 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40020318 B  REGISTER BR15: GPDMA channel 0 block register 1
0x40020318 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002031C B  REGISTER SAR5: GPDMA channel 0 source address register
0x4002031C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x40020320 B  REGISTER DAR5: GPDMA channel 0 destination address register
0x40020320 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x4002034C B  REGISTER LLR5: GPDMA channel 0 linked-list address register
0x4002034C C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x4002034C C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x4002034C C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x4002034C C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x4002034C C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x4002034C C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x4002034C C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x40020350 B  CLUSTER CH2D6: 2D-addressing channel cluster
0x40020350 B  REGISTER LBAR6: GPDMA channel 6 linked-list base address register
0x40020350 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x4002035C B  REGISTER FCR6: GPDMA channel 6 flag clear register
0x4002035C C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x4002035C C   FIELD 09w01 HTF (wo): half transfer flag clear
0x4002035C C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x4002035C C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x4002035C C   FIELD 12w01 USEF (wo): user setting error flag clear
0x4002035C C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x4002035C C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x40020360 B  REGISTER SR6: GPDMA channel 6 status register
0x40020360 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x40020360 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x40020360 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x40020360 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x40020360 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x40020360 C   FIELD 12w01 USEF (ro): user setting error flag
0x40020360 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x40020360 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x40020360 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x40020364 B  REGISTER CR6: GPDMA channel 6 control register
0x40020364 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x40020364 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x40020364 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x40020364 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x40020364 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x40020364 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x40020364 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x40020364 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x40020364 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x40020364 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x40020364 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40020364 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40020364 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020390 B  REGISTER TR16: GPDMA channel 6 transfer register 1
0x40020390 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40020390 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020390 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020390 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40020390 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40020390 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020390 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40020390 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020390 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020390 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40020390 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40020390 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020394 B  REGISTER TR26: GPDMA channel 6 transfer register 2
0x40020394 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40020394 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40020394 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40020394 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40020394 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: the peripheral must be set as the source of the transfer (DREQ = 0). Note: data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40020394 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40020394 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40020394 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40020394 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40020398 B  REGISTER BR16: GPDMA channel 6 alternate block register 1
0x40020398 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] different 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x40020398 C   FIELD 16w11 BRC (rw): Block repeat counter This field contains the number of repetitions of the current block (0 to 2047). When the channel is enabled, this field becomes read-only. After decrements, this field indicates the remaining number of blocks, excluding the current one. This counter is hardware decremented for each completed block transfer. Once the last block transfer is completed (BRC[10:0] = BNDT[15:0] = 0): If GPDMA_CxLLR.UB1 = 1, all GPDMA_CxBR1 fields are updated by the next LLI in the memory. If GPDMA_CxLLR.UB1 = 0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] different 0, this field is internally restored to the programmed value (infinite/continuous last LLI). if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI and data transfer.
0x40020398 C   FIELD 28w01 SDEC (rw): source address decrement
0x40020398 C   FIELD 29w01 DDEC (rw): destination address decrement
0x40020398 C   FIELD 30w01 BRSDEC (rw): Block repeat source address decrement Note: On top of this increment/decrement (depending on BRSDEC), GPDMA_CxSAR is in the same time also updated by the increment/decrement (depending on SDEC) of the GPDMA_CxTR3.SAO value, as it is done after any programmed burst transfer.
0x40020398 C   FIELD 31w01 BRDDEC (rw): Block repeat destination address decrement Note: On top of this increment/decrement (depending on BRDDEC), GPDMA_CxDAR is in the same time also updated by the increment/decrement (depending on DDEC) of the GPDMA_CxTR3.DAO value, as it is usually done at the end of each programmed burst transfer.
0x4002039C B  REGISTER SAR6: GPDMA channel 6 source address register
0x4002039C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x400203A0 B  REGISTER DAR6: GPDMA channel 6 destination address register
0x400203A0 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x400203A4 B  REGISTER TR36: GPDMA channel 6 transfer register 3
0x400203A4 C   FIELD 00w13 SAO (rw): source address offset increment The source address, pointed by GPDMA_CxSAR, is incremented or decremented (depending on GPDMA_CxBR1.SDEC) by this offset SAO[12:0] for each programmed source burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.SINC = 1). Note: A source address offset must be aligned with the programmed data width of a source burst (SAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and none transfer is issued. Note: When the source block size is not a multiple of the destination burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x400203A4 C   FIELD 16w13 DAO (rw): destination address offset increment The destination address, pointed by GPDMA_CxDAR, is incremented or decremented (depending on GPDMA_CxBR1.DDEC) by this offset DAO[12:0] for each programmed destination burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.DINC = 1). Note: A destination address offset must be aligned with the programmed data width of a destination burst (DAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x400203A8 B  REGISTER BR26: GPDMA channel 6 block register 2
0x400203A8 C   FIELD 00w16 BRSAO (rw): Block repeated source address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRSDEC) the current source address (GPDMA_CxSAR) at the end of a block transfer. A block repeated source address offset must be aligned with the programmed data width of a source burst (BRSAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: BRSAO[15:0] must be set to 0 in peripheral flow-control mode (if GPDMA_CxTR2.PFREQ = 1).
0x400203A8 C   FIELD 16w16 BRDAO (rw): Block repeated destination address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRDDEC) the current destination address (GPDMA_CxDAR) at the end of a block transfer. A block repeated destination address offset must be aligned with the programmed data width of a destination burst (BRDAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: BRDAO[15:0] must be set to 0 in peripheral flow-control mode (if GPDMA_CxTR2.PFREQ = 1).
0x400203CC B  REGISTER LLR6: GPDMA channel 6 alternate linked-list address register
0x400203CC C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x400203CC C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x400203CC C   FIELD 25w01 UB2 (rw): Update GPDMA_CxBR2 from memory This bit controls the update of GPDMA_CxBR2 from the memory during the link transfer.
0x400203CC C   FIELD 26w01 UT3 (rw): Update GPDMA_CxTR3 from memory This bit controls the update of GPDMA_CxTR3 from the memory during the link transfer.
0x400203CC C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x400203CC C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x400203CC C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x400203CC C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x400203CC C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x400203D0 B  CLUSTER CH2D7: 2D-addressing channel cluster
0x400203D0 B  REGISTER LBAR7: GPDMA channel 6 linked-list base address register
0x400203D0 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x400203DC B  REGISTER FCR7: GPDMA channel 6 flag clear register
0x400203DC C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x400203DC C   FIELD 09w01 HTF (wo): half transfer flag clear
0x400203DC C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x400203DC C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x400203DC C   FIELD 12w01 USEF (wo): user setting error flag clear
0x400203DC C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x400203DC C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x400203E0 B  REGISTER SR7: GPDMA channel 6 status register
0x400203E0 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x400203E0 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x400203E0 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x400203E0 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x400203E0 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x400203E0 C   FIELD 12w01 USEF (ro): user setting error flag
0x400203E0 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x400203E0 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x400203E0 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x400203E4 B  REGISTER CR7: GPDMA channel 6 control register
0x400203E4 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x400203E4 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x400203E4 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x400203E4 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x400203E4 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x400203E4 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x400203E4 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x400203E4 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x400203E4 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x400203E4 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x400203E4 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400203E4 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400203E4 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020410 B  REGISTER TR17: GPDMA channel 6 transfer register 1
0x40020410 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40020410 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020410 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020410 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40020410 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40020410 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020410 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40020410 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40020410 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40020410 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40020410 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40020410 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40020414 B  REGISTER TR27: GPDMA channel 6 transfer register 2
0x40020414 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40020414 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40020414 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40020414 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40020414 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: the peripheral must be set as the source of the transfer (DREQ = 0). Note: data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40020414 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40020414 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40020414 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40020414 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40020418 B  REGISTER BR17: GPDMA channel 6 alternate block register 1
0x40020418 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] different 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x40020418 C   FIELD 16w11 BRC (rw): Block repeat counter This field contains the number of repetitions of the current block (0 to 2047). When the channel is enabled, this field becomes read-only. After decrements, this field indicates the remaining number of blocks, excluding the current one. This counter is hardware decremented for each completed block transfer. Once the last block transfer is completed (BRC[10:0] = BNDT[15:0] = 0): If GPDMA_CxLLR.UB1 = 1, all GPDMA_CxBR1 fields are updated by the next LLI in the memory. If GPDMA_CxLLR.UB1 = 0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] different 0, this field is internally restored to the programmed value (infinite/continuous last LLI). if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI and data transfer.
0x40020418 C   FIELD 28w01 SDEC (rw): source address decrement
0x40020418 C   FIELD 29w01 DDEC (rw): destination address decrement
0x40020418 C   FIELD 30w01 BRSDEC (rw): Block repeat source address decrement Note: On top of this increment/decrement (depending on BRSDEC), GPDMA_CxSAR is in the same time also updated by the increment/decrement (depending on SDEC) of the GPDMA_CxTR3.SAO value, as it is done after any programmed burst transfer.
0x40020418 C   FIELD 31w01 BRDDEC (rw): Block repeat destination address decrement Note: On top of this increment/decrement (depending on BRDDEC), GPDMA_CxDAR is in the same time also updated by the increment/decrement (depending on DDEC) of the GPDMA_CxTR3.DAO value, as it is usually done at the end of each programmed burst transfer.
0x4002041C B  REGISTER SAR7: GPDMA channel 6 source address register
0x4002041C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x40020420 B  REGISTER DAR7: GPDMA channel 6 destination address register
0x40020420 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x40020424 B  REGISTER TR37: GPDMA channel 6 transfer register 3
0x40020424 C   FIELD 00w13 SAO (rw): source address offset increment The source address, pointed by GPDMA_CxSAR, is incremented or decremented (depending on GPDMA_CxBR1.SDEC) by this offset SAO[12:0] for each programmed source burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.SINC = 1). Note: A source address offset must be aligned with the programmed data width of a source burst (SAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and none transfer is issued. Note: When the source block size is not a multiple of the destination burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x40020424 C   FIELD 16w13 DAO (rw): destination address offset increment The destination address, pointed by GPDMA_CxDAR, is incremented or decremented (depending on GPDMA_CxBR1.DDEC) by this offset DAO[12:0] for each programmed destination burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.DINC = 1). Note: A destination address offset must be aligned with the programmed data width of a destination burst (DAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x40020428 B  REGISTER BR27: GPDMA channel 6 block register 2
0x40020428 C   FIELD 00w16 BRSAO (rw): Block repeated source address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRSDEC) the current source address (GPDMA_CxSAR) at the end of a block transfer. A block repeated source address offset must be aligned with the programmed data width of a source burst (BRSAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: BRSAO[15:0] must be set to 0 in peripheral flow-control mode (if GPDMA_CxTR2.PFREQ = 1).
0x40020428 C   FIELD 16w16 BRDAO (rw): Block repeated destination address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRDDEC) the current destination address (GPDMA_CxDAR) at the end of a block transfer. A block repeated destination address offset must be aligned with the programmed data width of a destination burst (BRDAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: BRDAO[15:0] must be set to 0 in peripheral flow-control mode (if GPDMA_CxTR2.PFREQ = 1).
0x4002044C B  REGISTER LLR7: GPDMA channel 6 alternate linked-list address register
0x4002044C C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x4002044C C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x4002044C C   FIELD 25w01 UB2 (rw): Update GPDMA_CxBR2 from memory This bit controls the update of GPDMA_CxBR2 from the memory during the link transfer.
0x4002044C C   FIELD 26w01 UT3 (rw): Update GPDMA_CxTR3 from memory This bit controls the update of GPDMA_CxTR3 from the memory during the link transfer.
0x4002044C C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x4002044C C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x4002044C C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x4002044C C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x4002044C C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x40021000 A PERIPHERAL GPDMA2
0x40021004 B  REGISTER PRIVCFGR: GPDMA privileged configuration register
0x40021004 C   FIELD 00w01 PRIV0 (rw): privileged state of channel x
0x40021004 C   FIELD 01w01 PRIV1 (rw): privileged state of channel x
0x40021004 C   FIELD 02w01 PRIV2 (rw): privileged state of channel x
0x40021004 C   FIELD 03w01 PRIV3 (rw): privileged state of channel x
0x40021004 C   FIELD 04w01 PRIV4 (rw): privileged state of channel x
0x40021004 C   FIELD 05w01 PRIV5 (rw): privileged state of channel x
0x40021004 C   FIELD 06w01 PRIV6 (rw): privileged state of channel x
0x40021004 C   FIELD 07w01 PRIV7 (rw): privileged state of channel x
0x4002100C B  REGISTER MISR: GPDMA masked interrupt status register
0x4002100C C   FIELD 00w01 MIS0 (ro): masked interrupt status of channel x
0x4002100C C   FIELD 01w01 MIS1 (ro): masked interrupt status of channel x
0x4002100C C   FIELD 02w01 MIS2 (ro): masked interrupt status of channel x
0x4002100C C   FIELD 03w01 MIS3 (ro): masked interrupt status of channel x
0x4002100C C   FIELD 04w01 MIS4 (ro): masked interrupt status of channel x
0x4002100C C   FIELD 05w01 MIS5 (ro): masked interrupt status of channel x
0x4002100C C   FIELD 06w01 MIS6 (ro): masked interrupt status of channel x
0x4002100C C   FIELD 07w01 MIS7 (ro): masked interrupt status of channel x
0x40021050 B  CLUSTER CH0: Channel cluster
0x40021050 B  REGISTER LBAR0: GPDMA channel 0 linked-list base address register
0x40021050 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x4002105C B  REGISTER FCR0: GPDMA channel 0 flag clear register
0x4002105C C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x4002105C C   FIELD 09w01 HTF (wo): half transfer flag clear
0x4002105C C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x4002105C C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x4002105C C   FIELD 12w01 USEF (wo): user setting error flag clear
0x4002105C C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x4002105C C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x40021060 B  REGISTER SR0: GPDMA channel 0 status register
0x40021060 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x40021060 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x40021060 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x40021060 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x40021060 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x40021060 C   FIELD 12w01 USEF (ro): user setting error flag
0x40021060 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x40021060 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x40021060 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x40021064 B  REGISTER CR0: GPDMA channel 0 control register
0x40021064 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x40021064 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x40021064 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x40021064 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x40021064 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x40021064 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x40021064 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x40021064 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x40021064 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x40021064 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x40021064 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40021064 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40021064 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021090 B  REGISTER TR10: GPDMA channel 0 transfer register 1
0x40021090 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40021090 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021090 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021090 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40021090 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40021090 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021090 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40021090 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021090 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021090 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40021090 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40021090 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021094 B  REGISTER TR20: GPDMA channel 0 transfer register 2
0x40021094 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40021094 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40021094 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40021094 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40021094 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40021094 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40021094 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40021094 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40021094 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40021098 B  REGISTER BR10: GPDMA channel 0 block register 1
0x40021098 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002109C B  REGISTER SAR0: GPDMA channel 0 source address register
0x4002109C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x400210A0 B  REGISTER DAR0: GPDMA channel 0 destination address register
0x400210A0 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x400210CC B  REGISTER LLR0: GPDMA channel 0 linked-list address register
0x400210CC C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x400210CC C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x400210CC C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x400210CC C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x400210CC C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x400210CC C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x400210CC C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x400210D0 B  CLUSTER CH1: Channel cluster
0x400210D0 B  REGISTER LBAR1: GPDMA channel 0 linked-list base address register
0x400210D0 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x400210DC B  REGISTER FCR1: GPDMA channel 0 flag clear register
0x400210DC C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x400210DC C   FIELD 09w01 HTF (wo): half transfer flag clear
0x400210DC C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x400210DC C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x400210DC C   FIELD 12w01 USEF (wo): user setting error flag clear
0x400210DC C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x400210DC C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x400210E0 B  REGISTER SR1: GPDMA channel 0 status register
0x400210E0 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x400210E0 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x400210E0 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x400210E0 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x400210E0 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x400210E0 C   FIELD 12w01 USEF (ro): user setting error flag
0x400210E0 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x400210E0 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x400210E0 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x400210E4 B  REGISTER CR1: GPDMA channel 0 control register
0x400210E4 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x400210E4 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x400210E4 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x400210E4 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x400210E4 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x400210E4 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x400210E4 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x400210E4 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x400210E4 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x400210E4 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x400210E4 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400210E4 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400210E4 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021110 B  REGISTER TR11: GPDMA channel 0 transfer register 1
0x40021110 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40021110 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021110 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021110 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40021110 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40021110 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021110 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40021110 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021110 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021110 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40021110 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40021110 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021114 B  REGISTER TR21: GPDMA channel 0 transfer register 2
0x40021114 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40021114 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40021114 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40021114 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40021114 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40021114 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40021114 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40021114 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40021114 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40021118 B  REGISTER BR11: GPDMA channel 0 block register 1
0x40021118 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002111C B  REGISTER SAR1: GPDMA channel 0 source address register
0x4002111C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x40021120 B  REGISTER DAR1: GPDMA channel 0 destination address register
0x40021120 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x4002114C B  REGISTER LLR1: GPDMA channel 0 linked-list address register
0x4002114C C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x4002114C C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x4002114C C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x4002114C C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x4002114C C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x4002114C C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x4002114C C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x40021150 B  CLUSTER CH2: Channel cluster
0x40021150 B  REGISTER LBAR2: GPDMA channel 0 linked-list base address register
0x40021150 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x4002115C B  REGISTER FCR2: GPDMA channel 0 flag clear register
0x4002115C C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x4002115C C   FIELD 09w01 HTF (wo): half transfer flag clear
0x4002115C C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x4002115C C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x4002115C C   FIELD 12w01 USEF (wo): user setting error flag clear
0x4002115C C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x4002115C C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x40021160 B  REGISTER SR2: GPDMA channel 0 status register
0x40021160 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x40021160 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x40021160 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x40021160 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x40021160 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x40021160 C   FIELD 12w01 USEF (ro): user setting error flag
0x40021160 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x40021160 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x40021160 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x40021164 B  REGISTER CR2: GPDMA channel 0 control register
0x40021164 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x40021164 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x40021164 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x40021164 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x40021164 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x40021164 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x40021164 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x40021164 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x40021164 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x40021164 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x40021164 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40021164 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40021164 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021190 B  REGISTER TR12: GPDMA channel 0 transfer register 1
0x40021190 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40021190 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021190 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021190 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40021190 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40021190 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021190 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40021190 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021190 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021190 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40021190 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40021190 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021194 B  REGISTER TR22: GPDMA channel 0 transfer register 2
0x40021194 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40021194 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40021194 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40021194 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40021194 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40021194 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40021194 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40021194 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40021194 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40021198 B  REGISTER BR12: GPDMA channel 0 block register 1
0x40021198 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002119C B  REGISTER SAR2: GPDMA channel 0 source address register
0x4002119C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x400211A0 B  REGISTER DAR2: GPDMA channel 0 destination address register
0x400211A0 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x400211CC B  REGISTER LLR2: GPDMA channel 0 linked-list address register
0x400211CC C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x400211CC C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x400211CC C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x400211CC C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x400211CC C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x400211CC C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x400211CC C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x400211D0 B  CLUSTER CH3: Channel cluster
0x400211D0 B  REGISTER LBAR3: GPDMA channel 0 linked-list base address register
0x400211D0 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x400211DC B  REGISTER FCR3: GPDMA channel 0 flag clear register
0x400211DC C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x400211DC C   FIELD 09w01 HTF (wo): half transfer flag clear
0x400211DC C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x400211DC C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x400211DC C   FIELD 12w01 USEF (wo): user setting error flag clear
0x400211DC C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x400211DC C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x400211E0 B  REGISTER SR3: GPDMA channel 0 status register
0x400211E0 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x400211E0 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x400211E0 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x400211E0 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x400211E0 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x400211E0 C   FIELD 12w01 USEF (ro): user setting error flag
0x400211E0 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x400211E0 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x400211E0 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x400211E4 B  REGISTER CR3: GPDMA channel 0 control register
0x400211E4 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x400211E4 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x400211E4 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x400211E4 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x400211E4 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x400211E4 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x400211E4 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x400211E4 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x400211E4 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x400211E4 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x400211E4 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400211E4 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400211E4 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021210 B  REGISTER TR13: GPDMA channel 0 transfer register 1
0x40021210 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40021210 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021210 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021210 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40021210 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40021210 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021210 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40021210 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021210 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021210 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40021210 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40021210 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021214 B  REGISTER TR23: GPDMA channel 0 transfer register 2
0x40021214 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40021214 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40021214 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40021214 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40021214 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40021214 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40021214 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40021214 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40021214 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40021218 B  REGISTER BR13: GPDMA channel 0 block register 1
0x40021218 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002121C B  REGISTER SAR3: GPDMA channel 0 source address register
0x4002121C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x40021220 B  REGISTER DAR3: GPDMA channel 0 destination address register
0x40021220 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x4002124C B  REGISTER LLR3: GPDMA channel 0 linked-list address register
0x4002124C C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x4002124C C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x4002124C C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x4002124C C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x4002124C C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x4002124C C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x4002124C C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x40021250 B  CLUSTER CH4: Channel cluster
0x40021250 B  REGISTER LBAR4: GPDMA channel 0 linked-list base address register
0x40021250 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x4002125C B  REGISTER FCR4: GPDMA channel 0 flag clear register
0x4002125C C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x4002125C C   FIELD 09w01 HTF (wo): half transfer flag clear
0x4002125C C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x4002125C C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x4002125C C   FIELD 12w01 USEF (wo): user setting error flag clear
0x4002125C C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x4002125C C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x40021260 B  REGISTER SR4: GPDMA channel 0 status register
0x40021260 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x40021260 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x40021260 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x40021260 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x40021260 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x40021260 C   FIELD 12w01 USEF (ro): user setting error flag
0x40021260 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x40021260 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x40021260 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x40021264 B  REGISTER CR4: GPDMA channel 0 control register
0x40021264 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x40021264 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x40021264 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x40021264 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x40021264 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x40021264 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x40021264 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x40021264 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x40021264 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x40021264 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x40021264 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40021264 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40021264 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021290 B  REGISTER TR14: GPDMA channel 0 transfer register 1
0x40021290 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40021290 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021290 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021290 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40021290 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40021290 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021290 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40021290 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021290 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021290 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40021290 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40021290 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021294 B  REGISTER TR24: GPDMA channel 0 transfer register 2
0x40021294 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40021294 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40021294 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40021294 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40021294 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40021294 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40021294 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40021294 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40021294 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40021298 B  REGISTER BR14: GPDMA channel 0 block register 1
0x40021298 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002129C B  REGISTER SAR4: GPDMA channel 0 source address register
0x4002129C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x400212A0 B  REGISTER DAR4: GPDMA channel 0 destination address register
0x400212A0 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x400212CC B  REGISTER LLR4: GPDMA channel 0 linked-list address register
0x400212CC C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x400212CC C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x400212CC C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x400212CC C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x400212CC C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x400212CC C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x400212CC C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x400212D0 B  CLUSTER CH5: Channel cluster
0x400212D0 B  REGISTER LBAR5: GPDMA channel 0 linked-list base address register
0x400212D0 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x400212DC B  REGISTER FCR5: GPDMA channel 0 flag clear register
0x400212DC C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x400212DC C   FIELD 09w01 HTF (wo): half transfer flag clear
0x400212DC C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x400212DC C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x400212DC C   FIELD 12w01 USEF (wo): user setting error flag clear
0x400212DC C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x400212DC C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x400212E0 B  REGISTER SR5: GPDMA channel 0 status register
0x400212E0 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x400212E0 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x400212E0 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x400212E0 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x400212E0 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x400212E0 C   FIELD 12w01 USEF (ro): user setting error flag
0x400212E0 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x400212E0 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x400212E0 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x400212E4 B  REGISTER CR5: GPDMA channel 0 control register
0x400212E4 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x400212E4 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x400212E4 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x400212E4 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x400212E4 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x400212E4 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x400212E4 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x400212E4 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x400212E4 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x400212E4 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x400212E4 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400212E4 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400212E4 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021310 B  REGISTER TR15: GPDMA channel 0 transfer register 1
0x40021310 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40021310 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021310 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021310 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40021310 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40021310 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021310 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40021310 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021310 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021310 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40021310 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40021310 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021314 B  REGISTER TR25: GPDMA channel 0 transfer register 2
0x40021314 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40021314 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40021314 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40021314 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40021314 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: - no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: - the peripheral must be set as the source of the transfer (DREQ = 0). Note: - data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: - GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40021314 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40021314 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40021314 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40021314 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40021318 B  REGISTER BR15: GPDMA channel 0 block register 1
0x40021318 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one non null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] = 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1] = 1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x4002131C B  REGISTER SAR5: GPDMA channel 0 source address register
0x4002131C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x40021320 B  REGISTER DAR5: GPDMA channel 0 destination address register
0x40021320 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x4002134C B  REGISTER LLR5: GPDMA channel 0 linked-list address register
0x4002134C C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x4002134C C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x4002134C C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x4002134C C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x4002134C C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x4002134C C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x4002134C C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x40021350 B  CLUSTER CH2D6: 2D-addressing channel cluster
0x40021350 B  REGISTER LBAR6: GPDMA channel 6 linked-list base address register
0x40021350 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x4002135C B  REGISTER FCR6: GPDMA channel 6 flag clear register
0x4002135C C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x4002135C C   FIELD 09w01 HTF (wo): half transfer flag clear
0x4002135C C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x4002135C C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x4002135C C   FIELD 12w01 USEF (wo): user setting error flag clear
0x4002135C C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x4002135C C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x40021360 B  REGISTER SR6: GPDMA channel 6 status register
0x40021360 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x40021360 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x40021360 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x40021360 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x40021360 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x40021360 C   FIELD 12w01 USEF (ro): user setting error flag
0x40021360 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x40021360 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x40021360 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x40021364 B  REGISTER CR6: GPDMA channel 6 control register
0x40021364 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x40021364 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x40021364 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x40021364 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x40021364 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x40021364 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x40021364 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x40021364 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x40021364 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x40021364 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x40021364 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40021364 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x40021364 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021390 B  REGISTER TR16: GPDMA channel 6 transfer register 1
0x40021390 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40021390 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021390 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021390 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40021390 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40021390 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021390 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40021390 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021390 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021390 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40021390 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40021390 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021394 B  REGISTER TR26: GPDMA channel 6 transfer register 2
0x40021394 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40021394 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40021394 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40021394 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40021394 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: the peripheral must be set as the source of the transfer (DREQ = 0). Note: data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40021394 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40021394 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40021394 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40021394 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40021398 B  REGISTER BR16: GPDMA channel 6 alternate block register 1
0x40021398 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] different 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x40021398 C   FIELD 16w11 BRC (rw): Block repeat counter This field contains the number of repetitions of the current block (0 to 2047). When the channel is enabled, this field becomes read-only. After decrements, this field indicates the remaining number of blocks, excluding the current one. This counter is hardware decremented for each completed block transfer. Once the last block transfer is completed (BRC[10:0] = BNDT[15:0] = 0): If GPDMA_CxLLR.UB1 = 1, all GPDMA_CxBR1 fields are updated by the next LLI in the memory. If GPDMA_CxLLR.UB1 = 0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] different 0, this field is internally restored to the programmed value (infinite/continuous last LLI). if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI and data transfer.
0x40021398 C   FIELD 28w01 SDEC (rw): source address decrement
0x40021398 C   FIELD 29w01 DDEC (rw): destination address decrement
0x40021398 C   FIELD 30w01 BRSDEC (rw): Block repeat source address decrement Note: On top of this increment/decrement (depending on BRSDEC), GPDMA_CxSAR is in the same time also updated by the increment/decrement (depending on SDEC) of the GPDMA_CxTR3.SAO value, as it is done after any programmed burst transfer.
0x40021398 C   FIELD 31w01 BRDDEC (rw): Block repeat destination address decrement Note: On top of this increment/decrement (depending on BRDDEC), GPDMA_CxDAR is in the same time also updated by the increment/decrement (depending on DDEC) of the GPDMA_CxTR3.DAO value, as it is usually done at the end of each programmed burst transfer.
0x4002139C B  REGISTER SAR6: GPDMA channel 6 source address register
0x4002139C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x400213A0 B  REGISTER DAR6: GPDMA channel 6 destination address register
0x400213A0 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x400213A4 B  REGISTER TR36: GPDMA channel 6 transfer register 3
0x400213A4 C   FIELD 00w13 SAO (rw): source address offset increment The source address, pointed by GPDMA_CxSAR, is incremented or decremented (depending on GPDMA_CxBR1.SDEC) by this offset SAO[12:0] for each programmed source burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.SINC = 1). Note: A source address offset must be aligned with the programmed data width of a source burst (SAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and none transfer is issued. Note: When the source block size is not a multiple of the destination burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x400213A4 C   FIELD 16w13 DAO (rw): destination address offset increment The destination address, pointed by GPDMA_CxDAR, is incremented or decremented (depending on GPDMA_CxBR1.DDEC) by this offset DAO[12:0] for each programmed destination burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.DINC = 1). Note: A destination address offset must be aligned with the programmed data width of a destination burst (DAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x400213A8 B  REGISTER BR26: GPDMA channel 6 block register 2
0x400213A8 C   FIELD 00w16 BRSAO (rw): Block repeated source address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRSDEC) the current source address (GPDMA_CxSAR) at the end of a block transfer. A block repeated source address offset must be aligned with the programmed data width of a source burst (BRSAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: BRSAO[15:0] must be set to 0 in peripheral flow-control mode (if GPDMA_CxTR2.PFREQ = 1).
0x400213A8 C   FIELD 16w16 BRDAO (rw): Block repeated destination address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRDDEC) the current destination address (GPDMA_CxDAR) at the end of a block transfer. A block repeated destination address offset must be aligned with the programmed data width of a destination burst (BRDAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: BRDAO[15:0] must be set to 0 in peripheral flow-control mode (if GPDMA_CxTR2.PFREQ = 1).
0x400213CC B  REGISTER LLR6: GPDMA channel 6 alternate linked-list address register
0x400213CC C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x400213CC C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x400213CC C   FIELD 25w01 UB2 (rw): Update GPDMA_CxBR2 from memory This bit controls the update of GPDMA_CxBR2 from the memory during the link transfer.
0x400213CC C   FIELD 26w01 UT3 (rw): Update GPDMA_CxTR3 from memory This bit controls the update of GPDMA_CxTR3 from the memory during the link transfer.
0x400213CC C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x400213CC C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x400213CC C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x400213CC C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x400213CC C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x400213D0 B  CLUSTER CH2D7: 2D-addressing channel cluster
0x400213D0 B  REGISTER LBAR7: GPDMA channel 6 linked-list base address register
0x400213D0 C   FIELD 16w16 LBA (rw): linked-list base address of GPDMA channel x
0x400213DC B  REGISTER FCR7: GPDMA channel 6 flag clear register
0x400213DC C   FIELD 08w01 TCF (wo): transfer complete flag clear
0x400213DC C   FIELD 09w01 HTF (wo): half transfer flag clear
0x400213DC C   FIELD 10w01 DTEF (wo): data transfer error flag clear
0x400213DC C   FIELD 11w01 ULEF (wo): update link transfer error flag clear
0x400213DC C   FIELD 12w01 USEF (wo): user setting error flag clear
0x400213DC C   FIELD 13w01 SUSPF (wo): completed suspension flag clear
0x400213DC C   FIELD 14w01 TOF (wo): trigger overrun flag clear
0x400213E0 B  REGISTER SR7: GPDMA channel 6 status register
0x400213E0 C   FIELD 00w01 IDLEF (ro): idle flag This idle flag is deasserted by hardware when the channel is enabled (GPDMA_CxCR.EN = 1) with a valid channel configuration (no USEF to be immediately reported). This idle flag is asserted after hard reset or by hardware when the channel is back in idle state (in suspended or disabled state).
0x400213E0 C   FIELD 08w01 TCF (ro): transfer complete flag A transfer complete event is either a block transfer complete, a 2D/repeated block transfer complete, or a LLI transfer complete including the upload of the next LLI if any, or the full linked-list completion, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]).
0x400213E0 C   FIELD 09w01 HTF (ro): half transfer flag A half transfer event is either a half block transfer or a half 2D/repeated block transfer, depending on the transfer complete event mode (GPDMA_CxTR2.TCEM[1:0]). A half block transfer occurs when half of the bytes of the source block size (rounded up integer of GPDMA_CxBR1.BNDT[15:0]/2) has been transferred to the destination. A half 2D/repeated block transfer occurs when half of the repeated blocks (rounded up integer of (GPDMA_CxBR1.BRC[10:0]+1)/2)) has been transferred to the destination.
0x400213E0 C   FIELD 10w01 DTEF (ro): data transfer error flag
0x400213E0 C   FIELD 11w01 ULEF (ro): update link transfer error flag
0x400213E0 C   FIELD 12w01 USEF (ro): user setting error flag
0x400213E0 C   FIELD 13w01 SUSPF (ro): completed suspension flag
0x400213E0 C   FIELD 14w01 TOF (ro): trigger overrun flag
0x400213E0 C   FIELD 16w08 FIFOL (ro): monitored FIFO level Number of available write beats in the FIFO, in units of the programmed destination data width (see GPDMA_CxTR1.DDW_LOG2[1:0], in units of bytes, half-words, or words). Note: After having suspended an active transfer, the user may need to read FIFOL[7:0], additionally to GPDMA_CxBR1.BDNT[15:0] and GPDMA_CxBR1.BRC[10:0], to know how many data have been transferred to the destination. Before reading, the user may wait for the transfer to be suspended (GPDMA_CxSR.SUSPF = 1).
0x400213E4 B  REGISTER CR7: GPDMA channel 6 control register
0x400213E4 C   FIELD 00w01 EN (rw): enable Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 0. Else: this bit is deasserted by hardware when there is a transfer error (master bus error or user setting error) or when there is a channel transfer complete (channel ready to be configured, for example if LSM=1 at the end of a single execution of the LLI). Else, this bit can be asserted by software. Writing 0 into this EN bit is ignored.
0x400213E4 C   FIELD 01w01 RESET (wo): reset This bit is write only. Writing 0 has no impact. Writing 1 implies the reset of the following: the FIFO, the channel internal state, SUSP and EN bits (whatever is written receptively in bit 2 and bit 0). The reset is effective when the channel is in steady state, meaning one of the following: - active channel in suspended state (GPDMA_CxSR.SUSPF = 1 and GPDMA_CxSR.IDLEF = GPDMA_CxCR.EN = 1) - channel in disabled state (GPDMA_CxSR.IDLEF = 1 and GPDMA_CxCR.EN = 0). After writing a RESET, to continue using this channel, the user must explicitly reconfigure the channel including the hardware-modified configuration registers (GPDMA_CxBR1, GPDMA_CxSAR and GPDMA_CxDAR) before enabling again the channel (see the programming sequence in Figure 44).
0x400213E4 C   FIELD 02w01 SUSP (rw): suspend Writing 1 into the field RESET (bit 1) causes the hardware to de-assert this bit, whatever is written into this bit 2. Else: Software must write 1 in order to suspend an active channel (channel with an ongoing GPDMA transfer over its master ports). The software must write 0 in order to resume a suspended channel, following the programming sequence detailed in Figure 43.
0x400213E4 C   FIELD 08w01 TCIE (rw): transfer complete interrupt enable
0x400213E4 C   FIELD 09w01 HTIE (rw): half transfer complete interrupt enable
0x400213E4 C   FIELD 10w01 DTEIE (rw): data transfer error interrupt enable
0x400213E4 C   FIELD 11w01 ULEIE (rw): update link transfer error interrupt enable
0x400213E4 C   FIELD 12w01 USEIE (rw): user setting error interrupt enable
0x400213E4 C   FIELD 13w01 SUSPIE (rw): completed suspension interrupt enable
0x400213E4 C   FIELD 14w01 TOIE (rw): trigger overrun interrupt enable
0x400213E4 C   FIELD 16w01 LSM (rw): Link step mode First the (possible 1D/repeated) block transfer is executed as defined by the current internal register file until GPDMA_CxBR1.BNDT[15:0] = 0 and GPDMA_CxBR1.BRC[10:0] = 0. Secondly the next linked-list data structure is conditionally uploaded from memory as defined by GPDMA_CxLLR. Then channel execution is completed. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400213E4 C   FIELD 17w01 LAP (rw): linked-list allocated port This bit is used to allocate the master port for the update of the GPDMA linked-list registers from the memory. Note: This bit must be written when EN=0. This bit is read-only when EN=1.
0x400213E4 C   FIELD 22w02 PRIO (rw): priority level of the channel x GPDMA transfer versus others Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021410 B  REGISTER TR17: GPDMA channel 6 transfer register 1
0x40021410 C   FIELD 00w02 SDW_LOG2 (rw): binary logarithm of the source data width of a burst in bytes Setting a 8-byte data width causes a user setting error to be reported and no transfer is issued. A source block size must be a multiple of the source data width (GPDMA_CxBR1.BNDT[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and no transfer is issued. Note: A source burst transfer must have an aligned address with its data width (start address GPDMA_CxSAR[2:0] versus SDW_LOG2[1:0]). Otherwise, a user setting error is reported and none transfer is issued.
0x40021410 C   FIELD 03w01 SINC (rw): source incrementing burst The source address, pointed by GPDMA_CxSAR, is kept constant after a burst beat/single transfer or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021410 C   FIELD 04w06 SBL_1 (rw): source burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If SBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width SDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021410 C   FIELD 11w02 PAM (rw): padding/alignment mode If DDW_LOG2[1:0] = SDW_LOG2[1:0]: if the data width of a burst destination transfer is equal to the data width of a burst source transfer, these bits are ignored. Else, in the following enumerated values, the condition PAM_1 is when destination data width is higher that source data width, and the condition PAM_2 is when destination data width is higher than source data width. 1x: successive source data are FIFO queued and packed at the destination data width, in a left (LSB) to right (MSB) order (named little endian), before a destination transfer 1x: source data is FIFO queued and unpacked at the destination data width, to be transferred in a left (LSB) to right (MSB) order (named little endian) to the destination Note: If the transfer from the source peripheral is configured with peripheral flow-control mode (SWREQ = 0 and PFREQ = 1 and DREQ = 0), and if the destination data width the source data width, packing is not supported.
0x40021410 C   FIELD 13w01 SBX (rw): source byte exchange within the unaligned half-word of each source word If the source data width is shorter than a word, this bit is ignored. If the source data width is a word:
0x40021410 C   FIELD 14w01 SAP (rw): source allocated port This bit is used to allocate the master port for the source transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021410 C   FIELD 16w02 DDW_LOG2 (rw): binary logarithm of the destination data width of a burst, in bytes Setting a 8-byte data width causes a user setting error to be reported and none transfer is issued. Note: A destination burst transfer must have an aligned address with its data width (start address GPDMA_CxDAR[2:0] and address offset GPDMA_CxTR3.DAO[2:0], versus DDW_LOG2[1:0]). Otherwise a user setting error is reported and no transfer is issued.
0x40021410 C   FIELD 19w01 DINC (rw): destination incrementing burst The destination address, pointed by GPDMA_CxDAR, is kept constant after a burst beat/single transfer, or is incremented by the offset value corresponding to a contiguous data after a burst beat/single transfer.
0x40021410 C   FIELD 20w06 DBL_1 (rw): destination burst length minus 1, between 0 and 63 The burst length unit is one data named beat within a burst. If DBL_1[5:0] =0 , the burst can be named as single. Each data/beat has a width defined by the destination data width DDW_LOG2[1:0]. Note: If a burst transfer crossed a 1-Kbyte address boundary on a AHB transfer, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the AHB protocol. Note: If a burst transfer is of length greater than the FIFO size of the channel x, the GPDMA modifies and shortens the programmed burst into singles or bursts of lower length, to be compliant with the FIFO size. Transfer performance is lower, with GPDMA re-arbitration between effective and lower singles/bursts, but the data integrity is guaranteed.
0x40021410 C   FIELD 26w01 DBX (rw): destination byte exchange If the destination data size is a byte, this bit is ignored. If the destination data size is not a byte:
0x40021410 C   FIELD 27w01 DHX (rw): destination half-word exchange If the destination data size is shorter than a word, this bit is ignored. If the destination data size is a word:
0x40021410 C   FIELD 30w01 DAP (rw): destination allocated port This bit is used to allocate the master port for the destination transfer Note: This bit must be written when EN = 0. This bit is read-only when EN = 1.
0x40021414 B  REGISTER TR27: GPDMA channel 6 transfer register 2
0x40021414 C   FIELD 00w08 REQSEL (rw): GPDMA hardware request selection These bits are ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else, the selected hardware request is internally taken into account as per Section 14.3.4. The user must not assign a same input hardware request (same REQSEL[7:0] value) to different active GPDMA channels (GPDMA_CxCR.EN = 1 and GPDMA_CxTR2.SWREQ = 0 for these channels). GPDMA is not intended to hardware support the case of simultaneous enabled channels incorrectly configured with a same hardware peripheral request signal, and there is no user setting error reporting.
0x40021414 C   FIELD 09w01 SWREQ (rw): software request This bit is internally taken into account when GPDMA_CxCR.EN is asserted.
0x40021414 C   FIELD 10w01 DREQ (rw): destination hardware request This bit is ignored if channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer). Else: Note: If the channel x is activated (GPDMA_CxCR.EN is asserted) with SWREQ = 0 and PFREQ = 1 (peripheral hardware request with peripheral flow-control mode), any software assertion to this DREQ bit is ignored: in peripheral flow-control mode, only a peripheral-to-memory transfer is supported.
0x40021414 C   FIELD 11w01 BREQ (rw): Block hardware request If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else:
0x40021414 C   FIELD 12w01 PFREQ (rw): Hardware request in peripheral flow control mode Important: If a given channel x is not implemented with this feature, this bit is reserved and PFREQ is not present (see Section 14.3.2 for the list of the implemented channels with this feature. If the channel x is activated (GPDMA_CxCR.EN asserted) with SWREQ = 1 (software request for a memory-to-memory transfer), this bit is ignored. Else: Note: In peripheral flow control mode, there are the following restrictions: Note: no 2D/repeated block support (GPDMA_CxBR1.BRC[10:0] must be set to 0) Note: the peripheral must be set as the source of the transfer (DREQ = 0). Note: data packing to a wider destination width is not supported (if destination width source data width, GPDMA_CxTR1.PAM[1] must be set to 0). Note: GPDMA_CxBR1.BNDT[15:0] must be programmed as a multiple of the source (peripheral) burst size.
0x40021414 C   FIELD 14w02 TRIGM (rw): trigger mode These bits define the transfer granularity for its conditioning by the trigger.
0x40021414 C   FIELD 16w06 TRIGSEL (rw): trigger event input selection These bits select the trigger event input of the GPDMA transfer (as per Section 14.3.7), with an active trigger event if TRIGPOL[1:0] different 00.
0x40021414 C   FIELD 24w02 TRIGPOL (rw): trigger event polarity These bits define the polarity of the selected trigger event input defined by TRIGSEL[5:0].
0x40021414 C   FIELD 30w02 TCEM (rw): transfer complete event mode These bits define the transfer granularity for the transfer complete and half transfer complete events generation. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] = 0), then neither the complete transfer event nor the half transfer event is generated. Note: If the initial LLI 0 data transfer is null/void (i.e. directly programmed by the internal register file with GPDMA_CxBR1.BNDT[15:0] =0 ), then the half transfer event is not generated, and the transfer complete event is generated when is completed the loading of the LLI 1 .
0x40021418 B  REGISTER BR17: GPDMA channel 6 alternate block register 1
0x40021418 C   FIELD 00w16 BNDT (rw): block number of data bytes to transfer from the source Block size transferred from the source. When the channel is enabled, this field becomes read-only and is decremented, indicating the remaining number of data items in the current source block to be transferred. BNDT[15:0] is programmed in number of bytes, maximum source block size is 64 Kbytes -1. Once the last data transfer is completed (BNDT[15:0] = 0): - if GPDMA_CxLLR.UB1 = 1, this field is updated by the LLI in the memory. - if GPDMA_CxLLR.UB1 = 0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. - if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] different 0, this field is internally restored to the programmed value (infinite/continuous last LLI). - if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI data transfer. Note: A non-null source block size must be a multiple of the source data width (BNDT[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: When configured in packing mode (GPDMA_CxTR1.PAM[1]=1 and destination data width different from source data width), a non-null source block size must be a multiple of the destination data width (BNDT[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued.
0x40021418 C   FIELD 16w11 BRC (rw): Block repeat counter This field contains the number of repetitions of the current block (0 to 2047). When the channel is enabled, this field becomes read-only. After decrements, this field indicates the remaining number of blocks, excluding the current one. This counter is hardware decremented for each completed block transfer. Once the last block transfer is completed (BRC[10:0] = BNDT[15:0] = 0): If GPDMA_CxLLR.UB1 = 1, all GPDMA_CxBR1 fields are updated by the next LLI in the memory. If GPDMA_CxLLR.UB1 = 0 and if there is at least one not null Uxx update bit, this field is internally restored to the programmed value. if all GPDMA_CxLLR.Uxx = 0 and if GPDMA_CxLLR.LA[15:0] different 0, this field is internally restored to the programmed value (infinite/continuous last LLI). if GPDMA_CxLLR = 0, this field is kept as zero following the last LLI and data transfer.
0x40021418 C   FIELD 28w01 SDEC (rw): source address decrement
0x40021418 C   FIELD 29w01 DDEC (rw): destination address decrement
0x40021418 C   FIELD 30w01 BRSDEC (rw): Block repeat source address decrement Note: On top of this increment/decrement (depending on BRSDEC), GPDMA_CxSAR is in the same time also updated by the increment/decrement (depending on SDEC) of the GPDMA_CxTR3.SAO value, as it is done after any programmed burst transfer.
0x40021418 C   FIELD 31w01 BRDDEC (rw): Block repeat destination address decrement Note: On top of this increment/decrement (depending on BRDDEC), GPDMA_CxDAR is in the same time also updated by the increment/decrement (depending on DDEC) of the GPDMA_CxTR3.DAO value, as it is usually done at the end of each programmed burst transfer.
0x4002141C B  REGISTER SAR7: GPDMA channel 6 source address register
0x4002141C C   FIELD 00w32 SA (rw): source address This field is the pointer to the address from which the next data is read. During the channel activity, depending on the source addressing mode (GPDMA_CxTR1.SINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.SDW_LOG2[1:0]) after each burst source data, reflecting the next address from which data is read. During the channel activity, this address is updated after each completed source burst, consequently to: the programmed source burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.SINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.SBL_1[5:0] and GPDMA_CxTR1.SDW_LOG2[21:0] the additional source incremented/decremented offset value as programmed by GPDMA_CxBR1.SDEC and GPDMA_CxTR3.SAO[12:0]. once/if completed source block transfer, for a channel x with 2D addressing capability (x = 12 to 15). additional block repeat source incremented/decremented offset value as programmed by GPDMA_CxBR1.BRSDEC and GPDMA_CxBR2.BRSAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.USA = 1. Note: A source address must be aligned with the programmed data width of a source burst (SA[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued. Note: When the source block size is not a multiple of the source burst size and is a multiple of the source data width, the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x40021420 B  REGISTER DAR7: GPDMA channel 6 destination address register
0x40021420 C   FIELD 00w32 DA (rw): destination address This field is the pointer to the address from which the next data is written. During the channel activity, depending on the destination addressing mode (GPDMA_CxTR1.DINC), this field is kept fixed or incremented by the data width (GPDMA_CxTR1.DDW_LOG2[21:0]) after each burst destination data, reflecting the next address from which data is written. During the channel activity, this address is updated after each completed destination burst, consequently to: the programmed destination burst; either in fixed addressing mode or in contiguous-data incremented mode. If contiguously incremented (GPDMA_CxTR1.DINC = 1), then the additional address offset value is the programmed burst size, as defined by GPDMA_CxTR1.DBL_1[5:0] and GPDMA_CxTR1.DDW_LOG2[1:0] the additional destination incremented/decremented offset value as programmed by GPDMA_CxBR1.DDEC and GPDMA_CxTR3.DAO[12:0]. once/if completed destination block transfer, for a channel x with 2D addressing capability (x = 12 to 15), the additional block repeat destination incremented/decremented offset value as programmed by GPDMA_CxBR1.BRDDEC and GPDMA_CxBR2.BRDAO[15:0] In linked-list mode, after a LLI data transfer is completed, this register is automatically updated by the GPDMA from the memory, provided the LLI is set with GPDMA_CxLLR.UDA = 1. Note: A destination address must be aligned with the programmed data width of a destination burst (DA[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x40021424 B  REGISTER TR37: GPDMA channel 6 transfer register 3
0x40021424 C   FIELD 00w13 SAO (rw): source address offset increment The source address, pointed by GPDMA_CxSAR, is incremented or decremented (depending on GPDMA_CxBR1.SDEC) by this offset SAO[12:0] for each programmed source burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.SINC = 1). Note: A source address offset must be aligned with the programmed data width of a source burst (SAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and none transfer is issued. Note: When the source block size is not a multiple of the destination burst size and is a multiple of the source data width, then the last programmed source burst is not completed and is internally shorten to match the block size. In this case, the additional GPDMA_CxTR3.SAO[12:0] is not applied.
0x40021424 C   FIELD 16w13 DAO (rw): destination address offset increment The destination address, pointed by GPDMA_CxDAR, is incremented or decremented (depending on GPDMA_CxBR1.DDEC) by this offset DAO[12:0] for each programmed destination burst. This offset is not including and is added to the programmed burst size when the completed burst is addressed in incremented mode (GPDMA_CxTR1.DINC = 1). Note: A destination address offset must be aligned with the programmed data width of a destination burst (DAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else, a user setting error is reported and no transfer is issued.
0x40021428 B  REGISTER BR27: GPDMA channel 6 block register 2
0x40021428 C   FIELD 00w16 BRSAO (rw): Block repeated source address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRSDEC) the current source address (GPDMA_CxSAR) at the end of a block transfer. A block repeated source address offset must be aligned with the programmed data width of a source burst (BRSAO[2:0] versus GPDMA_CxTR1.SDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: BRSAO[15:0] must be set to 0 in peripheral flow-control mode (if GPDMA_CxTR2.PFREQ = 1).
0x40021428 C   FIELD 16w16 BRDAO (rw): Block repeated destination address offset For a channel with 2D addressing capability, this field is used to update (by addition or subtraction depending on GPDMA_CxBR1.BRDDEC) the current destination address (GPDMA_CxDAR) at the end of a block transfer. A block repeated destination address offset must be aligned with the programmed data width of a destination burst (BRDAO[2:0] versus GPDMA_CxTR1.DDW_LOG2[1:0]). Else a user setting error is reported and no transfer is issued. Note: BRDAO[15:0] must be set to 0 in peripheral flow-control mode (if GPDMA_CxTR2.PFREQ = 1).
0x4002144C B  REGISTER LLR7: GPDMA channel 6 alternate linked-list address register
0x4002144C C   FIELD 02w14 LA (rw): pointer (16-bit low-significant address) to the next linked-list data structure If UT1 = UT2 = UB1 = USA = UDA = ULL = 0 and if LA[15:20] = 0, the current LLI is the last one. The channel transfer is completed without any update of the linked-list GPDMA register file. Else, this field is the pointer to the memory address offset from which the next linked-list data structure is automatically fetched from, once the data transfer is completed, in order to conditionally update the linked-list GPDMA internal register file (GPDMA_CxCTR1, GPDMA_CxTR2, GPDMA_CxBR1, GPDMA_CxSAR, GPDMA_CxDAR and GPDMA_CxLLR). Note: The user must program the pointer to be 32-bit aligned. The two low-significant bits are write ignored.
0x4002144C C   FIELD 16w01 ULL (rw): Update GPDMA_CxLLR register from memory This bit is used to control the update of GPDMA_CxLLR from the memory during the link transfer.
0x4002144C C   FIELD 25w01 UB2 (rw): Update GPDMA_CxBR2 from memory This bit controls the update of GPDMA_CxBR2 from the memory during the link transfer.
0x4002144C C   FIELD 26w01 UT3 (rw): Update GPDMA_CxTR3 from memory This bit controls the update of GPDMA_CxTR3 from the memory during the link transfer.
0x4002144C C   FIELD 27w01 UDA (rw): Update GPDMA_CxDAR register from memory This bit is used to control the update of GPDMA_CxDAR from the memory during the link transfer.
0x4002144C C   FIELD 28w01 USA (rw): update GPDMA_CxSAR from memory This bit controls the update of GPDMA_CxSAR from the memory during the link transfer.
0x4002144C C   FIELD 29w01 UB1 (rw): Update GPDMA_CxBR1 from memory This bit controls the update of GPDMA_CxBR1 from the memory during the link transfer. If UB1 = 0 and if GPDMA_CxLLR different 0, the linked-list is not completed. GPDMA_CxBR1.BNDT[15:0] is then restored to the programmed value after data transfer is completed and before the link transfer.
0x4002144C C   FIELD 30w01 UT2 (rw): Update GPDMA_CxTR2 from memory This bit controls the update of GPDMA_CxTR2 from the memory during the link transfer.
0x4002144C C   FIELD 31w01 UT1 (rw): Update GPDMA_CxTR1 from memory This bit controls the update of GPDMA_CxTR1 from the memory during the link transfer.
0x40022000 A PERIPHERAL FLASH
0x40022000 B  REGISTER ACR: FLASH access control register
0x40022000 C   FIELD 00w04 LATENCY (rw): Read latency These bits are used to control the number of wait states used during read operations on both non-volatile memory banks. The application software has to program them to the correct value depending on the embedded Flash memory interface frequency and voltage conditions. ... Note: No check is performed by hardware to verify that the configuration is correct.
0x40022000 C   FIELD 04w02 WRHIGHFREQ (rw): Flash signal delay These bits are used to control the delay between non-volatile memory signals during programming operations. Application software has to program them to the correct value depending on the embedded Flash memory interface frequency. Please refer to for details. Note: No check is performed to verify that the configuration is correct. Two WRHIGHFREQ values can be selected for some frequencies.
0x40022000 C   FIELD 08w01 PRFTEN (rw): Prefetch enable. When bit value is modified, user must read back ACR register to be sure PRFTEN has been taken into account. Bits used to control the prefetch.
0x40022000 C   FIELD 09w01 S_PRFTEN (rw): Smart prefetch enable. When bit value is modified, user must read back ACR register to be sure S_PRFTEN has been taken into account. Bits used to control the prefetch functionality.
0x40022004 B  REGISTER NSKEYR: FLASH key register
0x40022004 C   FIELD 00w32 NSKEY (wo): Non-volatile memory configuration access unlock key
0x4002200C B  REGISTER OPTKEYR: FLASH option key register
0x4002200C C   FIELD 00w32 OPTKEY (wo): FLASH option bytes control access unlock key
0x40022018 B  REGISTER OPSR: FLASH operation status register
0x40022018 C   FIELD 00w20 ADDR_OP (ro): Interrupted operation address.
0x40022018 C   FIELD 22w01 BK_OP (ro): Interrupted operation bank It indicates which bank was concerned by operation.
0x40022018 C   FIELD 23w01 SYSF_OP (ro): Operation in system Flash memory interrupted Indicates that reset interrupted an ongoing operation in System Flash.
0x40022018 C   FIELD 24w01 OTP_OP (ro): OTP operation interrupted Indicates that reset interrupted an ongoing operation in OTP area.
0x40022018 C   FIELD 29w03 CODE_OP (ro): Flash memory operation code
0x4002201C B  REGISTER OPTCR: FLASH option control register
0x4002201C C   FIELD 00w01 OPTLOCK (rw): FLASH_OPTCR lock option configuration bit The OPTLOCK bit locks the FLASH_OPTCR register as well as all _PRG registers. The correct write sequence to FLASH_OPTKEYR register unlocks this bit. If a wrong sequence is executed, or the unlock sequence to FLASH_OPTKEYR is performed twice, this bit remains locked until next system reset. It is possible to set OPTLOCK by programming it to 1. When set to 1, a new unlock sequence is mandatory to unlock it. When OPTLOCK changes from 0 to 1, the others bits of FLASH_OPTCR register do not change.
0x4002201C C   FIELD 01w01 OPTSTRT (rw): Option byte start change option configuration bit OPTSTRT triggers an option byte change operation. The user can set OPTSTRT only when the OPTLOCK bit is cleared to 0. It's set only by Software and cleared when the option byte change is completed or an error occurs (PGSERR or OPTCHANGEERR). It's reseted at the same time as BSY bit. The user application cannot modify any FLASH_XXX_PRG embedded Flash memory register until the option change operation has been completed. Before setting this bit, the user has to write the required values in the FLASH_XXX_PRG registers. The FLASH_XXX_PRG registers are locked until the option byte change operation has been executed in non-volatile memory.
0x4002201C C   FIELD 31w01 SWAP_BANK (ro): Bank swapping option configuration bit SWAP_BANK controls whether Bank1 and Bank2 are swapped or not. This bit is loaded with the SWAP_BANK bit of FLASH_OPTSR_CUR register only after reset or POR.
0x40022020 B  REGISTER NSSR: FLASH non-secure status register
0x40022020 C   FIELD 00w01 BSY (ro): busy flag BSY flag indicates that a Flash memory is busy by an operation (write, erase, option byte change). It is set at the beginning of a Flash memory operation and cleared when the operation finishes or an error occurs.
0x40022020 C   FIELD 01w01 WBNE (ro): write buffer not empty flag WBNE flag is set when the embedded Flash memory is waiting for new data to complete the write buffer. In this state, the write buffer is not empty. WBNE is reset by hardware each time the write buffer is complete or the write buffer is emptied following one of the event below: the application software forces the write operation using FW bit in FLASH_NSCR the embedded Flash memory detects an error that involves data loss This bit cannot be reset by software writing 0 directly. To reset it, clear the write buffer by performing any of the above listed actions, or send the missing data.
0x40022020 C   FIELD 03w01 DBNE (ro): data buffer not empty flag DBNE flag is set when the embedded Flash memory interface is processing 6-bits ECC data in dedicated buffer. This bit cannot be set to 0 by software. The hardware resets it once the buffer is free.
0x40022020 C   FIELD 16w01 EOP (ro): end of operation flag EOP flag is set when a operation (program/erase) completes. An interrupt is generated if the EOPIE is set to 1. It is not necessary to reset EOP before starting a new operation. EOP bit is cleared by writing 1 to CLR_EOP bit in FLASH_NSCCR register.
0x40022020 C   FIELD 17w01 WRPERR (ro): write protection error flag WRPERR flag is raised when a protection error occurs during a program operation. An interrupt is also generated if the WRPERRIE is set to 1. Writing 1 to CLR_WRPERR bit in FLASH_NSCCR register clears WRPERR.
0x40022020 C   FIELD 18w01 PGSERR (ro): programming sequence error flag PGSERR flag is raised when a sequence error occurs. An interrupt is generated if the PGSERRIE bit is set to 1. Writing 1 to CLR_PGSERR bit in FLASH_NSCCR register clears PGSERR.
0x40022020 C   FIELD 19w01 STRBERR (ro): strobe error flag STRBERR flag is raised when a strobe error occurs (when the master attempts to write several times the same byte in the write buffer). An interrupt is generated if the STRBERRIE bit is set to 1. Writing 1 to CLR_STRBERR bit in FLASH_NSCCR register clears STRBERR.
0x40022020 C   FIELD 20w01 INCERR (ro): inconsistency error flag INCERR flag is raised when a inconsistency error occurs. An interrupt is generated if INCERRIE is set to 1. Writing 1 to CLR_INCERR bit in the FLASH_NSCCR register clears INCERR.
0x40022020 C   FIELD 23w01 OPTCHANGEERR (ro): Option byte change error flag OPTCHANGEERR flag indicates that an error occurred during an option byte change operation. When OPTCHANGEERR is set to 1, the option byte change operation did not successfully complete. An interrupt is generated when this flag is raised if the OPTCHANGEERRIE bit of FLASH_NSCR register is set to 1. Writing 1 to CLR_OPTCHANGEERR of register FLASH_CCR clears OPTCHANGEERR. Note: The OPTSTRT bit in FLASH_OPTCR cannot be set while OPTCHANGEERR is set.
0x40022024 B  REGISTER SECSR: FLASH secure status register
0x40022024 C   FIELD 00w01 SECBSY (ro): busy flag BSY flag indicates that a FLASH memory is busy by an operation (write, erase, option byte change, OBK operations, PUF operation). It is set at the beginning of a Flash memory operation and cleared when the operation finishes or an error occurs.
0x40022024 C   FIELD 01w01 SECWBNE (ro): write buffer not empty flag WBNE flag is set when the embedded Flash memory is waiting for new data to complete the write buffer. In this state, the write buffer is not empty. WBNE is reset by hardware each time the write buffer is complete or the write buffer is emptied following one of the event below: the application software forces the write operation using FW bit in FLASH_SECCR the embedded Flash memory detects an error that involves data loss This bit cannot be reset by writing 0 directly by software. To reset it, clear the write buffer by performing any of the above listed actions, or send the missing data.
0x40022024 C   FIELD 03w01 SECDBNE (ro): data buffer not empty flag DBNE flag is set when the embedded Flash memory interface is processing 6-bits ECC data in dedicated buffer. This bit cannot be set to 0 by software. The hardware resets it once the buffer is free.
0x40022024 C   FIELD 16w01 SECEOP (ro): end of operation flag EOP flag is set when a operation (program/erase) completes. An interrupt is generated if the EOPIE is set to. It is not necessary to reset EOP before starting a new operation. EOP bit is cleared by writing 1 to CLR_EOP bit in FLASH_SECCCR register.
0x40022024 C   FIELD 17w01 SECWRPERR (ro): write protection error flag WRPERR flag is raised when a protection error occurs during a program operation. An interrupt is also generated if the WRPERRIE is set to 1. Writing 1 to CLR_WRPERR bit in FLASH_SECCCR register clears WRPERR.
0x40022024 C   FIELD 18w01 SECPGSERR (ro): programming sequence error flag PGSERR flag is raised when a sequence error occurs. An interrupt is generated if the PGSERRIE bit is set to 1. Writing 1 to CLR_PGSERR bit in FLASH_SECCCR register clears PGSERR.
0x40022024 C   FIELD 19w01 SECSTRBERR (ro): strobe error flag STRBERR flag is raised when a strobe error occurs (when the master attempts to write several times the same byte in the write buffer). An interrupt is generated if the STRBERRIE bit is set to 1. Writing 1 to CLR_STRBERR bit in FLASH_SECCCR register clears STRBERR.
0x40022024 C   FIELD 20w01 SECINCERR (ro): inconsistency error flag INCERR flag is raised when a inconsistency error occurs. An interrupt is generated if INCERRIE is set to 1. Writing 1 to CLR_INCERR bit in the FLASH_SECCCR register clears INCERR.
0x40022028 B  REGISTER NSCR: FLASH Non Secure control register
0x40022028 C   FIELD 00w01 LOCK (rw): configuration lock bit This bit locks the FLASH_NSCR register. The correct write sequence to FLASH_NSKEYR register unlocks this bit. If a wrong sequence is executed, or if the unlock sequence to FLASH_NSKEYR is performed twice, this bit remains locked until the next system reset. LOCK can be set by programming it to 1. When set to 1, a new unlock sequence is mandatory to unlock it. When LOCK changes from 0 to 1, the other bits of FLASH_NSCR register do not change.
0x40022028 C   FIELD 01w01 PG (rw): programming control bit PG can be programmed only when LOCK is cleared to 0. PG allows programming in Bank1 and Bank2.
0x40022028 C   FIELD 02w01 SER (rw): sector erase request Setting SER bit to 1 requests a sector erase. SER can be programmed only when LOCK is cleared to 0. If MER and SER are also set, a PGSERR is raised.
0x40022028 C   FIELD 03w01 BER (rw): erase request Setting BER bit to 1 requests a bank erase operation (user Flash memory only). BER can be programmed only when LOCK is cleared to 0. If MER and SER are also set, a PGSERR is raised. Note: Write protection error is triggered when a bank erase is required and some sectors are protected.
0x40022028 C   FIELD 04w01 FW (rw): write forcing control bit FW forces a write operation even if the write buffer is not full. In this case all bits not written are set to 1 by hardware. FW can be programmed only when LOCK is cleared to 0. The embedded Flash memory resets FW when the corresponding operation has been acknowledged. Note: Using a force-write operation prevents the application from updating later the missing bits with something else than 1, because it is likely that it leads to permanent ECC error. Write forcing is effective only if the write buffer is not empty (in particular, FW does not start several write operations when the force-write operations are performed consecutively). Since there is just one write buffer, FW can force a write in bank1 or bank2.
0x40022028 C   FIELD 05w01 STRT (rw): erase start control bit STRT bit is used to start a sector erase or a bank erase operation. STRT can be programmed only when LOCK is cleared to 0. STRT is reset at the end of the operation or when an error occurs. It cannot be reseted by software.
0x40022028 C   FIELD 06w03 SNB (rw): sector erase selection number These bits are used to select the target sector for an erase operation (they are unused otherwise). SNB can be programmed only when LOCK is cleared to 0. ...
0x40022028 C   FIELD 15w01 MER (rw): Mass erase request Setting MER bit to 1 requests a mass erase operation (user Flash memory only). MER can be programmed only when LOCK is cleared to 0. If BER or SER are both set, a PGSERR is raised. Error is triggered when a mass erase is required and some sectors are protected.
0x40022028 C   FIELD 16w01 EOPIE (rw): end of operation interrupt control bit Setting EOPIE bit to 1 enables the generation of an interrupt at the end of a program or erase operation. EOPIE can be programmed only when LOCK is cleared to 0.
0x40022028 C   FIELD 17w01 WRPERRIE (rw): write protection error interrupt enable bit When WRPERRIE bit is set to 1, an interrupt is generated when a protection error occurs during a program operation. WRPERRIE can be programmed only when LOCK is cleared to 0.
0x40022028 C   FIELD 18w01 PGSERRIE (rw): programming sequence error interrupt enable bit When PGSERRIE bit is set to 1, an interrupt is generated when a sequence error occurs during a program operation. PGSERRIE can be programmed only when LOCK is cleared to 0.
0x40022028 C   FIELD 19w01 STRBERRIE (rw): strobe error interrupt enable bit When STRBERRIE bit is set to 1, an interrupt is generated when a strobe error occurs (the master programs several times the same byte in the write buffer) during a write operation. STRBERRIE can be programmed only when LOCK is cleared to 0.
0x40022028 C   FIELD 20w01 INCERRIE (rw): inconsistency error interrupt enable bit When INCERRIE bit is set to 1, an interrupt is generated when an inconsistency error occurs during a write operation. INCERRIE can be programmed only when LOCK is cleared to 0.
0x40022028 C   FIELD 23w01 OPTCHANGEERRIE (rw): Option byte change error interrupt enable bit OPTCHANGEERRIE bit controls if an interrupt has to be generated when an error occurs during an option byte change. This bit can be programmed only when LOCK bit is cleared to 0.
0x40022028 C   FIELD 31w01 BKSEL (rw): Bank selector bit BKSEL can only be programmed when LOCK is cleared to 0. The bit selects physical bank, SWAP_BANK setting is ignored.
0x40022030 B  REGISTER NSCCR: FLASH non-secure clear control register
0x40022030 C   FIELD 16w01 CLR_EOP (wo): EOP flag clear bit Setting this bit to 1 resets to 0 EOP flag in FLASH_NSSR register.
0x40022030 C   FIELD 17w01 CLR_WRPERR (wo): WRPERR flag clear bit Setting this bit to 1 resets to 0 WRPERR flag in FLASH_NSSR register.
0x40022030 C   FIELD 18w01 CLR_PGSERR (wo): PGSERR flag clear bit Setting this bit to 1 resets to 0 PGSERR flag in FLASH_NSSR register.
0x40022030 C   FIELD 19w01 CLR_STRBERR (wo): STRBERR flag clear bit Setting this bit to 1 resets to 0 STRBERR flag in FLASH_NSSR register.
0x40022030 C   FIELD 20w01 CLR_INCERR (wo): INCERR flag clear bit Setting this bit to 1 resets to 0 INCERR flag in FLASH_NSSR register.
0x40022030 C   FIELD 23w01 CLR_OPTCHANGEERR (wo): Clear the flag corresponding flag in FLASH_NSSR by writing this bit.
0x4002203C B  REGISTER PRIVCFGR: FLASH privilege configuration register
0x4002203C C   FIELD 01w01 NSPRIV (wo): privilege attribute for non secure registers
0x40022048 B  REGISTER HDPEXTR: FLASH HDP extension register
0x40022048 C   FIELD 00w03 HDP1_EXT (rw): HDP area extension in 8 Kbytes sectors in Bank1. Extension is added after the HDP1_END sector.
0x40022048 C   FIELD 16w03 HDP2_EXT (rw): HDP area extension in 8 Kbytes sectors in Bank2. Extension is added after the HDP2_END sector.
0x40022050 B  REGISTER OPTSR_CUR: FLASH option status register
0x40022050 C   FIELD 00w02 BOR_LEV (ro): Brownout level option status bit These bits reflects the power level that generates a system reset.
0x40022050 C   FIELD 02w01 BORH_EN (ro): Brownout high enable status bit
0x40022050 C   FIELD 03w01 IWDG_SW (ro): IWDG control mode option status bit
0x40022050 C   FIELD 04w01 WWDG_SW (ro): WWDG control mode option status bit
0x40022050 C   FIELD 05w01 NRST_SHDW (ro): Core domain Shutdown entry reset option status bit
0x40022050 C   FIELD 06w01 NRST_STOP (ro): Core domain Stop entry reset option status bit
0x40022050 C   FIELD 07w01 NRST_STDBY (ro): Core domain Standby entry reset option status bit
0x40022050 C   FIELD 08w08 PRODUCT_STATE (ro): Life state code (based on Hamming 8,4). More information in .
0x40022050 C   FIELD 16w01 IO_VDD_HSLV (ro): High-speed IO at low VDD voltage status bit. This bit can be set only with VDD below 2.5 V.
0x40022050 C   FIELD 17w01 IO_VDDIO2_HSLV (ro): High-speed IO at low VDDIO2 voltage status bit. This bit can be set only with VDDIO2 below 2.5 V.
0x40022050 C   FIELD 20w01 IWDG_STOP (ro): IWDG Stop mode freeze option status bit When set the independent watchdog IWDG is in system Stop mode.
0x40022050 C   FIELD 21w01 IWDG_STDBY (ro): IWDG Standby mode freeze option status bit When set the independent watchdog IWDG is frozen in system Standby mode.
0x40022050 C   FIELD 31w01 SWAP_BANK (ro): Bank swapping option status bit SWAP_BANK reflects whether Bank1 and Bank2 are swapped or not. SWAP_BANK is loaded to SWAP_BANK of FLASH_OPTCR after a reset.
0x40022054 B  REGISTER OPTSR_PRG: FLASH option status register
0x40022054 C   FIELD 00w02 BOR_LEV (rw): Brownout level option configuration bit These bits reflects the power level that generates a system reset.
0x40022054 C   FIELD 02w01 BORH_EN (rw): Brownout high enable configuration bit
0x40022054 C   FIELD 03w01 IWDG_SW (rw): IWDG control mode option configuration bit
0x40022054 C   FIELD 04w01 WWDG_SW (rw): WWDG control mode option configuration bit
0x40022054 C   FIELD 05w01 NRST_SHDW (rw): Core domain Shutdown entry reset option configuration bit
0x40022054 C   FIELD 06w01 NRST_STOP (rw): Core domain Stop entry reset option configuration bit
0x40022054 C   FIELD 07w01 NRST_STDBY (rw): Core domain Standby entry reset option configuration bit
0x40022054 C   FIELD 08w08 PRODUCT_STATE (rw): Life state code (based on Hamming 8,4). More information in .
0x40022054 C   FIELD 16w01 IO_VDD_HSLV (rw): High-speed IO at low VDD voltage configuration bit. This bit can be set only with VDD below 2.5 V.
0x40022054 C   FIELD 17w01 IO_VDDIO2_HSLV (rw): High-speed IO at low VDDIO2 voltage configuration bit. This bit can be set only with VDDIO2 below 2.5 V.
0x40022054 C   FIELD 20w01 IWDG_STOP (rw): IWDG Stop mode freeze option configuration bit When set the independent watchdog IWDG is in system Stop mode.
0x40022054 C   FIELD 21w01 IWDG_STDBY (rw): IWDG Standby mode freeze option configuration bit When set the independent watchdog IWDG is frozen in system Standby mode.
0x40022054 C   FIELD 31w01 SWAP_BANK (rw): Bank swapping option configuration bit SWAP_BANK option bit is used to configure whether the Bank1 and Bank2 are swapped or not. This bit is loaded with the SWAP_BANK bit of FLASH_OPTSR_CUR register after a reset.
0x40022070 B  REGISTER OPTSR2_CUR: FLASH option status register 2
0x40022070 C   FIELD 03w01 SRAM2_RST (ro): SRAM2 erase when system reset
0x40022070 C   FIELD 04w01 BKPRAM_ECC (ro): Backup RAM ECC detection and correction disable
0x40022070 C   FIELD 06w01 SRAM2_ECC (ro): SRAM2 ECC detection and correction disable
0x40022070 C   FIELD 09w01 SRAM1_RST (ro): SRAM1 erase upon system reset
0x40022070 C   FIELD 10w01 SRAM1_ECC (ro): SRAM1 ECC detection and correction disable
0x40022074 B  REGISTER OPTSR2_PRG: FLASH option status register 2
0x40022074 C   FIELD 03w01 SRAM2_RST (rw): SRAM2 erase when system reset
0x40022074 C   FIELD 04w01 BKPRAM_ECC (rw): Backup RAM ECC detection and correction disable
0x40022074 C   FIELD 06w01 SRAM2_ECC (rw): SRAM2 ECC detection and correction disable
0x40022074 C   FIELD 09w01 SRAM1_RST (rw): SRAM1 erase upon system reset
0x40022074 C   FIELD 10w01 SRAM1_ECC (rw): SRAM1 ECC detection and correction disable
0x40022080 B  REGISTER NSBOOTR_CUR: FLASH non-secure unique boot entry register
0x40022080 C   FIELD 00w08 NSBOOT_LOCK (ro): A field locking the values of SWAP_BANK, and NSBOOTADD settings.
0x40022080 C   FIELD 08w24 NSBOOTADD (ro): unique boot entry address These bits reflect the UBE address
0x40022084 B  REGISTER NSBOOTR_PRG: FLASH non-secure unique boot entry address
0x40022084 C   FIELD 00w08 NSBOOT_LOCK (rw): A field locking the values of SWAP_BANK, and NSBOOTADD settings.
0x40022084 C   FIELD 08w24 NSBOOTADD (rw): Unique boot entry address These bits allow configuring the BOOT address
0x40022090 B  REGISTER OTPBLR_CUR: FLASH non-secure OTP block lock
0x40022090 C   FIELD 00w32 LOCKBL (ro): OTP block lock Block n corresponds to OTP 16-bit word 32 x n to 32 x n + 31. LOCKBL[n] = 1 indicates that all OTP 16-bit words in OTP Block n are locked and attempt to program them results in WRPERR. LOCKBL[n] = 0 indicates that all OTP 16-bit words in OTP Block n are not locked. When one block is locked, it's not possible to remove the write protection. Also if not locked, it is not possible to erase OTP words.
0x40022094 B  REGISTER OTPBLR_PRG: FLASH non-secure OTP block lock
0x40022094 C   FIELD 00w32 LOCKBL (rw): OTP block lock Block n corresponds to OTP 16-bit word 32 x n to 32 x n + 31. LOCKBL[n] = 1 indicates that all OTP 16-bit words in OTP Block n are locked and attempt to program them results in WRPERR. LOCKBL[n] = 0 indicates that all OTP 16-bit words in OTP Block n are not locked. When one block is locked, it is not possible to remove the write protection. LOCKBL bits can be set if the corresponding bit in FLASH_OTPBLR_CUR is cleared.
0x400220C0 B  REGISTER PRIVBB1R: FLASH privilege register for bank 1
0x400220C0 C   FIELD 00w08 PRIVBB1 (rw): Privileged / unprivileged 8 Kbytes Flash Bank1 sector attribute (y = 0 to 7)
0x400220E8 B  REGISTER WRPSGN1R_CUR: FLASH write sector protection for Bank1
0x400220E8 C   FIELD 00w08 WRPSG1 (ro): Bank1 sector protection option status byte Setting WRPSG1 bits to 0 write protects the corresponding sectors in bank 1 (0: write protected; 1: not write protected)
0x400220EC B  REGISTER WRPSGN1R_PRG: FLASH write sector protection for Bank1
0x400220EC C   FIELD 00w08 WRPSG1 (rw): Bank1 sector protection option status byte Setting WRPSG1 bits to 0 write protects the corresponding sectors in bank 1 (0: write protected; 1: not write protected)
0x400220F8 B  REGISTER HDP1R_CUR: FLASH HDP Bank1 register
0x400220F8 C   FIELD 00w03 HDP1_STRT (ro): HDPL barrier start set in number of 8 Kbytes sectors
0x400220F8 C   FIELD 16w03 HDP1_END (ro): HDPL barrier end set in number of 8 Kbytes sectors
0x400220FC B  REGISTER HDP1R_PRG: FLASH HDP Bank1 register
0x400220FC C   FIELD 00w03 HDP1_STRT (ro): Bank 1 HDPL barrier start set in number of 8 Kbytes sectors
0x400220FC C   FIELD 16w03 HDP1_END (ro): Bank 1 HDPL barrier end set in number of 8 Kbytes sectors
0x40022100 B  REGISTER ECCCORR: FLASH Flash ECC correction register
0x40022100 C   FIELD 00w16 ADDR_ECC (ro): ECC error address When an ECC error occurs (for single correction) during a read operation, the ADDR_ECC contains the address that generated the error. ADDR_ECC is reset when the flag error is reset. The embedded Flash memory programs the address in this register only when no ECC error flags are set. This means that only the first address that generated an ECC error is saved. The address in ADDR_ECC is relative to the Flash memory area where the error occurred (user Flash memory, system Flash memory, data area, read-only/OTP area).
0x40022100 C   FIELD 22w01 BK_ECC (ro): ECC bank flag for corrected ECC error It indicates which bank is concerned by ECC error
0x40022100 C   FIELD 23w01 SYSF_ECC (ro): ECC flag for corrected ECC error in system FLASH It indicates if system Flash memory is concerned by ECC error.
0x40022100 C   FIELD 24w01 OTP_ECC (ro): OTP ECC error bit This bit is set to 1 when one single ECC correction occurred during the last successful read operation from the read-only/ OTP area. The address of the ECC error is available in ADDR_ECC bitfield.
0x40022100 C   FIELD 25w01 ECCCIE (rw): ECC single correction error interrupt enable bit When ECCCIE bit is set to 1, an interrupt is generated when an ECC single correction error occurs during a read operation.
0x40022100 C   FIELD 30w01 ECCC (rw): ECC correction set by hardware when single ECC error has been detected and corrected. Cleared by writing 1.
0x40022104 B  REGISTER ECCDETR: FLASH ECC detection register
0x40022104 C   FIELD 00w16 ADDR_ECC (ro): ECC error address When an ECC error occurs (double detection) during a read operation, the ADDR_ECC contains the address that generated the error. ADDR_ECC is reset when the flag error is reset. The embedded Flash memory programs the address in this register only when no ECC error flags are set. This means that only the first address that generated an double ECC error is saved. The address in ADDR_ECC is relative to the Flash memory area where the error occurred (user Flash memory, system Flash memory, data area, read-only/OTP area).
0x40022104 C   FIELD 22w01 BK_ECC (ro): ECC fail bank for double ECC Error It indicates which bank is concerned by ECC error
0x40022104 C   FIELD 23w01 SYSF_ECC (ro): ECC fail for double ECC error in system Flash memory It indicates if system Flash memory is concerned by ECC error.
0x40022104 C   FIELD 24w01 OTP_ECC (ro): OTP ECC error bit This bit is set to 1 when double ECC detection occurred during the last read operation from the read-only/ OTP area. The address of the ECC error is available in ADDR_ECC bit field.
0x40022104 C   FIELD 31w01 ECCD (rw): ECC detection set by hardware when two ECC error has been detected. When this bit is set, a NMI is generated. Cleared by writing 1. Needs to be cleared in order to detect subsequent double ECC errors.
0x40022108 B  REGISTER ECCDR: FLASH ECC data
0x40022108 C   FIELD 00w16 DATA_ECC (ro): ECC error data When an double detection ECC error occurs on special areas with 6-bit ECC on 16-bit of data (data area, read-only/OTP area), the failing data is read to this register. By checking if it is possible to determine whether the failure was on a real data, or due to access to uninitialized memory.
0x400221E8 B  REGISTER WRPSGN2R_CUR: FLASH write sector protection for Bank2
0x400221E8 C   FIELD 00w08 WRPSG2 (ro): Bank2 sector protection option status byte Setting WRPSG2 bits to 0 write protects the corresponding sectors in bank 2 (0: write protected; 1: not write protected)
0x400221EC B  REGISTER WRPSGN2R_PRG: FLASH write sector protection for Bank2
0x400221EC C   FIELD 00w08 WRPSG2 (rw): Bank2 sector protection option status byte Setting WRPSG2 bits to 0 write protects the corresponding sectors in bank 2 (0: write protected; 1: not write protected)
0x400221F8 B  REGISTER HDP2R_CUR: FLASH HDP Bank2 register
0x400221F8 C   FIELD 00w03 HDP2_STRT (ro): Bank 2 HDPL barrier start set in number of 8 Kbytes sectors
0x400221F8 C   FIELD 16w03 HDP2_END (ro): Bank 2 HDPL barrier end set in number of 8 Kbytes sectors
0x400221FC B  REGISTER HDP2R_PRG: FLASH HDP Bank2 register
0x400221FC C   FIELD 00w03 HDP2_STRT (rw): Bank 2 HDPL barrier start set in number of 8 Kbytes sectors
0x400221FC C   FIELD 16w03 HDP2_END (rw): Bank 2 HDPL barrier end set in number of 8 Kbytes sectors
0x40023000 A PERIPHERAL CRC
0x40023000 B  REGISTER DR: CRC data register
0x40023000 C   FIELD 00w32 DR (rw): Data register bits This register is used to write new data to the CRC calculator. It holds the previous CRC calculation result when it is read. If the data size is less than 32 bits, the least significant bits are used to write/read the correct value.
0x40023004 B  REGISTER IDR: CRC independent data register
0x40023004 C   FIELD 00w32 IDR (rw): General-purpose 32-bit data register bits These bits can be used as a temporary storage location for four bytes. This register is not affected by CRC resets generated by the RESET bit in the CRC_CR register
0x40023008 B  REGISTER CR: CRC control register
0x40023008 C   FIELD 00w01 RESET (rw): RESET bit This bit is set by software to reset the CRC calculation unit and set the data register to the value stored in the CRC_INIT register. This bit can only be set, it is automatically cleared by hardware
0x40023008 C   FIELD 03w02 POLYSIZE (rw): Polynomial size These bits control the size of the polynomial.
0x40023008 C   FIELD 05w02 REV_IN (rw): Reverse input data These bits control the reversal of the bit order of the input data
0x40023008 C   FIELD 07w01 REV_OUT (rw): Reverse output data This bit controls the reversal of the bit order of the output data.
0x40023010 B  REGISTER INIT: CRC initial value
0x40023010 C   FIELD 00w32 CRC_INIT (rw): Programmable initial CRC value This register is used to write the CRC initial value.
0x40023014 B  REGISTER POL: CRC polynomial
0x40023014 C   FIELD 00w32 POL (rw): Programmable polynomial This register is used to write the coefficients of the polynomial to be used for CRC calculation. If the polynomial size is less than 32 bits, the least significant bits have to be used to program the correct value.
0x40026000 A PERIPHERAL RAMCFG
0x40026000 B  REGISTER M1CR: RAMCFG memory 1 control register
0x40026000 C   FIELD 00w01 ECCE (rw): ECC enable. This bit reset value is defined by the user option bit configuration. When set, it can be cleared by software only after writing the unlock sequence in the RAMCFG_MxECCKEYR register. Note: This bit is reserved and must be kept at reset value in SRAM1 control register.
0x40026000 C   FIELD 04w01 ALE (rw): Address latch enable Note: This bit is reserved and must be kept at reset value in SRAM1 control register.
0x40026000 C   FIELD 08w01 SRAMER (rw): SRAM erase This bit can be set by software only after writing the unlock sequence in the ERASEKEY field of the RAMCFG_MxERKEYR register. Setting this bit starts the SRAM erase. This bit is automatically cleared by hardware at the end of the erase operation.
0x40026008 B  REGISTER M1ISR: RAMCFG memory interrupt status register
0x40026008 C   FIELD 00w01 SEDC (ro): ECC single error detected and corrected Note: This bit is reserved and must be kept at reset value in SRAM1 interrupt status register.
0x40026008 C   FIELD 01w01 DED (ro): ECC double error detected Note: This bit is reserved and must be kept at reset value in SRAM1 interrupt status register.
0x40026008 C   FIELD 08w01 SRAMBUSY (ro): SRAM busy with erase operation Note: Depending on the SRAM, the erase operation can be performed due to software request, system reset if the option bit is enabled, tamper detection or product state regression. Refer to Table 9: Internal SRAMs features.
0x40026028 B  REGISTER M1ERKEYR: RAMCFG memory 1 erase key register
0x40026028 C   FIELD 00w08 ERASEKEY (wo): Erase write protection key The following steps are required to unlock the write protection of the SRAMER bit in the RAMCFG_MxCR register. 1) Write 0xCA into ERASEKEY[7:0]. 2) Write 0x53 into ERASEKEY[7:0]. Note: Writing a wrong key reactivates the write protection.
0x40026040 B  REGISTER M2CR: RAMCFG memory 2 control register
0x40026040 C   FIELD 00w01 ECCE (rw): ECC enable. This bit reset value is defined by the user option bit configuration. When set, it can be cleared by software only after writing the unlock sequence in the RAMCFG_MxECCKEYR register. Note: This bit is reserved and must be kept at reset value in SRAM1 control register.
0x40026040 C   FIELD 04w01 ALE (rw): Address latch enable Note: This bit is reserved and must be kept at reset value in SRAM1 control register.
0x40026040 C   FIELD 08w01 SRAMER (rw): SRAM erase This bit can be set by software only after writing the unlock sequence in the ERASEKEY field of the RAMCFG_MxERKEYR register. Setting this bit starts the SRAM erase. This bit is automatically cleared by hardware at the end of the erase operation.
0x40026044 B  REGISTER M2IER: RAMCFG memory 2 interrupt enable register
0x40026044 C   FIELD 00w01 SEIE (rw): ECC single error interrupt enable
0x40026044 C   FIELD 01w01 DEIE (rw): ECC double error interrupt enable
0x40026044 C   FIELD 03w01 ECCNMI (rw): Double error NMI This bit is set by software and cleared only by a global RAMCFG reset. Note: if ECCNMI is set, the RAMCFG maskable interrupt is not generated whatever DEIE bit value.
0x40026048 B  REGISTER M2ISR: RAMCFG memory interrupt status register
0x40026048 C   FIELD 00w01 SEDC (ro): ECC single error detected and corrected Note: This bit is reserved and must be kept at reset value in SRAM1 interrupt status register.
0x40026048 C   FIELD 01w01 DED (ro): ECC double error detected Note: This bit is reserved and must be kept at reset value in SRAM1 interrupt status register.
0x40026048 C   FIELD 08w01 SRAMBUSY (ro): SRAM busy with erase operation Note: Depending on the SRAM, the erase operation can be performed due to software request, system reset if the option bit is enabled, tamper detection or product state regression. Refer to Table 9: Internal SRAMs features.
0x4002604C B  REGISTER M2SEAR: RAMCFG memory 2 ECC single error address register
0x4002604C C   FIELD 00w32 ESEA (ro): ECC single error address When the ALE bit is set in the RAMCFG_MxCR register, this field is updated with the address corresponding to the ECC single error.
0x40026050 B  REGISTER M2DEAR: RAMCFG memory 2 ECC double error address register
0x40026050 C   FIELD 00w32 EDEA (ro): ECC double error address When the ALE bit is set in the RAMCFG_MxCR register, this field is updated with the address corresponding to the ECC double error.
0x40026054 B  REGISTER M2ICR: RAMCFG memory 2 interrupt clear register 2
0x40026054 C   FIELD 00w01 CSEDC (rw): Clear ECC single error detected and corrected Writing 1 to this flag clears the SEDC bit in the RAMCFG_MxISR register. Reading this flag returns the SEDC value.
0x40026054 C   FIELD 01w01 CDED (rw): Clear ECC double error detected Writing 1 to this flag clears the DED bit in the RAMCFG_MxISR register. Reading this flag returns the DED value.
0x40026058 B  REGISTER M2WPR1: RAMCFG memory 2 write protection register 1
0x40026058 C   FIELD 00w01 P0WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 01w01 P1WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 02w01 P2WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 03w01 P3WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 04w01 P4WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 05w01 P5WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 06w01 P6WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 07w01 P7WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 08w01 P8WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 09w01 P9WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 10w01 P10WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 11w01 P11WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 12w01 P12WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 13w01 P13WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 14w01 P14WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026058 C   FIELD 15w01 P15WP (rw): SRAM2 1-Kbyte page y write protection These bits are set by software and cleared only by a global RAMCFG reset.
0x40026064 B  REGISTER M2ECCKEYR: RAMCFG memory 2 ECC key register
0x40026064 C   FIELD 00w08 ECCKEY (wo): ECC write protection key The following steps are required to unlock the write protection of the ECCE bit in the RAMCFG_MxCR register. 1) Write 0xAE into ECCKEY[7:0]. 2) Write 0x75 into ECCKEY[7:0]. Note: Writing a wrong key reactivates the write protection.
0x40026068 B  REGISTER M2ERKEYR: RAMCFG memory 2 erase key register
0x40026068 C   FIELD 00w08 ERASEKEY (wo): Erase write protection key The following steps are required to unlock the write protection of the SRAMER bit in the RAMCFG_MxCR register. 1) Write 0xCA into ERASEKEY[7:0]. 2) Write 0x53 into ERASEKEY[7:0]. Note: Writing a wrong key reactivates the write protection.
0x40026084 B  REGISTER M3IER: RAMCFG memory 3 interrupt enable register
0x40026084 C   FIELD 00w01 SEIE (rw): ECC single error interrupt enable
0x40026084 C   FIELD 01w01 DEIE (rw): ECC double error interrupt enable
0x40026084 C   FIELD 03w01 ECCNMI (rw): Double error NMI This bit is set by software and cleared only by a global RAMCFG reset. Note: if ECCNMI is set, the RAMCFG maskable interrupt is not generated whatever DEIE bit value.
0x40026088 B  REGISTER M3ISR: RAMCFG memory interrupt status register
0x40026088 C   FIELD 00w01 SEDC (ro): ECC single error detected and corrected Note: This bit is reserved and must be kept at reset value in SRAM1 interrupt status register.
0x40026088 C   FIELD 01w01 DED (ro): ECC double error detected Note: This bit is reserved and must be kept at reset value in SRAM1 interrupt status register.
0x40026088 C   FIELD 08w01 SRAMBUSY (ro): SRAM busy with erase operation Note: Depending on the SRAM, the erase operation can be performed due to software request, system reset if the option bit is enabled, tamper detection or product state regression. Refer to Table 9: Internal SRAMs features.
0x4002608C B  REGISTER M3SEAR: RAMCFG memory 3 ECC single error address register
0x4002608C C   FIELD 00w32 ESEA (ro): ECC single error address When the ALE bit is set in the RAMCFG_MxCR register, this field is updated with the address corresponding to the ECC single error.
0x40026090 B  REGISTER M3DEAR: RAMCFG memory 3 ECC double error address register
0x40026090 C   FIELD 00w32 EDEA (ro): ECC double error address When the ALE bit is set in the RAMCFG_MxCR register, this field is updated with the address corresponding to the ECC double error.
0x40026094 B  REGISTER M3ICR: RAMCFG memory 3 interrupt clear register 3
0x40026094 C   FIELD 00w01 CSEDC (rw): Clear ECC single error detected and corrected Writing 1 to this flag clears the SEDC bit in the RAMCFG_MxISR register. Reading this flag returns the SEDC value.
0x40026094 C   FIELD 01w01 CDED (rw): Clear ECC double error detected Writing 1 to this flag clears the DED bit in the RAMCFG_MxISR register. Reading this flag returns the DED value.
0x400260A4 B  REGISTER M3ECCKEYR: RAMCFG memory 3 ECC key register
0x400260A4 C   FIELD 00w08 ECCKEY (wo): ECC write protection key The following steps are required to unlock the write protection of the ECCE bit in the RAMCFG_MxCR register. 1) Write 0xAE into ECCKEY[7:0]. 2) Write 0x75 into ECCKEY[7:0]. Note: Writing a wrong key reactivates the write protection.
0x400260A8 B  REGISTER M3ERKEYR: RAMCFG memory 3 erase key register
0x400260A8 C   FIELD 00w08 ERASEKEY (wo): Erase write protection key The following steps are required to unlock the write protection of the SRAMER bit in the RAMCFG_MxCR register. 1) Write 0xCA into ERASEKEY[7:0]. 2) Write 0x53 into ERASEKEY[7:0]. Note: Writing a wrong key reactivates the write protection.
0x400260E8 B  REGISTER M4ERKEYR: RAMCFG memory 4 erase key register
0x400260E8 C   FIELD 00w08 ERASEKEY (wo): Erase write protection key The following steps are required to unlock the write protection of the SRAMER bit in the RAMCFG_MxCR register. 1) Write 0xCA into ERASEKEY[7:0]. 2) Write 0x53 into ERASEKEY[7:0]. Note: Writing a wrong key reactivates the write protection.
0x40026100 B  REGISTER M5CR: RAMCFG memory 5 control register
0x40026100 C   FIELD 00w01 ECCE (rw): ECC enable. This bit reset value is defined by the user option bit configuration. When set, it can be cleared by software only after writing the unlock sequence in the RAMCFG_MxECCKEYR register. Note: This bit is reserved and must be kept at reset value in SRAM1 control register.
0x40026100 C   FIELD 04w01 ALE (rw): Address latch enable Note: This bit is reserved and must be kept at reset value in SRAM1 control register.
0x40026100 C   FIELD 08w01 SRAMER (rw): SRAM erase This bit can be set by software only after writing the unlock sequence in the ERASEKEY field of the RAMCFG_MxERKEYR register. Setting this bit starts the SRAM erase. This bit is automatically cleared by hardware at the end of the erase operation.
0x40026104 B  REGISTER M5IER: RAMCFG memory 5 interrupt enable register
0x40026104 C   FIELD 00w01 SEIE (rw): ECC single error interrupt enable
0x40026104 C   FIELD 01w01 DEIE (rw): ECC double error interrupt enable
0x40026104 C   FIELD 03w01 ECCNMI (rw): Double error NMI This bit is set by software and cleared only by a global RAMCFG reset. Note: if ECCNMI is set, the RAMCFG maskable interrupt is not generated whatever DEIE bit value.
0x40026108 B  REGISTER M5ISR: RAMCFG memory interrupt status register
0x40026108 C   FIELD 00w01 SEDC (ro): ECC single error detected and corrected Note: This bit is reserved and must be kept at reset value in SRAM1 interrupt status register.
0x40026108 C   FIELD 01w01 DED (ro): ECC double error detected Note: This bit is reserved and must be kept at reset value in SRAM1 interrupt status register.
0x40026108 C   FIELD 08w01 SRAMBUSY (ro): SRAM busy with erase operation Note: Depending on the SRAM, the erase operation can be performed due to software request, system reset if the option bit is enabled, tamper detection or product state regression. Refer to Table 9: Internal SRAMs features.
0x4002610C B  REGISTER M5SEAR: RAMCFG memory 5 ECC single error address register
0x4002610C C   FIELD 00w32 ESEA (ro): ECC single error address When the ALE bit is set in the RAMCFG_MxCR register, this field is updated with the address corresponding to the ECC single error.
0x40026110 B  REGISTER M5DEAR: RAMCFG memory 5 ECC double error address register
0x40026110 C   FIELD 00w32 EDEA (ro): ECC double error address When the ALE bit is set in the RAMCFG_MxCR register, this field is updated with the address corresponding to the ECC double error.
0x40026114 B  REGISTER M5ICR: RAMCFG memory 5 interrupt clear register 5
0x40026114 C   FIELD 00w01 CSEDC (rw): Clear ECC single error detected and corrected Writing 1 to this flag clears the SEDC bit in the RAMCFG_MxISR register. Reading this flag returns the SEDC value.
0x40026114 C   FIELD 01w01 CDED (rw): Clear ECC double error detected Writing 1 to this flag clears the DED bit in the RAMCFG_MxISR register. Reading this flag returns the DED value.
0x40026124 B  REGISTER M5ECCKEYR: RAMCFG memory 5 ECC key register
0x40026124 C   FIELD 00w08 ECCKEY (wo): ECC write protection key The following steps are required to unlock the write protection of the ECCE bit in the RAMCFG_MxCR register. 1) Write 0xAE into ECCKEY[7:0]. 2) Write 0x75 into ECCKEY[7:0]. Note: Writing a wrong key reactivates the write protection.
0x40026128 B  REGISTER M5ERKEYR: RAMCFG memory 5 erase key register
0x40026128 C   FIELD 00w08 ERASEKEY (wo): Erase write protection key The following steps are required to unlock the write protection of the SRAMER bit in the RAMCFG_MxCR register. 1) Write 0xCA into ERASEKEY[7:0]. 2) Write 0x53 into ERASEKEY[7:0]. Note: Writing a wrong key reactivates the write protection.
0x40030400 A PERIPHERAL ICACHE
0x40030400 B  REGISTER CR: ICACHE control register
0x40030400 C   FIELD 00w01 EN (rw): enable
0x40030400 C   FIELD 01w01 CACHEINV (wo): cache invalidation Set by software and cleared by hardware when the BUSYF flag is set (during cache maintenance operation). Writing 0 has no effect.
0x40030400 C   FIELD 02w01 WAYSEL (rw): cache associativity mode selection This bit allows user to choose ICACHE set-associativity. It can be written by software only when cache is disabled (EN = 0).
0x40030400 C   FIELD 16w01 HITMEN (rw): hit monitor enable
0x40030400 C   FIELD 17w01 MISSMEN (rw): miss monitor enable
0x40030400 C   FIELD 18w01 HITMRST (rw): hit monitor reset
0x40030400 C   FIELD 19w01 MISSMRST (rw): miss monitor reset
0x40030404 B  REGISTER SR: ICACHE status register
0x40030404 C   FIELD 00w01 BUSYF (ro): busy flag
0x40030404 C   FIELD 01w01 BSYENDF (ro): busy end flag
0x40030404 C   FIELD 02w01 ERRF (ro): cache error flag
0x40030408 B  REGISTER IER: ICACHE interrupt enable register
0x40030408 C   FIELD 01w01 BSYENDIE (rw): interrupt enable on busy end Set by software to enable an interrupt generation at the end of a cache invalidate operation.
0x40030408 C   FIELD 02w01 ERRIE (rw): interrupt enable on cache error Set by software to enable an interrupt generation in case of cache functional error (cacheable write access)
0x4003040C B  REGISTER FCR: ICACHE flag clear register
0x4003040C C   FIELD 01w01 CBSYENDF (wo): clear busy end flag Set by software.
0x4003040C C   FIELD 02w01 CERRF (wo): clear cache error flag Set by software.
0x40030410 B  REGISTER HMONR: ICACHE hit monitor register
0x40030410 C   FIELD 00w32 HITMON (ro): cache hit monitor counter
0x40030414 B  REGISTER MMONR: ICACHE miss monitor register
0x40030414 C   FIELD 00w16 MISSMON (ro): cache miss monitor counter
0x40032400 A PERIPHERAL GTZC1
0x40032420 B  REGISTER TZSC_PRIVCFGR1: GTZC1 TZSC privilege configuration register 1
0x40032420 C   FIELD 00w01 TIM2PRIV (rw): privileged access mode for TIM2
0x40032420 C   FIELD 01w01 TIM3PRIV (rw): privileged access mode for TIM3
0x40032420 C   FIELD 04w01 TIM6PRIV (rw): privileged access mode for TIM6
0x40032420 C   FIELD 05w01 TIM7PRIV (rw): privileged access mode for TIM7
0x40032420 C   FIELD 09w01 WWDGPRIV (rw): privileged access mode for WWDG
0x40032420 C   FIELD 10w01 IWDGPRIV (rw): privileged access mode for IWDG
0x40032420 C   FIELD 11w01 SPI2PRIV (rw): privileged access mode for SPI2
0x40032420 C   FIELD 12w01 SPI3PRIV (rw): privileged access mode for SPI3
0x40032420 C   FIELD 13w01 USART2PRIV (rw): privileged access mode for USART2
0x40032420 C   FIELD 14w01 USART3PRIV (rw): privileged access mode for USART3
0x40032420 C   FIELD 17w01 I2C1PRIV (rw): privileged access mode for I2C1
0x40032420 C   FIELD 18w01 I2C2PRIV (rw): privileged access mode for I2C2
0x40032420 C   FIELD 19w01 I3C1PRIV (rw): privileged access mode for I3C1
0x40032420 C   FIELD 20w01 CRSPRIV (rw): privileged access mode for CRS
0x40032420 C   FIELD 25w01 DAC1PRIV (rw): privileged access mode for DAC1
0x40032420 C   FIELD 30w01 DTSPRIV (rw): privileged access mode for DTS
0x40032420 C   FIELD 31w01 LPTIM2PRIV (rw): privileged access mode for LPTIM2
0x40032424 B  REGISTER TZSC_PRIVCFGR2: GTZC1 TZSC privilege configuration register 2
0x40032424 C   FIELD 00w01 FDCAN1PRIV (rw): privileged access mode for FDCAN1
0x40032424 C   FIELD 03w01 OPAMPPRIV (rw): privileged access mode for OPAMP
0x40032424 C   FIELD 04w01 COMPPRIV (rw): privileged access mode for COMP
0x40032424 C   FIELD 08w01 TIM1PRIV (rw): privileged access mode for TIM1
0x40032424 C   FIELD 09w01 SPI1PRIV (rw): privileged access mode for SPI1
0x40032424 C   FIELD 11w01 USART1PRIV (rw): privileged access mode for USART1
0x40032424 C   FIELD 19w01 USBFSPRIV (rw): privileged access mode for USBSF
0x40032424 C   FIELD 25w01 LPUART1PRIV (rw): privileged access mode for LPUART
0x40032424 C   FIELD 28w01 LPTIM1PRIV (rw): privileged access mode for LPTIM1
0x40032428 B  REGISTER TZSC_PRIVCFGR3: GTZC1 TZSC privilege configuration register 3
0x40032428 C   FIELD 02w01 I3C2PRIV (rw): privileged access mode for I3C2
0x40032428 C   FIELD 08w01 CRCPRIV (rw): privileged access mode for CRC
0x40032428 C   FIELD 12w01 ICACHEPRIV (rw): privileged access mode for ICACHE
0x40032428 C   FIELD 14w01 ADC1PRIV (rw): privileged access mode for ADC1
0x40032428 C   FIELD 17w01 HASHPRIV (rw): privileged access mode for HASH
0x40032428 C   FIELD 18w01 RNGPRIV (rw): privileged access mode for RNG
0x40032428 C   FIELD 26w01 RAMCFGPRIV (rw): privileged access mode for RAMSCFG
0x40032470 B  REGISTER TZSC_MPCWM4ACFGR: GTZC1 TZSC BKPSRAM sub-region A watermark configuration register
0x40032470 C   FIELD 00w01 SREN (rw): Sub-region z enable
0x40032470 C   FIELD 01w01 SRLOCK (rw): Sub-region z lock This bit, once set, can be cleared only by a system reset.
0x40032470 C   FIELD 09w01 PRIV (rw): Privileged sub-region z This bit is taken into account only if SREN is set.
0x40032474 B  REGISTER TZSC_MPCWM4AR: GTZC1 TZSC BKPSRAM sub-region A watermark register
0x40032474 C   FIELD 00w11 SUBA_START (rw): Start of sub-region A This field defines the address offset of the sub-region A, to be multiplied by the granularity defined in Table 16.
0x40032474 C   FIELD 16w12 SUBA_LENGTH (rw): Length of sub-region A This field defines the length of the sub-region A, to be multiplied by the granularity defined in Table 16. When SUBA_START + SUBA_LENGTH is higher than the maximum size allowed for the memory, a saturation of SUBA_LENGTH is applied automatically. If SUBA_LENGTH = 0, the sub-region A is disabled (SREN bit in GTZC1_TZSC_MPCMWACFGR is cleared).
0x40032478 B  REGISTER TZSC_MPCWM4BCFGR: GTZC1 TZSC BKPSRAM sub-region B watermark configuration register
0x40032478 C   FIELD 00w01 SREN (rw): Sub-region z enable
0x40032478 C   FIELD 01w01 SRLOCK (rw): Sub-region z lock This bit, once set, can be cleared only by a system reset.
0x40032478 C   FIELD 09w01 PRIV (rw): Privileged sub-region z This bit is taken into account only if SREN is set.
0x4003247C B  REGISTER TZSC_MPCWM4BR: GTZC1 TZSC BKPSRAM sub-region B watermark register
0x4003247C C   FIELD 00w11 SUBB_START (rw): Start of sub-region B This field defines the address offset of the sub-region B, to be multiplied by the granularity defined in Table 16.
0x4003247C C   FIELD 16w12 SUBB_LENGTH (rw): Length of sub-region B This field defines the length of the sub-region B, to be multiplied by the granularity defined in Table 16. When SUBB_START + SUBB_LENGTH is higher than the maximum size allowed for the memory, a saturation of SUBB_LENGTH is applied automatically. If SUBB_LENGTH = 0, the sub-region B is disabled (SREN bit in GTZC1_TZSC_MPCMWBCFGR is cleared).
0x40032600 B  REGISTER MPCBB1_PRIVCFGR0: SRAM1 MPCBB privileged configuration for super-block 0 register
0x40032600 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032600 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 B  REGISTER MPCBB1_PRIVCFGR1: SRAM1 MPCBB privileged configuration for super-block 1 register
0x40032604 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032604 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 B  REGISTER MPCBB1_PRIVCFGR2: SRAM1 MPCBB privileged configuration for super-block 2 register
0x40032608 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032608 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C B  REGISTER MPCBB1_PRIVCFGR3: SRAM1 MPCBB privileged configuration for super-block 3 register
0x4003260C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003260C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 B  REGISTER MPCBB1_PRIVCFGR4: SRAM1 MPCBB privileged configuration for super-block 4 register
0x40032610 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032610 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 B  REGISTER MPCBB1_PRIVCFGR5: SRAM1 MPCBB privileged configuration for super-block 5 register
0x40032614 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032614 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 B  REGISTER MPCBB1_PRIVCFGR6: SRAM1 MPCBB privileged configuration for super-block 6 register
0x40032618 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032618 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C B  REGISTER MPCBB1_PRIVCFGR7: SRAM1 MPCBB privileged configuration for super-block 7 register
0x4003261C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003261C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 B  REGISTER MPCBB1_PRIVCFGR8: SRAM1 MPCBB privileged configuration for super-block 8 register
0x40032620 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032620 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 B  REGISTER MPCBB1_PRIVCFGR9: SRAM1 MPCBB privileged configuration for super-block 9 register
0x40032624 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032624 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 B  REGISTER MPCBB1_PRIVCFGR10: SRAM1 MPCBB privileged configuration for super-block 10 register
0x40032628 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032628 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C B  REGISTER MPCBB1_PRIVCFGR11: SRAM1 MPCBB privileged configuration for super-block 11 register
0x4003262C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003262C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 B  REGISTER MPCBB1_PRIVCFGR12: SRAM1 MPCBB privileged configuration for super-block 12 register
0x40032630 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032630 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 B  REGISTER MPCBB1_PRIVCFGR13: SRAM1 MPCBB privileged configuration for super-block 13 register
0x40032634 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032634 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 B  REGISTER MPCBB1_PRIVCFGR14: SRAM1 MPCBB privileged configuration for super-block 14 register
0x40032638 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032638 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C B  REGISTER MPCBB1_PRIVCFGR15: SRAM1 MPCBB privileged configuration for super-block 15 register
0x4003263C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003263C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 B  REGISTER MPCBB1_PRIVCFGR16: SRAM1 MPCBB privileged configuration for super-block 16 register
0x40032640 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032640 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 B  REGISTER MPCBB1_PRIVCFGR17: SRAM1 MPCBB privileged configuration for super-block 17 register
0x40032644 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032644 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 B  REGISTER MPCBB1_PRIVCFGR18: SRAM1 MPCBB privileged configuration for super-block 18 register
0x40032648 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032648 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C B  REGISTER MPCBB1_PRIVCFGR19: SRAM1 MPCBB privileged configuration for super-block 19 register
0x4003264C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003264C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 B  REGISTER MPCBB1_PRIVCFGR20: SRAM1 MPCBB privileged configuration for super-block 20 register
0x40032650 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032650 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 B  REGISTER MPCBB1_PRIVCFGR21: SRAM1 MPCBB privileged configuration for super-block 21 register
0x40032654 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032654 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 B  REGISTER MPCBB1_PRIVCFGR22: SRAM1 MPCBB privileged configuration for super-block 22 register
0x40032658 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032658 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C B  REGISTER MPCBB1_PRIVCFGR23: SRAM1 MPCBB privileged configuration for super-block 23 register
0x4003265C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003265C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 B  REGISTER MPCBB1_PRIVCFGR24: SRAM1 MPCBB privileged configuration for super-block 24 register
0x40032660 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032660 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 B  REGISTER MPCBB1_PRIVCFGR25: SRAM1 MPCBB privileged configuration for super-block 25 register
0x40032664 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032664 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 B  REGISTER MPCBB1_PRIVCFGR26: SRAM1 MPCBB privileged configuration for super-block 26 register
0x40032668 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032668 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C B  REGISTER MPCBB1_PRIVCFGR27: SRAM1 MPCBB privileged configuration for super-block 27 register
0x4003266C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003266C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 B  REGISTER MPCBB1_PRIVCFGR28: SRAM1 MPCBB privileged configuration for super-block 28 register
0x40032670 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032670 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 B  REGISTER MPCBB1_PRIVCFGR29: SRAM1 MPCBB privileged configuration for super-block 29 register
0x40032674 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032674 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 B  REGISTER MPCBB1_PRIVCFGR30: SRAM1 MPCBB privileged configuration for super-block 30 register
0x40032678 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032678 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C B  REGISTER MPCBB1_PRIVCFGR31: SRAM1 MPCBB privileged configuration for super-block 31 register
0x4003267C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x4003267C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 B  REGISTER MPCBB2_PRIVCFGR0: SRAM2 MPCBB privileged configuration for super-block 0 register
0x40032A00 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A00 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 B  REGISTER MPCBB2_PRIVCFGR1: SRAM2 MPCBB privileged configuration for super-block 1 register
0x40032A04 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A04 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 B  REGISTER MPCBB2_PRIVCFGR2: SRAM2 MPCBB privileged configuration for super-block 2 register
0x40032A08 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A08 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C B  REGISTER MPCBB2_PRIVCFGR3: SRAM2 MPCBB privileged configuration for super-block 3 register
0x40032A0C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A0C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 B  REGISTER MPCBB2_PRIVCFGR4: SRAM2 MPCBB privileged configuration for super-block 4 register
0x40032A10 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A10 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 B  REGISTER MPCBB2_PRIVCFGR5: SRAM2 MPCBB privileged configuration for super-block 5 register
0x40032A14 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A14 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 B  REGISTER MPCBB2_PRIVCFGR6: SRAM2 MPCBB privileged configuration for super-block 6 register
0x40032A18 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A18 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C B  REGISTER MPCBB2_PRIVCFGR7: SRAM2 MPCBB privileged configuration for super-block 7 register
0x40032A1C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A1C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 B  REGISTER MPCBB2_PRIVCFGR8: SRAM2 MPCBB privileged configuration for super-block 8 register
0x40032A20 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A20 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 B  REGISTER MPCBB2_PRIVCFGR9: SRAM2 MPCBB privileged configuration for super-block 9 register
0x40032A24 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A24 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 B  REGISTER MPCBB2_PRIVCFGR10: SRAM2 MPCBB privileged configuration for super-block 10 register
0x40032A28 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A28 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C B  REGISTER MPCBB2_PRIVCFGR11: SRAM2 MPCBB privileged configuration for super-block 11 register
0x40032A2C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A2C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 B  REGISTER MPCBB2_PRIVCFGR12: SRAM2 MPCBB privileged configuration for super-block 12 register
0x40032A30 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A30 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 B  REGISTER MPCBB2_PRIVCFGR13: SRAM2 MPCBB privileged configuration for super-block 13 register
0x40032A34 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A34 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 B  REGISTER MPCBB2_PRIVCFGR14: SRAM2 MPCBB privileged configuration for super-block 14 register
0x40032A38 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A38 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C B  REGISTER MPCBB2_PRIVCFGR15: SRAM2 MPCBB privileged configuration for super-block 15 register
0x40032A3C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A3C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 B  REGISTER MPCBB2_PRIVCFGR16: SRAM2 MPCBB privileged configuration for super-block 16 register
0x40032A40 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A40 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 B  REGISTER MPCBB2_PRIVCFGR17: SRAM2 MPCBB privileged configuration for super-block 17 register
0x40032A44 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A44 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 B  REGISTER MPCBB2_PRIVCFGR18: SRAM2 MPCBB privileged configuration for super-block 18 register
0x40032A48 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A48 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C B  REGISTER MPCBB2_PRIVCFGR19: SRAM2 MPCBB privileged configuration for super-block 19 register
0x40032A4C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A4C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 B  REGISTER MPCBB2_PRIVCFGR20: SRAM2 MPCBB privileged configuration for super-block 20 register
0x40032A50 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A50 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 B  REGISTER MPCBB2_PRIVCFGR21: SRAM2 MPCBB privileged configuration for super-block 21 register
0x40032A54 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A54 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 B  REGISTER MPCBB2_PRIVCFGR22: SRAM2 MPCBB privileged configuration for super-block 22 register
0x40032A58 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A58 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C B  REGISTER MPCBB2_PRIVCFGR23: SRAM2 MPCBB privileged configuration for super-block 23 register
0x40032A5C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A5C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 B  REGISTER MPCBB2_PRIVCFGR24: SRAM2 MPCBB privileged configuration for super-block 24 register
0x40032A60 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A60 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 B  REGISTER MPCBB2_PRIVCFGR25: SRAM2 MPCBB privileged configuration for super-block 25 register
0x40032A64 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A64 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 B  REGISTER MPCBB2_PRIVCFGR26: SRAM2 MPCBB privileged configuration for super-block 26 register
0x40032A68 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A68 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C B  REGISTER MPCBB2_PRIVCFGR27: SRAM2 MPCBB privileged configuration for super-block 27 register
0x40032A6C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A6C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 B  REGISTER MPCBB2_PRIVCFGR28: SRAM2 MPCBB privileged configuration for super-block 28 register
0x40032A70 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A70 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 B  REGISTER MPCBB2_PRIVCFGR29: SRAM2 MPCBB privileged configuration for super-block 29 register
0x40032A74 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A74 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 B  REGISTER MPCBB2_PRIVCFGR30: SRAM2 MPCBB privileged configuration for super-block 30 register
0x40032A78 C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A78 C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C B  REGISTER MPCBB2_PRIVCFGR31: SRAM2 MPCBB privileged configuration for super-block 31 register
0x40032A7C C   FIELD 00w01 PRIV0 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 01w01 PRIV1 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 02w01 PRIV2 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 03w01 PRIV3 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 04w01 PRIV4 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 05w01 PRIV5 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 06w01 PRIV6 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 07w01 PRIV7 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 08w01 PRIV8 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 09w01 PRIV9 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 10w01 PRIV10 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 11w01 PRIV11 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 12w01 PRIV12 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 13w01 PRIV13 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 14w01 PRIV14 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 15w01 PRIV15 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 16w01 PRIV16 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 17w01 PRIV17 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 18w01 PRIV18 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 19w01 PRIV19 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 20w01 PRIV20 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 21w01 PRIV21 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 22w01 PRIV22 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 23w01 PRIV23 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 24w01 PRIV24 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 25w01 PRIV25 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 26w01 PRIV26 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 27w01 PRIV27 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 28w01 PRIV28 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 29w01 PRIV29 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 30w01 PRIV30 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x40032A7C C   FIELD 31w01 PRIV31 (rw): Privileged configuration for block y, belonging to super-block x (y = 31 to 0).
0x42020000 A PERIPHERAL GPIOA
0x42020000 B  REGISTER MODER: GPIO port mode register
0x42020000 C   FIELD 00w02 MODE0 (rw): Port x configuration pin 0
0x42020000 C   FIELD 02w02 MODE1 (rw): Port x configuration pin 1
0x42020000 C   FIELD 04w02 MODE2 (rw): Port x configuration pin 2
0x42020000 C   FIELD 06w02 MODE3 (rw): Port x configuration pin 3
0x42020000 C   FIELD 08w02 MODE4 (rw): Port x configuration pin 4
0x42020000 C   FIELD 10w02 MODE5 (rw): Port x configuration pin 5
0x42020000 C   FIELD 12w02 MODE6 (rw): Port x configuration pin 6
0x42020000 C   FIELD 14w02 MODE7 (rw): Port x configuration pin 7
0x42020000 C   FIELD 16w02 MODE8 (rw): Port x configuration pin 8
0x42020000 C   FIELD 18w02 MODE9 (rw): Port x configuration pin 9
0x42020000 C   FIELD 20w02 MODE10 (rw): Port x configuration pin 10
0x42020000 C   FIELD 22w02 MODE11 (rw): Port x configuration pin 11
0x42020000 C   FIELD 24w02 MODE12 (rw): Port x configuration pin 12
0x42020000 C   FIELD 26w02 MODE13 (rw): Port x configuration pin 13
0x42020000 C   FIELD 28w02 MODE14 (rw): Port x configuration pin 14
0x42020000 C   FIELD 30w02 MODE15 (rw): Port x configuration pin 15
0x42020004 B  REGISTER OTYPER: GPIO port output type register
0x42020004 C   FIELD 00w01 OT0 (rw): Port x configuration pin 0
0x42020004 C   FIELD 01w01 OT1 (rw): Port x configuration pin 1
0x42020004 C   FIELD 02w01 OT2 (rw): Port x configuration pin 2
0x42020004 C   FIELD 03w01 OT3 (rw): Port x configuration pin 3
0x42020004 C   FIELD 04w01 OT4 (rw): Port x configuration pin 4
0x42020004 C   FIELD 05w01 OT5 (rw): Port x configuration pin 5
0x42020004 C   FIELD 06w01 OT6 (rw): Port x configuration pin 6
0x42020004 C   FIELD 07w01 OT7 (rw): Port x configuration pin 7
0x42020004 C   FIELD 08w01 OT8 (rw): Port x configuration pin 8
0x42020004 C   FIELD 09w01 OT9 (rw): Port x configuration pin 9
0x42020004 C   FIELD 10w01 OT10 (rw): Port x configuration pin 10
0x42020004 C   FIELD 11w01 OT11 (rw): Port x configuration pin 11
0x42020004 C   FIELD 12w01 OT12 (rw): Port x configuration pin 12
0x42020004 C   FIELD 13w01 OT13 (rw): Port x configuration pin 13
0x42020004 C   FIELD 14w01 OT14 (rw): Port x configuration pin 14
0x42020004 C   FIELD 15w01 OT15 (rw): Port x configuration pin 15
0x42020008 B  REGISTER OSPEEDR: GPIO port output speed register
0x42020008 C   FIELD 00w02 OSPEED0 (rw): Port x configuration pin 0
0x42020008 C   FIELD 02w02 OSPEED1 (rw): Port x configuration pin 1
0x42020008 C   FIELD 04w02 OSPEED2 (rw): Port x configuration pin 2
0x42020008 C   FIELD 06w02 OSPEED3 (rw): Port x configuration pin 3
0x42020008 C   FIELD 08w02 OSPEED4 (rw): Port x configuration pin 4
0x42020008 C   FIELD 10w02 OSPEED5 (rw): Port x configuration pin 5
0x42020008 C   FIELD 12w02 OSPEED6 (rw): Port x configuration pin 6
0x42020008 C   FIELD 14w02 OSPEED7 (rw): Port x configuration pin 7
0x42020008 C   FIELD 16w02 OSPEED8 (rw): Port x configuration pin 8
0x42020008 C   FIELD 18w02 OSPEED9 (rw): Port x configuration pin 9
0x42020008 C   FIELD 20w02 OSPEED10 (rw): Port x configuration pin 10
0x42020008 C   FIELD 22w02 OSPEED11 (rw): Port x configuration pin 11
0x42020008 C   FIELD 24w02 OSPEED12 (rw): Port x configuration pin 12
0x42020008 C   FIELD 26w02 OSPEED13 (rw): Port x configuration pin 13
0x42020008 C   FIELD 28w02 OSPEED14 (rw): Port x configuration pin 14
0x42020008 C   FIELD 30w02 OSPEED15 (rw): Port x configuration pin 15
0x4202000C B  REGISTER PUPDR: GPIO port pull-up/pull-down register
0x4202000C C   FIELD 00w02 PUPD0 (rw): Port x configuration pin 0
0x4202000C C   FIELD 02w02 PUPD1 (rw): Port x configuration pin 1
0x4202000C C   FIELD 04w02 PUPD2 (rw): Port x configuration pin 2
0x4202000C C   FIELD 06w02 PUPD3 (rw): Port x configuration pin 3
0x4202000C C   FIELD 08w02 PUPD4 (rw): Port x configuration pin 4
0x4202000C C   FIELD 10w02 PUPD5 (rw): Port x configuration pin 5
0x4202000C C   FIELD 12w02 PUPD6 (rw): Port x configuration pin 6
0x4202000C C   FIELD 14w02 PUPD7 (rw): Port x configuration pin 7
0x4202000C C   FIELD 16w02 PUPD8 (rw): Port x configuration pin 8
0x4202000C C   FIELD 18w02 PUPD9 (rw): Port x configuration pin 9
0x4202000C C   FIELD 20w02 PUPD10 (rw): Port x configuration pin 10
0x4202000C C   FIELD 22w02 PUPD11 (rw): Port x configuration pin 11
0x4202000C C   FIELD 24w02 PUPD12 (rw): Port x configuration pin 12
0x4202000C C   FIELD 26w02 PUPD13 (rw): Port x configuration pin 13
0x4202000C C   FIELD 28w02 PUPD14 (rw): Port x configuration pin 14
0x4202000C C   FIELD 30w02 PUPD15 (rw): Port x configuration pin 15
0x42020010 B  REGISTER IDR: GPIO port input data register
0x42020010 C   FIELD 00w01 ID0 (ro): Port input data pin 0
0x42020010 C   FIELD 01w01 ID1 (ro): Port input data pin 1
0x42020010 C   FIELD 02w01 ID2 (ro): Port input data pin 2
0x42020010 C   FIELD 03w01 ID3 (ro): Port input data pin 3
0x42020010 C   FIELD 04w01 ID4 (ro): Port input data pin 4
0x42020010 C   FIELD 05w01 ID5 (ro): Port input data pin 5
0x42020010 C   FIELD 06w01 ID6 (ro): Port input data pin 6
0x42020010 C   FIELD 07w01 ID7 (ro): Port input data pin 7
0x42020010 C   FIELD 08w01 ID8 (ro): Port input data pin 8
0x42020010 C   FIELD 09w01 ID9 (ro): Port input data pin 9
0x42020010 C   FIELD 10w01 ID10 (ro): Port input data pin 10
0x42020010 C   FIELD 11w01 ID11 (ro): Port input data pin 11
0x42020010 C   FIELD 12w01 ID12 (ro): Port input data pin 12
0x42020010 C   FIELD 13w01 ID13 (ro): Port input data pin 13
0x42020010 C   FIELD 14w01 ID14 (ro): Port input data pin 14
0x42020010 C   FIELD 15w01 ID15 (ro): Port input data pin 15
0x42020014 B  REGISTER ODR: GPIO port output data register
0x42020014 C   FIELD 00w01 OD0 (rw): Port output data pin 0
0x42020014 C   FIELD 01w01 OD1 (rw): Port output data pin 1
0x42020014 C   FIELD 02w01 OD2 (rw): Port output data pin 2
0x42020014 C   FIELD 03w01 OD3 (rw): Port output data pin 3
0x42020014 C   FIELD 04w01 OD4 (rw): Port output data pin 4
0x42020014 C   FIELD 05w01 OD5 (rw): Port output data pin 5
0x42020014 C   FIELD 06w01 OD6 (rw): Port output data pin 6
0x42020014 C   FIELD 07w01 OD7 (rw): Port output data pin 7
0x42020014 C   FIELD 08w01 OD8 (rw): Port output data pin 8
0x42020014 C   FIELD 09w01 OD9 (rw): Port output data pin 9
0x42020014 C   FIELD 10w01 OD10 (rw): Port output data pin 10
0x42020014 C   FIELD 11w01 OD11 (rw): Port output data pin 11
0x42020014 C   FIELD 12w01 OD12 (rw): Port output data pin 12
0x42020014 C   FIELD 13w01 OD13 (rw): Port output data pin 13
0x42020014 C   FIELD 14w01 OD14 (rw): Port output data pin 14
0x42020014 C   FIELD 15w01 OD15 (rw): Port output data pin 15
0x42020018 B  REGISTER BSRR: GPIO port bit set/reset register
0x42020018 C   FIELD 00w01 BS0 (wo): Port x set pin 0
0x42020018 C   FIELD 01w01 BS1 (wo): Port x set pin 1
0x42020018 C   FIELD 02w01 BS2 (wo): Port x set pin 2
0x42020018 C   FIELD 03w01 BS3 (wo): Port x set pin 3
0x42020018 C   FIELD 04w01 BS4 (wo): Port x set pin 4
0x42020018 C   FIELD 05w01 BS5 (wo): Port x set pin 5
0x42020018 C   FIELD 06w01 BS6 (wo): Port x set pin 6
0x42020018 C   FIELD 07w01 BS7 (wo): Port x set pin 7
0x42020018 C   FIELD 08w01 BS8 (wo): Port x set pin 8
0x42020018 C   FIELD 09w01 BS9 (wo): Port x set pin 9
0x42020018 C   FIELD 10w01 BS10 (wo): Port x set pin 10
0x42020018 C   FIELD 11w01 BS11 (wo): Port x set pin 11
0x42020018 C   FIELD 12w01 BS12 (wo): Port x set pin 12
0x42020018 C   FIELD 13w01 BS13 (wo): Port x set pin 13
0x42020018 C   FIELD 14w01 BS14 (wo): Port x set pin 14
0x42020018 C   FIELD 15w01 BS15 (wo): Port x set pin 15
0x42020018 C   FIELD 16w01 BR0 (wo): Port x reset pin 0
0x42020018 C   FIELD 17w01 BR1 (wo): Port x reset pin 1
0x42020018 C   FIELD 18w01 BR2 (wo): Port x reset pin 2
0x42020018 C   FIELD 19w01 BR3 (wo): Port x reset pin 3
0x42020018 C   FIELD 20w01 BR4 (wo): Port x reset pin 4
0x42020018 C   FIELD 21w01 BR5 (wo): Port x reset pin 5
0x42020018 C   FIELD 22w01 BR6 (wo): Port x reset pin 6
0x42020018 C   FIELD 23w01 BR7 (wo): Port x reset pin 7
0x42020018 C   FIELD 24w01 BR8 (wo): Port x reset pin 8
0x42020018 C   FIELD 25w01 BR9 (wo): Port x reset pin 9
0x42020018 C   FIELD 26w01 BR10 (wo): Port x reset pin 10
0x42020018 C   FIELD 27w01 BR11 (wo): Port x reset pin 11
0x42020018 C   FIELD 28w01 BR12 (wo): Port x reset pin 12
0x42020018 C   FIELD 29w01 BR13 (wo): Port x reset pin 13
0x42020018 C   FIELD 30w01 BR14 (wo): Port x reset pin 14
0x42020018 C   FIELD 31w01 BR15 (wo): Port x reset pin 15
0x4202001C B  REGISTER LCKR: GPIO port configuration lock register
0x4202001C C   FIELD 00w01 LCK0 (rw): Port x lock pin 0
0x4202001C C   FIELD 01w01 LCK1 (rw): Port x lock pin 1
0x4202001C C   FIELD 02w01 LCK2 (rw): Port x lock pin 2
0x4202001C C   FIELD 03w01 LCK3 (rw): Port x lock pin 3
0x4202001C C   FIELD 04w01 LCK4 (rw): Port x lock pin 4
0x4202001C C   FIELD 05w01 LCK5 (rw): Port x lock pin 5
0x4202001C C   FIELD 06w01 LCK6 (rw): Port x lock pin 6
0x4202001C C   FIELD 07w01 LCK7 (rw): Port x lock pin 7
0x4202001C C   FIELD 08w01 LCK8 (rw): Port x lock pin 8
0x4202001C C   FIELD 09w01 LCK9 (rw): Port x lock pin 9
0x4202001C C   FIELD 10w01 LCK10 (rw): Port x lock pin 10
0x4202001C C   FIELD 11w01 LCK11 (rw): Port x lock pin 11
0x4202001C C   FIELD 12w01 LCK12 (rw): Port x lock pin 12
0x4202001C C   FIELD 13w01 LCK13 (rw): Port x lock pin 13
0x4202001C C   FIELD 14w01 LCK14 (rw): Port x lock pin 14
0x4202001C C   FIELD 15w01 LCK15 (rw): Port x lock pin 15
0x4202001C C   FIELD 16w01 LCKK (rw): Lock key This bit can be read any time. It can only be modified using the lock key write sequence. - LOCK key write sequence: WR LCKR[16] = 1 + LCKR[15:0] WR LCKR[16] = 0 + LCKR[15:0] WR LCKR[16] = 1 + LCKR[15:0] - LOCK key read RD LCKR[16] = 1 (this read operation is optional but it confirms that the lock is active) Note: During the LOCK key write sequence, the value of LCK[15:0] must not change. Any error in the lock sequence aborts the LOCK. After the first LOCK sequence on any bit of the port, any read access on the LCKK bit returns 1 until the next MCU reset or peripheral reset.
0x42020020 B  REGISTER AFRL: GPIO alternate function low register
0x42020020 C   FIELD 00w04 AFREL0 (rw): Alternate function selection for port x I/O pin y (y = 7 to 0) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020020 C   FIELD 04w04 AFREL1 (rw): Alternate function selection for port x I/O pin y (y = 7 to 0) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020020 C   FIELD 08w04 AFREL2 (rw): Alternate function selection for port x I/O pin y (y = 7 to 0) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020020 C   FIELD 12w04 AFREL3 (rw): Alternate function selection for port x I/O pin y (y = 7 to 0) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020020 C   FIELD 16w04 AFREL4 (rw): Alternate function selection for port x I/O pin y (y = 7 to 0) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020020 C   FIELD 20w04 AFREL5 (rw): Alternate function selection for port x I/O pin y (y = 7 to 0) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020020 C   FIELD 24w04 AFREL6 (rw): Alternate function selection for port x I/O pin y (y = 7 to 0) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020020 C   FIELD 28w04 AFREL7 (rw): Alternate function selection for port x I/O pin y (y = 7 to 0) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020024 B  REGISTER AFRH: GPIO alternate function high register
0x42020024 C   FIELD 00w04 AFREL8 (=GPIOA.AFRL.AFR%s) (rw): Alternate function selection for port x I/O pin y (y = 15 to 8) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020024 C   FIELD 04w04 AFREL9 (=GPIOA.AFRL.AFR%s) (rw): Alternate function selection for port x I/O pin y (y = 15 to 8) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020024 C   FIELD 08w04 AFREL10 (=GPIOA.AFRL.AFR%s) (rw): Alternate function selection for port x I/O pin y (y = 15 to 8) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020024 C   FIELD 12w04 AFREL11 (=GPIOA.AFRL.AFR%s) (rw): Alternate function selection for port x I/O pin y (y = 15 to 8) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020024 C   FIELD 16w04 AFREL12 (=GPIOA.AFRL.AFR%s) (rw): Alternate function selection for port x I/O pin y (y = 15 to 8) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020024 C   FIELD 20w04 AFREL13 (=GPIOA.AFRL.AFR%s) (rw): Alternate function selection for port x I/O pin y (y = 15 to 8) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020024 C   FIELD 24w04 AFREL14 (=GPIOA.AFRL.AFR%s) (rw): Alternate function selection for port x I/O pin y (y = 15 to 8) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020024 C   FIELD 28w04 AFREL15 (=GPIOA.AFRL.AFR%s) (rw): Alternate function selection for port x I/O pin y (y = 15 to 8) These bits are written by software to configure alternate function I/Os. Note: The bitfield is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020028 B  REGISTER BRR: GPIO port bit reset register
0x42020028 C   FIELD 00w01 BR0 (wo): Port x reset pin 0
0x42020028 C   FIELD 01w01 BR1 (wo): Port x reset pin 1
0x42020028 C   FIELD 02w01 BR2 (wo): Port x reset pin 2
0x42020028 C   FIELD 03w01 BR3 (wo): Port x reset pin 3
0x42020028 C   FIELD 04w01 BR4 (wo): Port x reset pin 4
0x42020028 C   FIELD 05w01 BR5 (wo): Port x reset pin 5
0x42020028 C   FIELD 06w01 BR6 (wo): Port x reset pin 6
0x42020028 C   FIELD 07w01 BR7 (wo): Port x reset pin 7
0x42020028 C   FIELD 08w01 BR8 (wo): Port x reset pin 8
0x42020028 C   FIELD 09w01 BR9 (wo): Port x reset pin 9
0x42020028 C   FIELD 10w01 BR10 (wo): Port x reset pin 10
0x42020028 C   FIELD 11w01 BR11 (wo): Port x reset pin 11
0x42020028 C   FIELD 12w01 BR12 (wo): Port x reset pin 12
0x42020028 C   FIELD 13w01 BR13 (wo): Port x reset pin 13
0x42020028 C   FIELD 14w01 BR14 (wo): Port x reset pin 14
0x42020028 C   FIELD 15w01 BR15 (wo): Port x reset pin 15
0x4202002C B  REGISTER HSLVR: GPIO high-speed low-voltage register
0x4202002C C   FIELD 00w01 HSLV0 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 01w01 HSLV1 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 02w01 HSLV2 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 03w01 HSLV3 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 04w01 HSLV4 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 05w01 HSLV5 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 06w01 HSLV6 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 07w01 HSLV7 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 08w01 HSLV8 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 09w01 HSLV9 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 10w01 HSLV10 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 11w01 HSLV11 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 12w01 HSLV12 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 13w01 HSLV13 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 14w01 HSLV14 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x4202002C C   FIELD 15w01 HSLV15 (rw): Port x high-speed low-voltage configuration (y = 15 to 0) These bits are written by software to optimize the I/O speed when the I/O supply is low. Each bit is active only if the corresponding IO_VDD_HSLV/IO_VDDIO2_HSLV user option bit is set. It must be used only if the I/O supply voltage is below 2.7 V. Setting these bits when the I/O supply (VDD or VDDIO2) is higher than 2.7 V may be destructive. Note: Not all I/Os support the HSLV mode. Refer to the I/O structure in the corresponding datasheet for the list of I/Os supporting this feature. Other I/Os HSLV configuration must be kept at reset value. The bit is reserved and must be kept to reset value when the corresponding I/O is not available on the selected package.
0x42020400 A PERIPHERAL GPIOB
0x42020400 B  REGISTER MODER: GPIO port mode register
0x42020400 C   FIELD 00w02 MODE0 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 0
0x42020400 C   FIELD 02w02 MODE1 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 1
0x42020400 C   FIELD 04w02 MODE2 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 2
0x42020400 C   FIELD 06w02 MODE3 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 3
0x42020400 C   FIELD 08w02 MODE4 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 4
0x42020400 C   FIELD 10w02 MODE5 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 5
0x42020400 C   FIELD 12w02 MODE6 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 6
0x42020400 C   FIELD 14w02 MODE7 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 7
0x42020400 C   FIELD 16w02 MODE8 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 8
0x42020400 C   FIELD 18w02 MODE9 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 9
0x42020400 C   FIELD 20w02 MODE10 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 10
0x42020400 C   FIELD 22w02 MODE11 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 11
0x42020400 C   FIELD 24w02 MODE12 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 12
0x42020400 C   FIELD 26w02 MODE13 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 13
0x42020400 C   FIELD 28w02 MODE14 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 14
0x42020400 C   FIELD 30w02 MODE15 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 15
0x42020404 B  REGISTER OTYPER (=GPIOA.OTYPER): GPIO port output type register
0x42020408 B  REGISTER OSPEEDR: GPIO port output speed register
0x42020408 C   FIELD 00w02 OSPEED0 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 0
0x42020408 C   FIELD 02w02 OSPEED1 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 1
0x42020408 C   FIELD 04w02 OSPEED2 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 2
0x42020408 C   FIELD 06w02 OSPEED3 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 3
0x42020408 C   FIELD 08w02 OSPEED4 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 4
0x42020408 C   FIELD 10w02 OSPEED5 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 5
0x42020408 C   FIELD 12w02 OSPEED6 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 6
0x42020408 C   FIELD 14w02 OSPEED7 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 7
0x42020408 C   FIELD 16w02 OSPEED8 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 8
0x42020408 C   FIELD 18w02 OSPEED9 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 9
0x42020408 C   FIELD 20w02 OSPEED10 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 10
0x42020408 C   FIELD 22w02 OSPEED11 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 11
0x42020408 C   FIELD 24w02 OSPEED12 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 12
0x42020408 C   FIELD 26w02 OSPEED13 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 13
0x42020408 C   FIELD 28w02 OSPEED14 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 14
0x42020408 C   FIELD 30w02 OSPEED15 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 15
0x4202040C B  REGISTER PUPDR: GPIO port pull-up/pull-down register
0x4202040C C   FIELD 00w02 PUPD0 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 0
0x4202040C C   FIELD 02w02 PUPD1 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 1
0x4202040C C   FIELD 04w02 PUPD2 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 2
0x4202040C C   FIELD 06w02 PUPD3 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 3
0x4202040C C   FIELD 08w02 PUPD4 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 4
0x4202040C C   FIELD 10w02 PUPD5 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 5
0x4202040C C   FIELD 12w02 PUPD6 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 6
0x4202040C C   FIELD 14w02 PUPD7 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 7
0x4202040C C   FIELD 16w02 PUPD8 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 8
0x4202040C C   FIELD 18w02 PUPD9 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 9
0x4202040C C   FIELD 20w02 PUPD10 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 10
0x4202040C C   FIELD 22w02 PUPD11 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 11
0x4202040C C   FIELD 24w02 PUPD12 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 12
0x4202040C C   FIELD 26w02 PUPD13 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 13
0x4202040C C   FIELD 28w02 PUPD14 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 14
0x4202040C C   FIELD 30w02 PUPD15 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 15
0x42020410 B  REGISTER IDR (=GPIOA.IDR): GPIO port input data register
0x42020414 B  REGISTER ODR (=GPIOA.ODR): GPIO port output data register
0x42020418 B  REGISTER BSRR (=GPIOA.BSRR): GPIO port bit set/reset register
0x4202041C B  REGISTER LCKR (=GPIOA.LCKR): GPIO port configuration lock register
0x42020420 B  REGISTER AFRL (=GPIOA.AFRL): GPIO alternate function low register
0x42020424 B  REGISTER AFRH (=GPIOA.AFRH): GPIO alternate function high register
0x42020428 B  REGISTER BRR (=GPIOA.BRR): GPIO port bit reset register
0x4202042C B  REGISTER HSLVR (=GPIOA.HSLVR): GPIO high-speed low-voltage register
0x42020800 A PERIPHERAL GPIOC
0x42020800 B  REGISTER MODER: GPIO port mode register
0x42020800 C   FIELD 00w02 MODE0 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 0
0x42020800 C   FIELD 02w02 MODE1 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 1
0x42020800 C   FIELD 04w02 MODE2 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 2
0x42020800 C   FIELD 06w02 MODE3 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 3
0x42020800 C   FIELD 08w02 MODE4 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 4
0x42020800 C   FIELD 10w02 MODE5 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 5
0x42020800 C   FIELD 12w02 MODE6 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 6
0x42020800 C   FIELD 14w02 MODE7 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 7
0x42020800 C   FIELD 16w02 MODE8 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 8
0x42020800 C   FIELD 18w02 MODE9 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 9
0x42020800 C   FIELD 20w02 MODE10 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 10
0x42020800 C   FIELD 22w02 MODE11 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 11
0x42020800 C   FIELD 24w02 MODE12 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 12
0x42020800 C   FIELD 26w02 MODE13 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 13
0x42020800 C   FIELD 28w02 MODE14 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 14
0x42020800 C   FIELD 30w02 MODE15 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 15
0x42020804 B  REGISTER OTYPER (=GPIOA.OTYPER): GPIO port output type register
0x42020808 B  REGISTER OSPEEDR: GPIO port output speed register
0x42020808 C   FIELD 00w02 OSPEED0 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 0
0x42020808 C   FIELD 02w02 OSPEED1 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 1
0x42020808 C   FIELD 04w02 OSPEED2 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 2
0x42020808 C   FIELD 06w02 OSPEED3 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 3
0x42020808 C   FIELD 08w02 OSPEED4 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 4
0x42020808 C   FIELD 10w02 OSPEED5 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 5
0x42020808 C   FIELD 12w02 OSPEED6 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 6
0x42020808 C   FIELD 14w02 OSPEED7 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 7
0x42020808 C   FIELD 16w02 OSPEED8 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 8
0x42020808 C   FIELD 18w02 OSPEED9 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 9
0x42020808 C   FIELD 20w02 OSPEED10 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 10
0x42020808 C   FIELD 22w02 OSPEED11 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 11
0x42020808 C   FIELD 24w02 OSPEED12 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 12
0x42020808 C   FIELD 26w02 OSPEED13 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 13
0x42020808 C   FIELD 28w02 OSPEED14 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 14
0x42020808 C   FIELD 30w02 OSPEED15 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 15
0x4202080C B  REGISTER PUPDR: GPIO port pull-up/pull-down register
0x4202080C C   FIELD 00w02 PUPD0 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 0
0x4202080C C   FIELD 02w02 PUPD1 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 1
0x4202080C C   FIELD 04w02 PUPD2 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 2
0x4202080C C   FIELD 06w02 PUPD3 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 3
0x4202080C C   FIELD 08w02 PUPD4 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 4
0x4202080C C   FIELD 10w02 PUPD5 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 5
0x4202080C C   FIELD 12w02 PUPD6 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 6
0x4202080C C   FIELD 14w02 PUPD7 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 7
0x4202080C C   FIELD 16w02 PUPD8 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 8
0x4202080C C   FIELD 18w02 PUPD9 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 9
0x4202080C C   FIELD 20w02 PUPD10 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 10
0x4202080C C   FIELD 22w02 PUPD11 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 11
0x4202080C C   FIELD 24w02 PUPD12 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 12
0x4202080C C   FIELD 26w02 PUPD13 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 13
0x4202080C C   FIELD 28w02 PUPD14 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 14
0x4202080C C   FIELD 30w02 PUPD15 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 15
0x42020810 B  REGISTER IDR (=GPIOA.IDR): GPIO port input data register
0x42020814 B  REGISTER ODR (=GPIOA.ODR): GPIO port output data register
0x42020818 B  REGISTER BSRR (=GPIOA.BSRR): GPIO port bit set/reset register
0x4202081C B  REGISTER LCKR (=GPIOA.LCKR): GPIO port configuration lock register
0x42020820 B  REGISTER AFRL (=GPIOA.AFRL): GPIO alternate function low register
0x42020824 B  REGISTER AFRH (=GPIOA.AFRH): GPIO alternate function high register
0x42020828 B  REGISTER BRR (=GPIOA.BRR): GPIO port bit reset register
0x4202082C B  REGISTER HSLVR (=GPIOA.HSLVR): GPIO high-speed low-voltage register
0x42020C00 A PERIPHERAL GPIOD
0x42020C00 B  REGISTER MODER: GPIO port mode register
0x42020C00 C   FIELD 00w02 MODE0 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 0
0x42020C00 C   FIELD 02w02 MODE1 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 1
0x42020C00 C   FIELD 04w02 MODE2 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 2
0x42020C00 C   FIELD 06w02 MODE3 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 3
0x42020C00 C   FIELD 08w02 MODE4 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 4
0x42020C00 C   FIELD 10w02 MODE5 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 5
0x42020C00 C   FIELD 12w02 MODE6 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 6
0x42020C00 C   FIELD 14w02 MODE7 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 7
0x42020C00 C   FIELD 16w02 MODE8 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 8
0x42020C00 C   FIELD 18w02 MODE9 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 9
0x42020C00 C   FIELD 20w02 MODE10 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 10
0x42020C00 C   FIELD 22w02 MODE11 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 11
0x42020C00 C   FIELD 24w02 MODE12 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 12
0x42020C00 C   FIELD 26w02 MODE13 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 13
0x42020C00 C   FIELD 28w02 MODE14 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 14
0x42020C00 C   FIELD 30w02 MODE15 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 15
0x42020C04 B  REGISTER OTYPER (=GPIOA.OTYPER): GPIO port output type register
0x42020C08 B  REGISTER OSPEEDR: GPIO port output speed register
0x42020C08 C   FIELD 00w02 OSPEED0 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 0
0x42020C08 C   FIELD 02w02 OSPEED1 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 1
0x42020C08 C   FIELD 04w02 OSPEED2 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 2
0x42020C08 C   FIELD 06w02 OSPEED3 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 3
0x42020C08 C   FIELD 08w02 OSPEED4 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 4
0x42020C08 C   FIELD 10w02 OSPEED5 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 5
0x42020C08 C   FIELD 12w02 OSPEED6 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 6
0x42020C08 C   FIELD 14w02 OSPEED7 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 7
0x42020C08 C   FIELD 16w02 OSPEED8 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 8
0x42020C08 C   FIELD 18w02 OSPEED9 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 9
0x42020C08 C   FIELD 20w02 OSPEED10 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 10
0x42020C08 C   FIELD 22w02 OSPEED11 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 11
0x42020C08 C   FIELD 24w02 OSPEED12 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 12
0x42020C08 C   FIELD 26w02 OSPEED13 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 13
0x42020C08 C   FIELD 28w02 OSPEED14 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 14
0x42020C08 C   FIELD 30w02 OSPEED15 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 15
0x42020C0C B  REGISTER PUPDR: GPIO port pull-up/pull-down register
0x42020C0C C   FIELD 00w02 PUPD0 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 0
0x42020C0C C   FIELD 02w02 PUPD1 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 1
0x42020C0C C   FIELD 04w02 PUPD2 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 2
0x42020C0C C   FIELD 06w02 PUPD3 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 3
0x42020C0C C   FIELD 08w02 PUPD4 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 4
0x42020C0C C   FIELD 10w02 PUPD5 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 5
0x42020C0C C   FIELD 12w02 PUPD6 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 6
0x42020C0C C   FIELD 14w02 PUPD7 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 7
0x42020C0C C   FIELD 16w02 PUPD8 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 8
0x42020C0C C   FIELD 18w02 PUPD9 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 9
0x42020C0C C   FIELD 20w02 PUPD10 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 10
0x42020C0C C   FIELD 22w02 PUPD11 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 11
0x42020C0C C   FIELD 24w02 PUPD12 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 12
0x42020C0C C   FIELD 26w02 PUPD13 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 13
0x42020C0C C   FIELD 28w02 PUPD14 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 14
0x42020C0C C   FIELD 30w02 PUPD15 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 15
0x42020C10 B  REGISTER IDR (=GPIOA.IDR): GPIO port input data register
0x42020C14 B  REGISTER ODR (=GPIOA.ODR): GPIO port output data register
0x42020C18 B  REGISTER BSRR (=GPIOA.BSRR): GPIO port bit set/reset register
0x42020C1C B  REGISTER LCKR (=GPIOA.LCKR): GPIO port configuration lock register
0x42020C20 B  REGISTER AFRL (=GPIOA.AFRL): GPIO alternate function low register
0x42020C24 B  REGISTER AFRH (=GPIOA.AFRH): GPIO alternate function high register
0x42020C28 B  REGISTER BRR (=GPIOA.BRR): GPIO port bit reset register
0x42020C2C B  REGISTER HSLVR (=GPIOA.HSLVR): GPIO high-speed low-voltage register
0x42021C00 A PERIPHERAL GPIOH
0x42021C00 B  REGISTER MODER: GPIO port mode register
0x42021C00 C   FIELD 00w02 MODE0 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 0
0x42021C00 C   FIELD 02w02 MODE1 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 1
0x42021C00 C   FIELD 04w02 MODE2 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 2
0x42021C00 C   FIELD 06w02 MODE3 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 3
0x42021C00 C   FIELD 08w02 MODE4 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 4
0x42021C00 C   FIELD 10w02 MODE5 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 5
0x42021C00 C   FIELD 12w02 MODE6 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 6
0x42021C00 C   FIELD 14w02 MODE7 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 7
0x42021C00 C   FIELD 16w02 MODE8 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 8
0x42021C00 C   FIELD 18w02 MODE9 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 9
0x42021C00 C   FIELD 20w02 MODE10 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 10
0x42021C00 C   FIELD 22w02 MODE11 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 11
0x42021C00 C   FIELD 24w02 MODE12 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 12
0x42021C00 C   FIELD 26w02 MODE13 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 13
0x42021C00 C   FIELD 28w02 MODE14 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 14
0x42021C00 C   FIELD 30w02 MODE15 (=GPIOA.MODER.MODE%s) (rw): Port x configuration pin 15
0x42021C04 B  REGISTER OTYPER (=GPIOA.OTYPER): GPIO port output type register
0x42021C08 B  REGISTER OSPEEDR: GPIO port output speed register
0x42021C08 C   FIELD 00w02 OSPEED0 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 0
0x42021C08 C   FIELD 02w02 OSPEED1 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 1
0x42021C08 C   FIELD 04w02 OSPEED2 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 2
0x42021C08 C   FIELD 06w02 OSPEED3 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 3
0x42021C08 C   FIELD 08w02 OSPEED4 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 4
0x42021C08 C   FIELD 10w02 OSPEED5 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 5
0x42021C08 C   FIELD 12w02 OSPEED6 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 6
0x42021C08 C   FIELD 14w02 OSPEED7 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 7
0x42021C08 C   FIELD 16w02 OSPEED8 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 8
0x42021C08 C   FIELD 18w02 OSPEED9 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 9
0x42021C08 C   FIELD 20w02 OSPEED10 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 10
0x42021C08 C   FIELD 22w02 OSPEED11 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 11
0x42021C08 C   FIELD 24w02 OSPEED12 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 12
0x42021C08 C   FIELD 26w02 OSPEED13 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 13
0x42021C08 C   FIELD 28w02 OSPEED14 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 14
0x42021C08 C   FIELD 30w02 OSPEED15 (=GPIOA.OSPEEDR.OSPEED%s) (rw): Port x configuration pin 15
0x42021C0C B  REGISTER PUPDR: GPIO port pull-up/pull-down register
0x42021C0C C   FIELD 00w02 PUPD0 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 0
0x42021C0C C   FIELD 02w02 PUPD1 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 1
0x42021C0C C   FIELD 04w02 PUPD2 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 2
0x42021C0C C   FIELD 06w02 PUPD3 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 3
0x42021C0C C   FIELD 08w02 PUPD4 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 4
0x42021C0C C   FIELD 10w02 PUPD5 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 5
0x42021C0C C   FIELD 12w02 PUPD6 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 6
0x42021C0C C   FIELD 14w02 PUPD7 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 7
0x42021C0C C   FIELD 16w02 PUPD8 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 8
0x42021C0C C   FIELD 18w02 PUPD9 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 9
0x42021C0C C   FIELD 20w02 PUPD10 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 10
0x42021C0C C   FIELD 22w02 PUPD11 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 11
0x42021C0C C   FIELD 24w02 PUPD12 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 12
0x42021C0C C   FIELD 26w02 PUPD13 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 13
0x42021C0C C   FIELD 28w02 PUPD14 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 14
0x42021C0C C   FIELD 30w02 PUPD15 (=GPIOA.PUPDR.PUPD%s) (rw): Port x configuration pin 15
0x42021C10 B  REGISTER IDR (=GPIOA.IDR): GPIO port input data register
0x42021C14 B  REGISTER ODR (=GPIOA.ODR): GPIO port output data register
0x42021C18 B  REGISTER BSRR (=GPIOA.BSRR): GPIO port bit set/reset register
0x42021C1C B  REGISTER LCKR (=GPIOA.LCKR): GPIO port configuration lock register
0x42021C20 B  REGISTER AFRL (=GPIOA.AFRL): GPIO alternate function low register
0x42021C24 B  REGISTER AFRH (=GPIOA.AFRH): GPIO alternate function high register
0x42021C28 B  REGISTER BRR (=GPIOA.BRR): GPIO port bit reset register
0x42021C2C B  REGISTER HSLVR (=GPIOA.HSLVR): GPIO high-speed low-voltage register
0x42028000 A PERIPHERAL ADC1
0x42028000 B  REGISTER ISR: ADC interrupt and status register
0x42028000 C   FIELD 00w01 ADRDY (rw): ADC ready This bit is set by hardware after the ADC has been enabled (ADEN = 1) and when the ADC reaches a state where it is ready to accept conversion requests. It is cleared by software writing 1 to it.
0x42028000 C   FIELD 01w01 EOSMP (rw): End of sampling flag This bit is set by hardware during the conversion of any channel (only for regular channels), at the end of the sampling phase.
0x42028000 C   FIELD 02w01 EOC (rw): End of conversion flag This bit is set by hardware at the end of each regular conversion of a channel when a new data is available in the ADC_DR register. It is cleared by software writing 1 to it or by reading the ADC_DR register
0x42028000 C   FIELD 03w01 EOS (rw): End of regular sequence flag This bit is set by hardware at the end of the conversions of a regular sequence of channels. It is cleared by software writing 1 to it.
0x42028000 C   FIELD 04w01 OVR (rw): ADC overrun This bit is set by hardware when an overrun occurs on a regular channel, meaning that a new conversion has completed while the EOC flag was already set. It is cleared by software writing 1 to it.
0x42028000 C   FIELD 05w01 JEOC (rw): Injected channel end of conversion flag This bit is set by hardware at the end of each injected conversion of a channel when a new data is available in the corresponding ADC_JDRy register. It is cleared by software writing 1 to it or by reading the corresponding ADC_JDRy register
0x42028000 C   FIELD 06w01 JEOS (rw): Injected channel end of sequence flag This bit is set by hardware at the end of the conversions of all injected channels in the group. It is cleared by software writing 1 to it.
0x42028000 C   FIELD 07w01 AWD1 (rw): Analog watchdog 1 flag
0x42028000 C   FIELD 08w01 AWD2 (rw): Analog watchdog 2 flag
0x42028000 C   FIELD 09w01 AWD3 (rw): Analog watchdog 3 flag
0x42028000 C   FIELD 10w01 JQOVF (rw): Injected context queue overflow This bit is set by hardware when an Overflow of the Injected Queue of Context occurs. It is cleared by software writing 1 to it. Refer to for more information.
0x42028004 B  REGISTER IER: ADC interrupt enable register
0x42028004 C   FIELD 00w01 ADRDYIE (rw): ADC ready interrupt enable This bit is set and cleared by software to enable/disable the ADC Ready interrupt. Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028004 C   FIELD 01w01 EOSMPIE (rw): End of sampling flag interrupt enable for regular conversions This bit is set and cleared by software to enable/disable the end of the sampling phase interrupt for regular conversions. Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x42028004 C   FIELD 02w01 EOCIE (rw): End of regular conversion interrupt enable This bit is set and cleared by software to enable/disable the end of a regular conversion interrupt. Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x42028004 C   FIELD 03w01 EOSIE (rw): End of regular sequence of conversions interrupt enable This bit is set and cleared by software to enable/disable the end of regular sequence of conversions interrupt. Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x42028004 C   FIELD 04w01 OVRIE (rw): Overrun interrupt enable This bit is set and cleared by software to enable/disable the Overrun interrupt of a regular conversion. Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x42028004 C   FIELD 05w01 JEOCIE (rw): End of injected conversion interrupt enable This bit is set and cleared by software to enable/disable the end of an injected conversion interrupt. Note: The software is allowed to write this bit only when JADSTART = 0 (which ensures that no injected conversion is ongoing).
0x42028004 C   FIELD 06w01 JEOSIE (rw): End of injected sequence of conversions interrupt enable This bit is set and cleared by software to enable/disable the end of injected sequence of conversions interrupt. Note: The software is allowed to write this bit only when JADSTART = 0 (which ensures that no injected conversion is ongoing).
0x42028004 C   FIELD 07w01 AWD1IE (rw): Analog watchdog 1 interrupt enable
0x42028004 C   FIELD 08w01 AWD2IE (rw): Analog watchdog 2 interrupt enable
0x42028004 C   FIELD 09w01 AWD3IE (rw): Analog watchdog 3 interrupt enable
0x42028004 C   FIELD 10w01 JQOVFIE (rw): Injected context queue overflow interrupt enable This bit is set and cleared by software to enable/disable the Injected Context Queue Overflow interrupt. Note: The software is allowed to write this bit only when JADSTART = 0 (which ensures that no injected conversion is ongoing).
0x42028008 B  REGISTER CR: ADC control register
0x42028008 C   FIELD 00w01 ADEN (rw): ADC enable control This bit is set by software to enable the ADC. The ADC is effectively ready to operate once the flag ADRDY has been set. It is cleared by hardware when the ADC is disabled, after the execution of the ADDIS command. Note: The software is allowed to set ADEN only when all bits of ADC_CR registers are 0 (ADCAL = 0, JADSTART = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0) except for bit ADVREGEN which must be 1 (and the software must have wait for the startup time of the voltage regulator)
0x42028008 C   FIELD 01w01 ADDIS (rw): ADC disable command This bit is set by software to disable the ADC (ADDIS command) and put it into power-down state (OFF state). It is cleared by hardware once the ADC is effectively disabled (ADEN is also cleared by hardware at this time). Note: The software is allowed to set ADDIS only when ADEN = 1 and both ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing)
0x42028008 C   FIELD 02w01 ADSTART (rw): ADC start of regular conversion This bit is set by software to start ADC conversion of regular channels. Depending on the configuration bits EXTEN, a conversion immediately starts (software trigger configuration) or once a regular hardware trigger event occurs (hardware trigger configuration). It is cleared by hardware: in Single conversion mode when software trigger is selected (EXTSEL = 0x0): at the assertion of the End of Regular Conversion Sequence (EOS) flag. in all cases: after the execution of the ADSTP command, at the same time that ADSTP is cleared by hardware. Note: The software is allowed to set ADSTART only when ADEN = 1 and ADDIS = 0 (ADC is enabled and there is no pending request to disable the ADC) In auto-injection mode (JAUTO = 1), regular and auto-injected conversions are started by setting bit ADSTART (JADSTART must be kept cleared)
0x42028008 C   FIELD 03w01 JADSTART (rw): ADC start of injected conversion This bit is set by software to start ADC conversion of injected channels. Depending on the configuration bits JEXTEN, a conversion immediately starts (software trigger configuration) or once an injected hardware trigger event occurs (hardware trigger configuration). It is cleared by hardware: in Single conversion mode when software trigger is selected (JEXTSEL = 0x0): at the assertion of the End of Injected Conversion Sequence (JEOS) flag. in all cases: after the execution of the JADSTP command, at the same time that JADSTP is cleared by hardware. Note: The software is allowed to set JADSTART only when ADEN = 1 and ADDIS = 0 (ADC is enabled and there is no pending request to disable the ADC). In auto-injection mode (JAUTO = 1), regular and auto-injected conversions are started by setting bit ADSTART (JADSTART must be kept cleared)
0x42028008 C   FIELD 04w01 ADSTP (rw): ADC stop of regular conversion command This bit is set by software to stop and discard an ongoing regular conversion (ADSTP Command). It is cleared by hardware when the conversion is effectively discarded and the ADC regular sequence and triggers can be re-configured. The ADC is then ready to accept a new start of regular conversions (ADSTART command). Note: The software is allowed to set ADSTP only when ADSTART = 1 and ADDIS = 0 (ADC is enabled and eventually converting a regular conversion and there is no pending request to disable the ADC). In auto-injection mode (JAUTO = 1), setting ADSTP bit aborts both regular and injected conversions (do not use JADSTP).
0x42028008 C   FIELD 05w01 JADSTP (rw): ADC stop of injected conversion command This bit is set by software to stop and discard an ongoing injected conversion (JADSTP Command). It is cleared by hardware when the conversion is effectively discarded and the ADC injected sequence and triggers can be re-configured. The ADC is then ready to accept a new start of injected conversions (JADSTART command). Note: The software is allowed to set JADSTP only when JADSTART = 1 and ADDIS = 0 (ADC is enabled and eventually converting an injected conversion and there is no pending request to disable the ADC) In Auto-injection mode (JAUTO = 1), setting ADSTP bit aborts both regular and injected conversions (do not use JADSTP)
0x42028008 C   FIELD 28w01 ADVREGEN (rw): ADC voltage regulator enable This bits is set by software to enable the ADC voltage regulator. Before performing any operation such as launching a calibration or enabling the ADC, the ADC voltage regulator must first be enabled and the software must wait for the regulator start-up time. For more details about the ADC voltage regulator enable and disable sequences, refer to (ADVREGEN). The software can program this bit field only when the ADC is disabled (ADCAL = 0, JADSTART = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0).
0x42028008 C   FIELD 29w01 DEEPPWD (rw): Deep-power-down enable This bit is set and cleared by software to put the ADC in Deep-power-down mode. Note: The software is allowed to write this bit only when the ADC is disabled (ADCAL = 0, JADSTART = 0, JADSTP = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0).
0x42028008 C   FIELD 30w01 ADCALDIF (rw): Differential mode for calibration This bit is set and cleared by software to configure the Single-ended or Differential inputs mode for the calibration. Note: The software is allowed to write this bit only when the ADC is disabled and is not calibrating (ADCAL = 0, JADSTART = 0, JADSTP = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0).
0x42028008 C   FIELD 31w01 ADCAL (rw): ADC calibration This bit is set by software to start the calibration of the ADC. Program first the bit ADCALDIF to determine if this calibration applies for Single-ended or Differential inputs mode. It is cleared by hardware after calibration is complete. Note: The software is allowed to launch a calibration by setting ADCAL only when ADEN = 0. The software is allowed to update the calibration factor by writing ADC_CALFACT only when ADEN = 1 and ADSTART = 0 and JADSTART = 0 (ADC enabled and no conversion is ongoing)
0x4202800C B  REGISTER CFGR: ADC configuration register
0x4202800C C   FIELD 00w01 DMAEN (rw): Direct memory access enable This bit is set and cleared by software to enable the generation of DMA requests. This allows to use the DMA to manage automatically the converted data. For more details, refer to conversions using the DMA. Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x4202800C C   FIELD 01w01 DMACFG (rw): Direct memory access configuration This bit is set and cleared by software to select between two DMA modes of operation and is effective only when DMAEN = 1. For more details, refer to Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x4202800C C   FIELD 03w02 RES (rw): Data resolution These bits are written by software to select the resolution of the conversion. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x4202800C C   FIELD 05w05 EXTSEL: External trigger selection for regular group These bits select the external event used to trigger the start of conversion of a regular group: ... Note: The software is allowed to write these bits only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x4202800C C   FIELD 10w02 EXTEN (rw): External trigger enable and polarity selection for regular channels These bits are set and cleared by software to select the external trigger polarity and enable the trigger of a regular group. Note: The software is allowed to write these bits only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x4202800C C   FIELD 12w01 OVRMOD (rw): Overrun mode This bit is set and cleared by software and configure the way data overrun is managed. Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x4202800C C   FIELD 13w01 CONT (rw): Single / Continuous conversion mode for regular conversions This bit is set and cleared by software. If it is set, regular conversion takes place continuously until it is cleared. Note: It is not possible to have both Discontinuous mode and Continuous mode enabled: it is forbidden to set both DISCEN = 1 and CONT = 1. The software is allowed to write this bit only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x4202800C C   FIELD 14w01 AUTDLY (rw): Delayed conversion mode This bit is set and cleared by software to enable/disable the Auto Delayed Conversion mode.. Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x4202800C C   FIELD 15w01 ALIGN (rw): Data alignment This bit is set and cleared by software to select right or left alignment. Refer to register, data alignment and offset (ADC_DR, OFFSET, OFFSET_CH, ALIGN). Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x4202800C C   FIELD 16w01 DISCEN (rw): Discontinuous mode for regular channels This bit is set and cleared by software to enable/disable Discontinuous mode for regular channels. Note: It is not possible to have both Discontinuous mode and Continuous mode enabled: it is forbidden to set both DISCEN = 1 and CONT = 1. It is not possible to use both auto-injected mode and Discontinuous mode simultaneously: the bits DISCEN and JDISCEN must be kept cleared by software when JAUTO is set. The software is allowed to write this bit only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x4202800C C   FIELD 17w03 DISCNUM (rw): Discontinuous mode channel count These bits are written by software to define the number of regular channels to be converted in Discontinuous mode, after receiving an external trigger. ... Note: The software is allowed to write these bits only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x4202800C C   FIELD 20w01 JDISCEN (rw): Discontinuous mode on injected channels This bit is set and cleared by software to enable/disable Discontinuous mode on the injected channels of a group. Note: The software is allowed to write this bit only when JADSTART = 0 (which ensures that no injected conversion is ongoing). It is not possible to use both auto-injected mode and Discontinuous mode simultaneously: the bits DISCEN and JDISCEN must be kept cleared by software when JAUTO is set.
0x4202800C C   FIELD 21w01 JQM (rw): JSQR queue mode This bit is set and cleared by software. It defines how an empty Queue is managed. Refer to for more information. Note: The software is allowed to write this bit only when JADSTART = 0 (which ensures that no injected conversion is ongoing).
0x4202800C C   FIELD 22w01 AWD1SGL (rw): Enable the watchdog 1 on a single channel or on all channels This bit is set and cleared by software to enable the analog watchdog on the channel identified by the AWD1CH[4:0] bits or on all the channels Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x4202800C C   FIELD 23w01 AWD1EN (rw): Analog watchdog 1 enable on regular channels This bit is set and cleared by software Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x4202800C C   FIELD 24w01 JAWD1EN (rw): Analog watchdog 1 enable on injected channels This bit is set and cleared by software Note: The software is allowed to write this bit only when JADSTART = 0 (which ensures that no injected conversion is ongoing).
0x4202800C C   FIELD 25w01 JAUTO (rw): Automatic injected group conversion This bit is set and cleared by software to enable/disable automatic injected group conversion after regular group conversion. Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no regular nor injected conversion is ongoing).
0x4202800C C   FIELD 26w05 AWD1CH (rw): Analog watchdog 1 channel selection These bits are set and cleared by software. They select the input channel to be guarded by the analog watchdog. ..... others: reserved, must not be used Note: Some channels are not connected physically. Keep the corresponding AWD1CH[4:0] setting to the reset value. The channel selected by AWD1CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x4202800C C   FIELD 31w01 JQDIS (rw): Injected Queue disable These bits are set and cleared by software to disable the Injected Queue mechanism : Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no regular nor injected conversion is ongoing). A set or reset of JQDIS bit causes the injected queue to be flushed and the JSQR register is cleared.
0x42028010 B  REGISTER CFGR2: ADC configuration register 2
0x42028010 C   FIELD 00w01 ROVSE (rw): Regular Oversampling Enable This bit is set and cleared by software to enable regular oversampling. Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing)
0x42028010 C   FIELD 01w01 JOVSE (rw): Injected Oversampling Enable This bit is set and cleared by software to enable injected oversampling. Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing)
0x42028010 C   FIELD 02w03 OVSR (rw): Oversampling ratio This bitfield is set and cleared by software to define the oversampling ratio. Note: The software is allowed to write these bits only when ADSTART = 0 (which ensures that no conversion is ongoing).
0x42028010 C   FIELD 05w04 OVSS (rw): Oversampling shift This bitfield is set and cleared by software to define the right shifting applied to the raw oversampling result. Other codes reserved Note: The software is allowed to write these bits only when ADSTART = 0 (which ensures that no conversion is ongoing).
0x42028010 C   FIELD 09w01 TROVS (rw): Triggered Regular Oversampling This bit is set and cleared by software to enable triggered oversampling Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no conversion is ongoing).
0x42028010 C   FIELD 10w01 ROVSM (rw): Regular Oversampling mode This bit is set and cleared by software to select the regular oversampling mode. Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no conversion is ongoing).
0x42028010 C   FIELD 25w01 SWTRIG (rw): Software trigger bit for sampling time control trigger mode This bit is set and cleared by software to enable the bulb sampling mode. Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no conversion is ongoing).
0x42028010 C   FIELD 26w01 BULB (rw): Bulb sampling mode This bit is set and cleared by software to enable the bulb sampling mode. SAMPTRIG bit must not be set when the BULB bit is set. The very first ADC conversion is performed with the sampling time specified in SMPx bits. Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no conversion is ongoing).
0x42028010 C   FIELD 27w01 SMPTRIG (rw): Sampling time control trigger mode This bit is set and cleared by software to enable the sampling time control trigger mode. The sampling time starts on the trigger rising edge, and the conversion on the trigger falling edge. EXTEN bit should be set to 01. BULB bit must not be set when the SMPTRIG bit is set. When EXTEN bit is set to 00, set SWTRIG to start the sampling and clear SWTRIG bit to start the conversion. Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no conversion is ongoing).
0x42028014 B  REGISTER SMPR1: ADC sample time register 1
0x42028014 C   FIELD 00w03 SMP0 (rw): Channel 0 sample time selection
0x42028014 C   FIELD 03w03 SMP1 (rw): Channel 1 sample time selection
0x42028014 C   FIELD 06w03 SMP2 (rw): Channel 2 sample time selection
0x42028014 C   FIELD 09w03 SMP3 (rw): Channel 3 sample time selection
0x42028014 C   FIELD 12w03 SMP4 (rw): Channel 4 sample time selection
0x42028014 C   FIELD 15w03 SMP5 (rw): Channel 5 sample time selection
0x42028014 C   FIELD 18w03 SMP6 (rw): Channel 6 sample time selection
0x42028014 C   FIELD 21w03 SMP7 (rw): Channel 7 sample time selection
0x42028014 C   FIELD 24w03 SMP8 (rw): Channel 8 sample time selection
0x42028014 C   FIELD 27w03 SMP9 (rw): Channel 9 sample time selection
0x42028014 C   FIELD 31w01 SMPPLUS (rw): Addition of one clock cycle to the sampling time. To make sure no conversion is ongoing, the software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0.
0x42028018 B  REGISTER SMPR2: ADC sample time register 2
0x42028018 C   FIELD 00w03 SMP10 (rw): Channel 10 sample time selection
0x42028018 C   FIELD 03w03 SMP11 (rw): Channel 11 sample time selection
0x42028018 C   FIELD 06w03 SMP12 (rw): Channel 12 sample time selection
0x42028018 C   FIELD 09w03 SMP13 (rw): Channel 13 sample time selection
0x42028018 C   FIELD 12w03 SMP14 (rw): Channel 14 sample time selection
0x42028018 C   FIELD 15w03 SMP15 (rw): Channel 15 sample time selection
0x42028018 C   FIELD 18w03 SMP16 (rw): Channel 16 sample time selection
0x42028018 C   FIELD 21w03 SMP17 (rw): Channel 17 sample time selection
0x42028018 C   FIELD 24w03 SMP18 (rw): Channel 18 sample time selection
0x42028018 C   FIELD 27w03 SMP19 (rw): Channel 19 sample time selection
0x42028020 B  REGISTER TR1: ADC watchdog threshold register 1
0x42028020 C   FIELD 00w12 LT1 (rw): Analog watchdog 1 lower threshold These bits are written by software to define the lower threshold for the analog watchdog 1. Refer to AWD2CH, AWD3CH, AWD_HTx, AWD_LTx, AWDx) Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028020 C   FIELD 12w03 AWDFILT (rw): Analog watchdog filtering parameter This bit is set and cleared by software. ... Note: The software is allowed to write this bit only when ADSTART = 0 (which ensures that no conversion is ongoing).
0x42028020 C   FIELD 16w12 HT1 (rw): Analog watchdog 1 higher threshold These bits are written by software to define the higher threshold for the analog watchdog 1. Refer to AWD2CH, AWD3CH, AWD_HTx, AWD_LTx, AWDx) Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028024 B  REGISTER TR2: ADC watchdog threshold register 2
0x42028024 C   FIELD 00w08 LT2 (rw): Analog watchdog 2 lower threshold These bits are written by software to define the lower threshold for the analog watchdog 2. Refer to AWD2CH, AWD3CH, AWD_HTx, AWD_LTx, AWDx) Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028024 C   FIELD 16w08 HT2 (rw): Analog watchdog 2 higher threshold These bits are written by software to define the higher threshold for the analog watchdog 2. Refer to AWD2CH, AWD3CH, AWD_HTx, AWD_LTx, AWDx) Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028028 B  REGISTER TR3: ADC watchdog threshold register 3
0x42028028 C   FIELD 00w08 LT3 (rw): Analog watchdog 3 lower threshold These bits are written by software to define the lower threshold for the analog watchdog 3. This watchdog compares the 8-bit of LT3 with the 8 MSB of the converted data. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028028 C   FIELD 16w08 HT3 (rw): Analog watchdog 3 higher threshold These bits are written by software to define the higher threshold for the analog watchdog 3. Refer to AWD2CH, AWD3CH, AWD_HTx, AWD_LTx, AWDx) Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028030 B  REGISTER SQR1: ADC regular sequence register 1
0x42028030 C   FIELD 00w04 L (rw): Regular channel sequence length These bits are written by software to define the total number of conversions in the regular channel conversion sequence. ... Note: The software is allowed to write these bits only when ADSTART = 0 (which ensures that no regular conversion is ongoing).
0x42028030 C   FIELD 06w05 SQ1 (rw): 1 conversion in regular sequence
0x42028030 C   FIELD 12w05 SQ2 (rw): 2 conversion in regular sequence
0x42028030 C   FIELD 18w05 SQ3 (rw): 3 conversion in regular sequence
0x42028030 C   FIELD 24w05 SQ4 (rw): 4 conversion in regular sequence
0x42028034 B  REGISTER SQR2: ADC regular sequence register 2
0x42028034 C   FIELD 00w05 SQ5 (rw): 5 conversion in regular sequence
0x42028034 C   FIELD 06w05 SQ6 (rw): 6 conversion in regular sequence
0x42028034 C   FIELD 12w05 SQ7 (rw): 7 conversion in regular sequence
0x42028034 C   FIELD 18w05 SQ8 (rw): 8 conversion in regular sequence
0x42028034 C   FIELD 24w05 SQ9 (rw): 9 conversion in regular sequence
0x42028038 B  REGISTER SQR3: ADC regular sequence register 3
0x42028038 C   FIELD 00w05 SQ10 (rw): 10 conversion in regular sequence
0x42028038 C   FIELD 06w05 SQ11 (rw): 11 conversion in regular sequence
0x42028038 C   FIELD 12w05 SQ12 (rw): 12 conversion in regular sequence
0x42028038 C   FIELD 18w05 SQ13 (rw): 13 conversion in regular sequence
0x42028038 C   FIELD 24w05 SQ14 (rw): 14 conversion in regular sequence
0x4202803C B  REGISTER SQR4: ADC regular sequence register 4
0x4202803C C   FIELD 00w05 SQ15 (rw): 15 conversion in regular sequence
0x4202803C C   FIELD 06w05 SQ16 (rw): 16 conversion in regular sequence
0x42028040 B  REGISTER DR: ADC regular data register
0x42028040 C   FIELD 00w16 RDATA (ro): Regular data converted These bits are read-only. They contain the conversion result from the last converted regular channel. The data are left- or right-aligned as described in .
0x4202804C B  REGISTER JSQR: ADC injected sequence register
0x4202804C C   FIELD 00w02 JL (rw): Injected channel sequence length These bits are written by software to define the total number of conversions in the injected channel conversion sequence. Note: The software is allowed to write these bits only when JADSTART = 0 (which ensures that no injected conversion is ongoing).
0x4202804C C   FIELD 02w05 JEXTSEL (rw): External Trigger Selection for injected group These bits select the external event used to trigger the start of conversion of an injected group: ... Note: The software is allowed to write these bits only when JADSTART = 0 (which ensures that no injected conversion is ongoing).
0x4202804C C   FIELD 07w02 JEXTEN (rw): External trigger enable and polarity selection for injected channels These bits are set and cleared by software to select the external trigger polarity and enable the trigger of an injected group. Note: The software is allowed to write these bits only when JADSTART = 0 (which ensures that no injected conversion is ongoing). If JQM = 1 and if the Queue of Context becomes empty, the software and hardware triggers of the injected sequence are both internally disabled (refer to Queue of context for injected conversions)
0x4202804C C   FIELD 09w05 JSQ1 (rw): 1 conversion in injected sequence
0x4202804C C   FIELD 15w05 JSQ2 (rw): 2 conversion in injected sequence
0x4202804C C   FIELD 21w05 JSQ3 (rw): 3 conversion in injected sequence
0x4202804C C   FIELD 27w05 JSQ4 (rw): 4 conversion in injected sequence
0x42028060 B  REGISTER OFR1: ADC offset 1 register
0x42028060 C   FIELD 00w12 OFFSET (rw): Data offset y for the channel programmed into bits OFFSET_CH[4:0] These bits are written by software to define the offset to be subtracted from the raw converted data when converting a channel (can be regular or injected). The channel to which applies the data offset must be programmed in the bits OFFSET_CH[4:0]. The conversion result can be read from in the ADC_DR (regular conversion) or from in the ADC_JDRyi registers (injected conversion). Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). If several offset (OFFSET) point to the same channel, only the offset with the lowest x value is considered for the subtraction. Ex: if OFFSET1_CH[4:0] = 4 and OFFSET2_CH[4:0] = 4, this is OFFSET1[11:0] which is subtracted when converting channel 4.
0x42028060 C   FIELD 24w01 OFFSETPOS (rw): Positive offset This bit is set and cleared by software to enable the positive offset. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028060 C   FIELD 25w01 SATEN (rw): Saturation enable This bit is set and cleared by software to enable the saturation at 0x000 and 0xFFF for the offset function. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028060 C   FIELD 26w05 OFFSET_CH (rw): Channel selection for the data offset y These bits are written by software to define the channel to which the offset programmed into bits OFFSET[11:0] applies. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the data offset y. If OFFSET_EN is set, it is not allowed to select the same channel for different ADC_OFRy registers.
0x42028060 C   FIELD 31w01 OFFSET_EN (rw): Offset y enable This bit is written by software to enable or disable the offset programmed into bits OFFSET[11:0]. Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028064 B  REGISTER OFR2: ADC offset 2 register
0x42028064 C   FIELD 00w12 OFFSET (rw): Data offset y for the channel programmed into bits OFFSET_CH[4:0] These bits are written by software to define the offset to be subtracted from the raw converted data when converting a channel (can be regular or injected). The channel to which applies the data offset must be programmed in the bits OFFSET_CH[4:0]. The conversion result can be read from in the ADC_DR (regular conversion) or from in the ADC_JDRyi registers (injected conversion). Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). If several offset (OFFSET) point to the same channel, only the offset with the lowest x value is considered for the subtraction. Ex: if OFFSET1_CH[4:0] = 4 and OFFSET2_CH[4:0] = 4, this is OFFSET1[11:0] which is subtracted when converting channel 4.
0x42028064 C   FIELD 24w01 OFFSETPOS (rw): Positive offset This bit is set and cleared by software to enable the positive offset. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028064 C   FIELD 25w01 SATEN (rw): Saturation enable This bit is set and cleared by software to enable the saturation at 0x000 and 0xFFF for the offset function. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028064 C   FIELD 26w05 OFFSET_CH (rw): Channel selection for the data offset y These bits are written by software to define the channel to which the offset programmed into bits OFFSET[11:0] applies. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the data offset y. If OFFSET_EN is set, it is not allowed to select the same channel for different ADC_OFRy registers.
0x42028064 C   FIELD 31w01 OFFSET_EN (rw): Offset y enable This bit is written by software to enable or disable the offset programmed into bits OFFSET[11:0]. Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028068 B  REGISTER OFR3: ADC offset 3 register
0x42028068 C   FIELD 00w12 OFFSET (rw): Data offset y for the channel programmed into bits OFFSET_CH[4:0] These bits are written by software to define the offset to be subtracted from the raw converted data when converting a channel (can be regular or injected). The channel to which applies the data offset must be programmed in the bits OFFSET_CH[4:0]. The conversion result can be read from in the ADC_DR (regular conversion) or from in the ADC_JDRyi registers (injected conversion). Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). If several offset (OFFSET) point to the same channel, only the offset with the lowest x value is considered for the subtraction. Ex: if OFFSET1_CH[4:0] = 4 and OFFSET2_CH[4:0] = 4, this is OFFSET1[11:0] which is subtracted when converting channel 4.
0x42028068 C   FIELD 24w01 OFFSETPOS (rw): Positive offset This bit is set and cleared by software to enable the positive offset. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028068 C   FIELD 25w01 SATEN (rw): Saturation enable This bit is set and cleared by software to enable the saturation at 0x000 and 0xFFF for the offset function. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028068 C   FIELD 26w05 OFFSET_CH (rw): Channel selection for the data offset y These bits are written by software to define the channel to which the offset programmed into bits OFFSET[11:0] applies. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the data offset y. If OFFSET_EN is set, it is not allowed to select the same channel for different ADC_OFRy registers.
0x42028068 C   FIELD 31w01 OFFSET_EN (rw): Offset y enable This bit is written by software to enable or disable the offset programmed into bits OFFSET[11:0]. Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x4202806C B  REGISTER OFR4: ADC offset 4 register
0x4202806C C   FIELD 00w12 OFFSET (rw): Data offset y for the channel programmed into bits OFFSET_CH[4:0] These bits are written by software to define the offset to be subtracted from the raw converted data when converting a channel (can be regular or injected). The channel to which applies the data offset must be programmed in the bits OFFSET_CH[4:0]. The conversion result can be read from in the ADC_DR (regular conversion) or from in the ADC_JDRyi registers (injected conversion). Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). If several offset (OFFSET) point to the same channel, only the offset with the lowest x value is considered for the subtraction. Ex: if OFFSET1_CH[4:0] = 4 and OFFSET2_CH[4:0] = 4, this is OFFSET1[11:0] which is subtracted when converting channel 4.
0x4202806C C   FIELD 24w01 OFFSETPOS (rw): Positive offset This bit is set and cleared by software to enable the positive offset. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x4202806C C   FIELD 25w01 SATEN (rw): Saturation enable This bit is set and cleared by software to enable the saturation at 0x000 and 0xFFF for the offset function. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x4202806C C   FIELD 26w05 OFFSET_CH (rw): Channel selection for the data offset y These bits are written by software to define the channel to which the offset programmed into bits OFFSET[11:0] applies. Note: The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the data offset y. If OFFSET_EN is set, it is not allowed to select the same channel for different ADC_OFRy registers.
0x4202806C C   FIELD 31w01 OFFSET_EN (rw): Offset y enable This bit is written by software to enable or disable the offset programmed into bits OFFSET[11:0]. Note: The software is allowed to write this bit only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing).
0x42028080 B  REGISTER JDR1: ADC injected channel 1 data register
0x42028080 C   FIELD 00w16 JDATA (ro): Injected data These bits are read-only. They contain the conversion result from injected channel y. The data are left -or right-aligned as described in .
0x42028084 B  REGISTER JDR2: ADC injected channel 2 data register
0x42028084 C   FIELD 00w16 JDATA (ro): Injected data These bits are read-only. They contain the conversion result from injected channel y. The data are left -or right-aligned as described in .
0x42028088 B  REGISTER JDR3: ADC injected channel 3 data register
0x42028088 C   FIELD 00w16 JDATA (ro): Injected data These bits are read-only. They contain the conversion result from injected channel y. The data are left -or right-aligned as described in .
0x4202808C B  REGISTER JDR4: ADC injected channel 4 data register
0x4202808C C   FIELD 00w16 JDATA (ro): Injected data These bits are read-only. They contain the conversion result from injected channel y. The data are left -or right-aligned as described in .
0x420280A0 B  REGISTER AWD2CR: ADC Analog Watchdog 2 Configuration Register
0x420280A0 C   FIELD 00w01 AWD2CH0: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 01w01 AWD2CH1: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 02w01 AWD2CH2: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 03w01 AWD2CH3: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 04w01 AWD2CH4: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 05w01 AWD2CH5: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 06w01 AWD2CH6: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 07w01 AWD2CH7: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 08w01 AWD2CH8: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 09w01 AWD2CH9: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 10w01 AWD2CH10: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 11w01 AWD2CH11: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 12w01 AWD2CH12: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 13w01 AWD2CH13: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 14w01 AWD2CH14: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 15w01 AWD2CH15: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 16w01 AWD2CH16: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 17w01 AWD2CH17: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 18w01 AWD2CH18: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A0 C   FIELD 19w01 AWD2CH19: Analog watchdog 2 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 2. AWD2CH[i] = 0: ADC analog input channel i is not monitored by AWD2 AWD2CH[i] = 1: ADC analog input channel i is monitored by AWD2 When AWD2CH[19:0] = 000..0, the analog Watchdog 2 is disabled Note: The channels selected by AWD2CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 B  REGISTER AWD3CR: ADC Analog Watchdog 3 Configuration Register
0x420280A4 C   FIELD 00w01 AWD3CH0: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 01w01 AWD3CH1: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 02w01 AWD3CH2: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 03w01 AWD3CH3: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 04w01 AWD3CH4: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 05w01 AWD3CH5: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 06w01 AWD3CH6: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 07w01 AWD3CH7: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 08w01 AWD3CH8: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 09w01 AWD3CH9: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 10w01 AWD3CH10: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 11w01 AWD3CH11: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 12w01 AWD3CH12: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 13w01 AWD3CH13: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 14w01 AWD3CH14: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 15w01 AWD3CH15: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 16w01 AWD3CH16: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 17w01 AWD3CH17: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 18w01 AWD3CH18: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280A4 C   FIELD 19w01 AWD3CH19: Analog watchdog 3 channel selection These bits are set and cleared by software. They enable and select the input channels to be guarded by the analog watchdog 3. AWD3CH[i] = 0: ADC analog input channel i is not monitored by AWD3 AWD3CH[i] = 1: ADC analog input channel i is monitored by AWD3 When AWD3CH[19:0] = 000..0, the analog Watchdog 3 is disabled Note: The channels selected by AWD3CH must be also selected into the SQRi or JSQRi registers. The software is allowed to write these bits only when ADSTART = 0 and JADSTART = 0 (which ensures that no conversion is ongoing). Some channels are not connected physically and must not be selected for the analog watchdog.
0x420280B0 B  REGISTER DIFSEL: ADC Differential mode Selection Register
0x420280B0 C   FIELD 00w01 DIFSEL0: Differential mode for channel 0
0x420280B0 C   FIELD 01w01 DIFSEL1: Differential mode for channel 1
0x420280B0 C   FIELD 02w01 DIFSEL2: Differential mode for channel 2
0x420280B0 C   FIELD 03w01 DIFSEL3: Differential mode for channel 3
0x420280B0 C   FIELD 04w01 DIFSEL4: Differential mode for channel 4
0x420280B0 C   FIELD 05w01 DIFSEL5: Differential mode for channel 5
0x420280B0 C   FIELD 06w01 DIFSEL6: Differential mode for channel 6
0x420280B0 C   FIELD 07w01 DIFSEL7: Differential mode for channel 7
0x420280B0 C   FIELD 08w01 DIFSEL8: Differential mode for channel 8
0x420280B0 C   FIELD 09w01 DIFSEL9: Differential mode for channel 9
0x420280B0 C   FIELD 10w01 DIFSEL10: Differential mode for channel 10
0x420280B0 C   FIELD 11w01 DIFSEL11: Differential mode for channel 11
0x420280B0 C   FIELD 12w01 DIFSEL12: Differential mode for channel 12
0x420280B0 C   FIELD 13w01 DIFSEL13: Differential mode for channel 13
0x420280B0 C   FIELD 14w01 DIFSEL14: Differential mode for channel 14
0x420280B0 C   FIELD 15w01 DIFSEL15: Differential mode for channel 15
0x420280B0 C   FIELD 16w01 DIFSEL16: Differential mode for channel 16
0x420280B0 C   FIELD 17w01 DIFSEL17: Differential mode for channel 17
0x420280B0 C   FIELD 18w01 DIFSEL18: Differential mode for channel 18
0x420280B0 C   FIELD 19w01 DIFSEL19: Differential mode for channel 19
0x420280B4 B  REGISTER CALFACT: ADC Calibration Factors
0x420280B4 C   FIELD 00w07 CALFACT_S (rw): Calibration Factors In Single-ended mode These bits are written by hardware or by software. Once a single-ended inputs calibration is complete, they are updated by hardware with the calibration factors. Software can write these bits with a new calibration factor. If the new calibration factor is different from the current one stored into the analog ADC, it is then applied once a new single-ended calibration is launched. Note: The software is allowed to write these bits only when ADEN = 1, ADSTART = 0 and JADSTART = 0 (ADC is enabled and no calibration is ongoing and no conversion is ongoing).
0x420280B4 C   FIELD 16w07 CALFACT_D (rw): Calibration Factors in differential mode These bits are written by hardware or by software. Once a differential inputs calibration is complete, they are updated by hardware with the calibration factors. Software can write these bits with a new calibration factor. If the new calibration factor is different from the current one stored into the analog ADC, it is then applied once a new differential calibration is launched. Note: The software is allowed to write these bits only when ADEN = 1, ADSTART = 0 and JADSTART = 0 (ADC is enabled and no calibration is ongoing and no conversion is ongoing).
0x420280C8 B  REGISTER OR: ADC option register
0x420280C8 C   FIELD 00w01 OP0 (rw): Option bit 0
0x420280C8 C   FIELD 01w01 OP1 (rw): Option bit 1
0x42028308 B  REGISTER CCR: ADC common control register
0x42028308 C   FIELD 16w02 CKMODE (rw): ADC clock mode These bits are set and cleared by software to define the ADC clock scheme (which is common to both master and slave ADCs): In all synchronous clock modes, there is no jitter in the delay from a timer trigger to the start of a conversion. Note: The software is allowed to write these bits only when the ADCs are disabled (ADCAL = 0, JADSTART = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0).
0x42028308 C   FIELD 18w04 PRESC (rw): ADC prescaler These bits are set and cleared by software to select the frequency of the clock to the ADC. The clock is common for all the ADCs. other: reserved Note: The software is allowed to write these bits only when the ADC is disabled (ADCAL = 0, JADSTART = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0). The ADC prescaler value is applied only when CKMODE[1:0] = 0b00.
0x42028308 C   FIELD 22w01 VREFEN (rw): VREFINT enable This bit is set and cleared by software to enable/disable the VREFINT channel.
0x42028308 C   FIELD 23w01 TSEN (rw): VSENSE enable This bit is set and cleared by software to control VSENSE.
0x42028308 C   FIELD 24w01 VBATEN (rw): VBAT enable This bit is set and cleared by software to control.
0x420283F0 B  REGISTER HWCFGR0: ADC hardware configuration register
0x420283F0 C   FIELD 00w04 ADCNUM (ro): Number of ADCs implemented
0x420283F0 C   FIELD 04w04 MULPIPE (ro): Number of pipeline stages
0x420283F0 C   FIELD 08w04 OPBITS (ro): Number of option bits 0002: 2 option bits implemented in the ADC option register (ADC_OR) at address offset 0xC8
0x420283F0 C   FIELD 12w04 IDLEVALUE (ro): Idle value for non-selected channels
0x420283F4 B  REGISTER VERR: ADC version register
0x420283F4 C   FIELD 00w04 MINREV (ro): Minor revision These bits returns the ADC IP minor revision 0002: Major revision = X.2
0x420283F4 C   FIELD 04w04 MAJREV (ro): Major revision These bits returns the ADC IP major revision
0x420283F8 B  REGISTER IPDR: ADC identification register
0x420283F8 C   FIELD 00w32 ID (ro): Peripheral identifier These bits returns the ADC identifier. ID[31:0] = 0x0011 0006: c7amba_aditf5_90_v1
0x420283FC B  REGISTER SIDR: ADC size identification register
0x420283FC C   FIELD 00w32 SID (ro): Size Identification SID[31:8]: fixed code that characterizes the ADC_SIDR register. This field is always read at 0xA3C5DD. SID[7:0]: read-only numeric field that returns the address offset (in Kbytes) of the identification registers from the IP base address:
0x42028400 A PERIPHERAL DAC
0x42028400 B  REGISTER CR: DAC control register
0x42028400 C   FIELD 00w01 EN1 (rw): DAC channel1 enable This bit is set and cleared by software to enable/disable DAC channel1.
0x42028400 C   FIELD 01w01 TEN1 (rw): DAC channel1 trigger enable This bit is set and cleared by software to enable/disable DAC channel1 trigger. Note: When software trigger is selected, the transfer from the DAC_DHR1 register to the DAC_DOR1 register takes only one dac_hclk clock cycle.
0x42028400 C   FIELD 02w04 TSEL1 (rw): DAC channel1 trigger selection These bits select the external event used to trigger DAC channel1 ... Refer to the trigger selection tables in for details on trigger configuration and mapping. Note: Only used if bit TEN1 = 1 (DAC channel1 trigger enabled).
0x42028400 C   FIELD 06w02 WAVE1 (rw): DAC channel1 noise/triangle wave generation enable These bits are set and cleared by software. 1x: Triangle wave generation enabled Only used if bit TEN1 = 1 (DAC channel1 trigger enabled).
0x42028400 C   FIELD 08w04 MAMP1 (rw): DAC channel1 mask/amplitude selector These bits are written by software to select mask in wave generation mode or amplitude in triangle generation mode. greater than or equal 1011: Unmask bits[11:0] of LFSR/ triangle amplitude equal to 4095
0x42028400 C   FIELD 12w01 DMAEN1 (rw): DAC channel1 DMA enable This bit is set and cleared by software.
0x42028400 C   FIELD 13w01 DMAUDRIE1 (rw): DAC channel1 DMA Underrun Interrupt enable This bit is set and cleared by software.
0x42028400 C   FIELD 14w01 CEN1 (rw): DAC channel1 calibration enable This bit is set and cleared by software to enable/disable DAC channel1 calibration, it can be written only if bit EN1 = 0 into DAC_CR (the calibration mode can be entered/exit only when the DAC channel is disabled) Otherwise, the write operation is ignored.
0x42028400 C   FIELD 16w01 EN2 (rw): DAC channel2 enable This bit is set and cleared by software to enable/disable DAC channel2. Note: These bits are available only on dual-channel DACs. Refer to implementation.
0x42028400 C   FIELD 17w01 TEN2 (rw): DAC channel2 trigger enable This bit is set and cleared by software to enable/disable DAC channel2 trigger Note: When software trigger is selected, the transfer from the DAC_DHR2 register to the DAC_DOR2 register takes only one dac_hclk clock cycle. These bits are available only on dual-channel DACs. Refer to implementation.
0x42028400 C   FIELD 18w04 TSEL2 (rw): DAC channel2 trigger selection These bits select the external event used to trigger DAC channel2 ... Refer to the trigger selection tables in for details on trigger configuration and mapping. Note: Only used if bit TEN2 = 1 (DAC channel2 trigger enabled). These bits are available only on dual-channel DACs. Refer to implementation.
0x42028400 C   FIELD 22w02 WAVE2 (rw): DAC channel2 noise/triangle wave generation enable These bits are set/reset by software. 1x: Triangle wave generation enabled Note: Only used if bit TEN2 = 1 (DAC channel2 trigger enabled) These bits are available only on dual-channel DACs. Refer to implementation.
0x42028400 C   FIELD 24w04 MAMP2 (rw): DAC channel2 mask/amplitude selector These bits are written by software to select mask in wave generation mode or amplitude in triangle generation mode. greater than or equal 1011: Unmask bits[11:0] of LFSR/ triangle amplitude equal to 4095 Note: These bits are available only on dual-channel DACs. Refer to implementation.
0x42028400 C   FIELD 28w01 DMAEN2 (rw): DAC channel2 DMA enable This bit is set and cleared by software. Note: This bit is available only on dual-channel DACs. Refer to implementation.
0x42028400 C   FIELD 29w01 DMAUDRIE2 (rw): DAC channel2 DMA underrun interrupt enable This bit is set and cleared by software. Note: This bit is available only on dual-channel DACs. Refer to implementation.
0x42028400 C   FIELD 30w01 CEN2 (rw): DAC channel2 calibration enable This bit is set and cleared by software to enable/disable DAC channel2 calibration, it can be written only if EN2 bit is set to 0 into DAC_CR (the calibration mode can be entered/exit only when the DAC channel is disabled) Otherwise, the write operation is ignored. Note: This bit is available only on dual-channel DACs. Refer to implementation.
0x42028404 B  REGISTER SWTRGR: DAC software trigger register
0x42028404 C   FIELD 00w01 SWTRIG1 (wo): DAC channel1 software trigger This bit is set by software to trigger the DAC in software trigger mode. Note: This bit is cleared by hardware (one dac_hclk clock cycle later) once the DAC_DHR1 register value has been loaded into the DAC_DOR1 register.
0x42028404 C   FIELD 01w01 SWTRIG2 (wo): DAC channel2 software trigger This bit is set by software to trigger the DAC in software trigger mode. Note: This bit is cleared by hardware (one dac_hclk clock cycle later) once the DAC_DHR2 register value has been loaded into the DAC_DOR2 register. This bit is available only on dual-channel DACs. Refer to implementation.
0x42028408 B  REGISTER DHR12R1: DAC channel1 12-bit right-aligned data holding register
0x42028408 C   FIELD 00w12 DACC1DHR (rw): DAC channel1 12-bit right-aligned data These bits are written by software. They specify 12-bit data for DAC channel1.
0x42028408 C   FIELD 16w12 DACC1DHRB (rw): DAC channel1 12-bit right-aligned data B These bits are written by software. They specify 12-bit data for DAC channel1 when the DAC operates in Double data mode.
0x4202840C B  REGISTER DHR12L1: DAC channel1 12-bit left aligned data holding register
0x4202840C C   FIELD 04w12 DACC1DHR (rw): DAC channel1 12-bit left-aligned data These bits are written by software. They specify 12-bit data for DAC channel1.
0x4202840C C   FIELD 20w12 DACC1DHRB (rw): DAC channel1 12-bit left-aligned data B These bits are written by software. They specify 12-bit data for DAC channel1 when the DAC operates in Double data mode.
0x42028410 B  REGISTER DHR8R1: DAC channel1 8-bit right aligned data holding register
0x42028410 C   FIELD 00w08 DACC1DHR (rw): DAC channel1 8-bit right-aligned data These bits are written by software. They specify 8-bit data for DAC channel1.
0x42028410 C   FIELD 08w08 DACC1DHRB (rw): DAC channel1 8-bit right-aligned data These bits are written by software. They specify 8-bit data for DAC channel1 when the DAC operates in Double data mode.
0x42028414 B  REGISTER DHR12R2: DAC channel2 12-bit right aligned data holding register
0x42028414 C   FIELD 00w12 DACC2DHR (rw): DAC channel2 12-bit right-aligned data These bits are written by software. They specify 12-bit data for DAC channel2.
0x42028414 C   FIELD 16w12 DACC2DHRB (rw): DAC channel2 12-bit right-aligned data These bits are written by software. They specify 12-bit data for DAC channel2 when the DAC operates in DMA Double data mode.
0x42028418 B  REGISTER DHR12L2: DAC channel2 12-bit left aligned data holding register
0x42028418 C   FIELD 04w12 DACC2DHR (rw): DAC channel2 12-bit left-aligned data These bits are written by software which specify 12-bit data for DAC channel2.
0x42028418 C   FIELD 20w12 DACC2DHRB (rw): DAC channel2 12-bit left-aligned data B These bits are written by software. They specify 12-bit data for DAC channel2 when the DAC operates in Double data mode.
0x4202841C B  REGISTER DHR8R2: DAC channel2 8-bit right-aligned data holding register
0x4202841C C   FIELD 00w08 DACC2DHR (rw): DAC channel2 8-bit right-aligned data These bits are written by software which specifies 8-bit data for DAC channel2.
0x4202841C C   FIELD 08w08 DACC2DHRB (rw): DAC channel2 8-bit right-aligned data These bits are written by software. They specify 8-bit data for DAC channel2 when the DAC operates in Double data mode.
0x42028420 B  REGISTER DHR12RD: Dual DAC 12-bit right-aligned data holding register
0x42028420 C   FIELD 00w12 DACC1DHR (rw): DAC channel1 12-bit right-aligned data These bits are written by software which specifies 12-bit data for DAC channel1.
0x42028420 C   FIELD 16w12 DACC2DHR (rw): DAC channel2 12-bit right-aligned data These bits are written by software which specifies 12-bit data for DAC channel2.
0x42028424 B  REGISTER DHR12LD: Dual DAC 12-bit left aligned data holding register
0x42028424 C   FIELD 04w12 DACC1DHR (rw): DAC channel1 12-bit left-aligned data These bits are written by software which specifies 12-bit data for DAC channel1.
0x42028424 C   FIELD 20w12 DACC2DHR (rw): DAC channel2 12-bit left-aligned data These bits are written by software which specifies 12-bit data for DAC channel2.
0x42028428 B  REGISTER DHR8RD: Dual DAC 8-bit right aligned data holding register
0x42028428 C   FIELD 00w08 DACC1DHR (rw): DAC channel1 8-bit right-aligned data These bits are written by software which specifies 8-bit data for DAC channel1.
0x42028428 C   FIELD 08w08 DACC2DHR (rw): DAC channel2 8-bit right-aligned data These bits are written by software which specifies 8-bit data for DAC channel2.
0x4202842C B  REGISTER DOR1: DAC channel1 data output register
0x4202842C C   FIELD 00w12 DACC1DOR (ro): DAC channel1 data output These bits are read-only, they contain data output for DAC channel1.
0x4202842C C   FIELD 16w12 DACC1DORB (ro): DAC channel1 data output These bits are read-only. They contain data output for DAC channel1 B.
0x42028430 B  REGISTER DOR2: DAC channel2 data output register
0x42028430 C   FIELD 00w12 DACC2DOR (ro): DAC channel2 data output These bits are read-only, they contain data output for DAC channel2.
0x42028430 C   FIELD 16w12 DACC2DORB (ro): DAC channel2 data output These bits are read-only. They contain data output for DAC channel2 B.
0x42028434 B  REGISTER SR: DAC status register
0x42028434 C   FIELD 11w01 DAC1RDY (ro): DAC channel1 ready status bit This bit is set and cleared by hardware.
0x42028434 C   FIELD 12w01 DORSTAT1 (ro): DAC channel1 output register status bit This bit is set and cleared by hardware. It is applicable only when the DAC operates in Double data mode.
0x42028434 C   FIELD 13w01 DMAUDR1 (rw): DAC channel1 DMA underrun flag This bit is set by hardware and cleared by software (by writing it to 1).
0x42028434 C   FIELD 14w01 CAL_FLAG1 (ro): DAC channel1 calibration offset status This bit is set and cleared by hardware
0x42028434 C   FIELD 15w01 BWST1 (ro): DAC channel1 busy writing sample time flag This bit is systematically set just after Sample and hold mode enable and is set each time the software writes the register DAC_SHSR1, It is cleared by hardware when the write operation of DAC_SHSR1 is complete. (It takes about 3 LSI/LSE periods of synchronization).
0x42028434 C   FIELD 27w01 DAC2RDY (ro): DAC channel2 ready status bit This bit is set and cleared by hardware. Note: This bit is available only on dual-channel DACs. Refer to implementation.
0x42028434 C   FIELD 28w01 DORSTAT2 (ro): DAC channel2 output register status bit This bit is set and cleared by hardware. It is applicable only when the DAC operates in Double data mode. Note: This bit is available only on dual-channel DACs. Refer to implementation.
0x42028434 C   FIELD 29w01 DMAUDR2 (rw): DAC channel2 DMA underrun flag This bit is set by hardware and cleared by software (by writing it to 1). Note: This bit is available only on dual-channel DACs. Refer to implementation.
0x42028434 C   FIELD 30w01 CAL_FLAG2 (ro): DAC channel2 calibration offset status This bit is set and cleared by hardware Note: This bit is available only on dual-channel DACs. Refer to implementation.
0x42028434 C   FIELD 31w01 BWST2 (ro): DAC channel2 busy writing sample time flag This bit is systematically set just after Sample and hold mode enable. It is set each time the software writes the register DAC_SHSR2, It is cleared by hardware when the write operation of DAC_SHSR2 is complete. (It takes about 3 LSI/LSE periods of synchronization). Note: This bit is available only on dual-channel DACs. Refer to implementation.
0x42028438 B  REGISTER CCR: DAC calibration control register
0x42028438 C   FIELD 00w05 OTRIM1 (rw): DAC channel1 offset trimming value
0x42028438 C   FIELD 16w05 OTRIM2 (rw): DAC channel2 offset trimming value These bits are available only on dual-channel DACs. Refer to implementation.
0x4202843C B  REGISTER MCR: DAC mode control register
0x4202843C C   FIELD 00w03 MODE1 (rw): DAC channel1 mode These bits can be written only when the DAC is disabled and not in the calibration mode (when bit EN1 = 0 and bit CEN1 = 0 in the DAC_CR register). If EN1 = 1 or CEN1 = 1 the write operation is ignored. They can be set and cleared by software to select the DAC channel1 mode: DAC channel1 in Normal mode DAC channel1 in sample & hold mode Note: This register can be modified only when EN1 = 0.
0x4202843C C   FIELD 08w01 DMADOUBLE1 (rw): DAC channel1 DMA double data mode This bit is set and cleared by software.
0x4202843C C   FIELD 09w01 SINFORMAT1 (rw): Enable signed format for DAC channel1 This bit is set and cleared by software.
0x4202843C C   FIELD 14w01 HFSEL0 (rw): High frequency interface mode selection
0x4202843C C   FIELD 15w01 HFSEL1 (rw): High frequency interface mode selection
0x4202843C C   FIELD 16w03 MODE2 (rw): DAC channel2 mode These bits can be written only when the DAC is disabled and not in the calibration mode (when bit EN2 = 0 and bit CEN2 = 0 in the DAC_CR register). If EN2 = 1 or CEN2 = 1 the write operation is ignored. They can be set and cleared by software to select the DAC channel2 mode: DAC channel2 in Normal mode DAC channel2 in Sample and hold mode Note: This register can be modified only when EN2 = 0. Refer to for the availability of DAC channel2.
0x4202843C C   FIELD 24w01 DMADOUBLE2 (rw): DAC channel2 DMA double data mode This bit is set and cleared by software. Note: This bit is available only on dual-channel DACs. Refer to implementation.
0x4202843C C   FIELD 25w01 SINFORMAT2 (rw): Enable signed format for DAC channel2 This bit is set and cleared by software. Note: This bit is available only on dual-channel DACs. Refer to implementation.
0x42028440 B  REGISTER SHSR1: DAC channel1 sample and hold sample time register
0x42028440 C   FIELD 00w10 TSAMPLE1 (rw): DAC channel1 sample time (only valid in Sample and hold mode) These bits can be written when the DAC channel1 is disabled or also during normal operation. in the latter case, the write can be done only when BWST1 of DAC_SR register is low, If BWST1 = 1, the write operation is ignored.
0x42028444 B  REGISTER SHSR2: DAC channel2 sample and hold sample time register
0x42028444 C   FIELD 00w10 TSAMPLE2 (rw): DAC channel2 sample time (only valid in Sample and hold mode) These bits can be written when the DAC channel2 is disabled or also during normal operation. in the latter case, the write can be done only when BWST2 of DAC_SR register is low, if BWST2 = 1, the write operation is ignored.
0x42028448 B  REGISTER SHHR: DAC sample and hold time register
0x42028448 C   FIELD 00w10 THOLD1 (rw): DAC channel1 hold time (only valid in Sample and hold mode) Hold time = (THOLD[9:0]) x LSI/LSE clock period Note: This register can be modified only when EN1 = 0.
0x42028448 C   FIELD 16w10 THOLD2 (rw): DAC channel2 hold time (only valid in Sample and hold mode). Hold time = (THOLD[9:0]) x LSI/LSE clock period Note: This register can be modified only when EN2 = 0. These bits are available only on dual-channel DACs. Refer to implementation.
0x4202844C B  REGISTER SHRR: DAC sample and hold refresh time register
0x4202844C C   FIELD 00w08 TREFRESH1 (rw): DAC channel1 refresh time (only valid in Sample and hold mode) Refresh time = (TREFRESH[7:0]) x LSI/LSE clock period Note: This register can be modified only when EN1 = 0.
0x4202844C C   FIELD 16w08 TREFRESH2 (rw): DAC channel2 refresh time (only valid in Sample and hold mode) Refresh time = (TREFRESH[7:0]) x LSI/LSE clock period Note: This register can be modified only when EN2 = 0. These bits are available only on dual-channel DACs. Refer to implementation.
0x420C0400 A PERIPHERAL HASH
0x420C0400 B  REGISTER CR: HASH control register
0x420C0400 C   FIELD 02w01 INIT (rw): Initialize message digest calculation Writing this bit to 1 resets the hash processor core, so that the HASH is ready to compute the message digest of a new message. Writing this bit to 0 has no effect. Reading this bit always returns 0.
0x420C0400 C   FIELD 03w01 DMAE (rw): DMA enable After this bit is set, it is cleared by hardware while the last data of the message is written into the hash processor. Setting this bit to 0 while a DMA transfer is ongoing does not abort the current transfer. Instead, the DMA interface of the HASH remains internally enabled until the transfer is completed or INIT is written to 1. Setting INIT bit to 1 does not clear DMAE bit.
0x420C0400 C   FIELD 04w02 DATATYPE (rw): Data type selection This bitfield defines the format of the data entered into the HASH_DIN register:
0x420C0400 C   FIELD 06w01 MODE (rw): Mode selection This bit selects the normal or the keyed HMAC mode for the selected algorithm: This selection is only taken into account when the INIT bit is set. Changing this bit during a computation has no effect.
0x420C0400 C   FIELD 08w04 NBW (ro): Number of words already pushed Refer to NBWP[3:0] bitfield of HASH_SR for a description of NBW[3:0] bitfield. This bit is read-only.
0x420C0400 C   FIELD 12w01 DINNE (ro): DIN not empty Refer to DINNE bit of HASH_SR for a description of DINNE bit. This bit is read-only.
0x420C0400 C   FIELD 13w01 MDMAT (rw): Multiple DMA transfers This bit is set when hashing large files when multiple DMA transfers are needed.
0x420C0400 C   FIELD 16w01 LKEY (rw): Long key selection The application must set this bit if the HMAC key is greater than the block size (64 bytes) This selection is only taken into account when the INIT and MODE bits are set (HMAC mode selected). Changing this bit during a computation has no effect.
0x420C0400 C   FIELD 17w02 ALGO (rw): Algorithm selection These bits select the hash algorithm: This selection is only taken into account when the INIT bit is set. Changing this bitfield during a computation has no effect. When the ALGO bitfield is updated and INIT bit is set, NBWE in HASH_SR is automatically updated to 0x11.
0x420C0404 B  REGISTER DIN: HASH data input register
0x420C0404 C   FIELD 00w32 DATAIN (wo): Data input Writing this register pushes the current register content into the FIFO, and the register takes the new value presented on the AHB bus. Reading this register returns zeros.
0x420C0408 B  REGISTER STR: HASH start register
0x420C0408 C   FIELD 00w05 NBLW (rw): Number of valid bits in the last word When the last word of the message bit string is written to HASH_DIN register, the hash processor takes only the valid bits, specified as below, after internal data swapping: ... The above mechanism is valid only if DCAL = 0. If NBLW bits are written while DCAL is set to 1, the NBLW bitfield remains unchanged. In other words it is not possible to configure NBLW and set DCAL at the same time. Reading NBLW bits returns the last value written to NBLW.
0x420C0408 C   FIELD 08w01 DCAL (rw): Digest calculation Writing this bit to 1 starts the message padding using the previously written value of NBLW, and starts the calculation of the final message digest with all the data words written to the input FIFO since the INIT bit was last written to 1. Reading this bit returns 0.
0x420C040C B  REGISTER HRA0: HASH aliased digest register 0
0x420C040C C   FIELD 00w32 H0 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C0410 B  REGISTER HRA1: HASH aliased digest register 1
0x420C0410 C   FIELD 00w32 H1 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C0414 B  REGISTER HRA2: HASH aliased digest register 2
0x420C0414 C   FIELD 00w32 H2 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C0418 B  REGISTER HRA3: HASH aliased digest register 3
0x420C0418 C   FIELD 00w32 H3 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C041C B  REGISTER HRA4: HASH aliased digest register 4
0x420C041C C   FIELD 00w32 H4 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C0420 B  REGISTER IMR: HASH interrupt enable register
0x420C0420 C   FIELD 00w01 DINIE (rw): Data input interrupt enable
0x420C0420 C   FIELD 01w01 DCIE (rw): Digest calculation completion interrupt enable
0x420C0424 B  REGISTER SR: HASH status register
0x420C0424 C   FIELD 00w01 DINIS (rw): Data input interrupt status This bit is set by hardware when the FIFO is ready to get a new block (16 locations are free). It is cleared by writing it to 0 or by writing the HASH_DIN register. When DINIS = 0, HASH_CSRx registers reads as zero.
0x420C0424 C   FIELD 01w01 DCIS (rw): Digest calculation completion interrupt status This bit is set by hardware when a digest becomes ready (the whole message has been processed). It is cleared by writing it to 0 or by writing the INIT bit to 1 in the HASH_CR register.
0x420C0424 C   FIELD 02w01 DMAS (ro): DMA Status This bit provides information on the DMA interface activity. It is set with DMAE and cleared when DMAE = 0 and no DMA transfer is ongoing. No interrupt is associated with this bit.
0x420C0424 C   FIELD 03w01 BUSY (ro): Busy bit
0x420C0424 C   FIELD 09w05 NBWP (ro): Number of words already pushed This bitfield is the exact number of words in the message that have already been pushed into the FIFO. NBWP is incremented by 1 when a write access is performed to the HASH_DIN register. When a digest calculation starts, NBWP is updated to NBWP- block size (in words), and NBWP goes to zero when the INIT bit is written to 1.
0x420C0424 C   FIELD 15w01 DINNE (ro): DIN not empty This bit is set when the HASH_DIN register holds valid data (that is after being written at least once). It is cleared when either the INIT bit (initialization) or the DCAL bit (completion of the previous message processing) is written to 1.
0x420C0424 C   FIELD 16w05 NBWE (ro): Number of words expected This bitfield reflects the number of words in the message that must be pushed into the FIFO to trigger a partial computation. NBWE is decremented by 1 when a write access is performed to the HASH_DIN register. NBWE is set to the expected block size +1 in words (0x11) when INIT bit is set in HASH_CR. It is set to the expected block size (0x10) when the partial digest calculation ends.
0x420C04F8 B  REGISTER CSR0: HASH context swap register 0
0x420C04F8 C   FIELD 00w32 CS0 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C04FC B  REGISTER CSR1: HASH context swap register 1
0x420C04FC C   FIELD 00w32 CS1 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0500 B  REGISTER CSR2: HASH context swap register 2
0x420C0500 C   FIELD 00w32 CS2 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0504 B  REGISTER CSR3: HASH context swap register 3
0x420C0504 C   FIELD 00w32 CS3 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0508 B  REGISTER CSR4: HASH context swap register 4
0x420C0508 C   FIELD 00w32 CS4 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C050C B  REGISTER CSR5: HASH context swap register 5
0x420C050C C   FIELD 00w32 CS5 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0510 B  REGISTER CSR6: HASH context swap register 6
0x420C0510 C   FIELD 00w32 CS6 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0514 B  REGISTER CSR7: HASH context swap register 7
0x420C0514 C   FIELD 00w32 CS7 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0518 B  REGISTER CSR8: HASH context swap register 8
0x420C0518 C   FIELD 00w32 CS8 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C051C B  REGISTER CSR9: HASH context swap register 9
0x420C051C C   FIELD 00w32 CS9 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0520 B  REGISTER CSR10: HASH context swap register 10
0x420C0520 C   FIELD 00w32 CS10 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0524 B  REGISTER CSR11: HASH context swap register 11
0x420C0524 C   FIELD 00w32 CS11 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0528 B  REGISTER CSR12: HASH context swap register 12
0x420C0528 C   FIELD 00w32 CS12 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C052C B  REGISTER CSR13: HASH context swap register 13
0x420C052C C   FIELD 00w32 CS13 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0530 B  REGISTER CSR14: HASH context swap register 14
0x420C0530 C   FIELD 00w32 CS14 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0534 B  REGISTER CSR15: HASH context swap register 15
0x420C0534 C   FIELD 00w32 CS15 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0538 B  REGISTER CSR16: HASH context swap register 16
0x420C0538 C   FIELD 00w32 CS16 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C053C B  REGISTER CSR17: HASH context swap register 17
0x420C053C C   FIELD 00w32 CS17 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0540 B  REGISTER CSR18: HASH context swap register 18
0x420C0540 C   FIELD 00w32 CS18 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0544 B  REGISTER CSR19: HASH context swap register 19
0x420C0544 C   FIELD 00w32 CS19 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0548 B  REGISTER CSR20: HASH context swap register 20
0x420C0548 C   FIELD 00w32 CS20 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C054C B  REGISTER CSR21: HASH context swap register 21
0x420C054C C   FIELD 00w32 CS21 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0550 B  REGISTER CSR22: HASH context swap register 22
0x420C0550 C   FIELD 00w32 CS22 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0554 B  REGISTER CSR23: HASH context swap register 23
0x420C0554 C   FIELD 00w32 CS23 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0558 B  REGISTER CSR24: HASH context swap register 24
0x420C0558 C   FIELD 00w32 CS24 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C055C B  REGISTER CSR25: HASH context swap register 25
0x420C055C C   FIELD 00w32 CS25 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0560 B  REGISTER CSR26: HASH context swap register 26
0x420C0560 C   FIELD 00w32 CS26 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0564 B  REGISTER CSR27: HASH context swap register 27
0x420C0564 C   FIELD 00w32 CS27 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0568 B  REGISTER CSR28: HASH context swap register 28
0x420C0568 C   FIELD 00w32 CS28 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C056C B  REGISTER CSR29: HASH context swap register 29
0x420C056C C   FIELD 00w32 CS29 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0570 B  REGISTER CSR30: HASH context swap register 30
0x420C0570 C   FIELD 00w32 CS30 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0574 B  REGISTER CSR31: HASH context swap register 31
0x420C0574 C   FIELD 00w32 CS31 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0578 B  REGISTER CSR32: HASH context swap register 32
0x420C0578 C   FIELD 00w32 CS32 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C057C B  REGISTER CSR33: HASH context swap register 33
0x420C057C C   FIELD 00w32 CS33 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0580 B  REGISTER CSR34: HASH context swap register 34
0x420C0580 C   FIELD 00w32 CS34 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0584 B  REGISTER CSR35: HASH context swap register 35
0x420C0584 C   FIELD 00w32 CS35 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0588 B  REGISTER CSR36: HASH context swap register 36
0x420C0588 C   FIELD 00w32 CS36 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C058C B  REGISTER CSR37: HASH context swap register 37
0x420C058C C   FIELD 00w32 CS37 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0590 B  REGISTER CSR38: HASH context swap register 38
0x420C0590 C   FIELD 00w32 CS38 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0594 B  REGISTER CSR39: HASH context swap register 39
0x420C0594 C   FIELD 00w32 CS39 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0598 B  REGISTER CSR40: HASH context swap register 40
0x420C0598 C   FIELD 00w32 CS40 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C059C B  REGISTER CSR41: HASH context swap register 41
0x420C059C C   FIELD 00w32 CS41 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05A0 B  REGISTER CSR42: HASH context swap register 42
0x420C05A0 C   FIELD 00w32 CS42 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05A4 B  REGISTER CSR43: HASH context swap register 43
0x420C05A4 C   FIELD 00w32 CS43 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05A8 B  REGISTER CSR44: HASH context swap register 44
0x420C05A8 C   FIELD 00w32 CS44 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05AC B  REGISTER CSR45: HASH context swap register 45
0x420C05AC C   FIELD 00w32 CS45 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05B0 B  REGISTER CSR46: HASH context swap register 46
0x420C05B0 C   FIELD 00w32 CS46 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05B4 B  REGISTER CSR47: HASH context swap register 47
0x420C05B4 C   FIELD 00w32 CS47 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05B8 B  REGISTER CSR48: HASH context swap register 48
0x420C05B8 C   FIELD 00w32 CS48 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05BC B  REGISTER CSR49: HASH context swap register 49
0x420C05BC C   FIELD 00w32 CS49 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05C0 B  REGISTER CSR50: HASH context swap register 50
0x420C05C0 C   FIELD 00w32 CS50 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05C4 B  REGISTER CSR51: HASH context swap register 51
0x420C05C4 C   FIELD 00w32 CS51 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05C8 B  REGISTER CSR52: HASH context swap register 52
0x420C05C8 C   FIELD 00w32 CS52 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C05CC B  REGISTER CSR53: HASH context swap register 53
0x420C05CC C   FIELD 00w32 CS53 (rw): Context swap x Refer to Section 24.7.7: HASH context swap registers introduction.
0x420C0710 B  REGISTER HR0: HASH digest register 0
0x420C0710 C   FIELD 00w32 H0 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C0714 B  REGISTER HR1: HASH digest register 1
0x420C0714 C   FIELD 00w32 H1 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C0718 B  REGISTER HR2: HASH digest register 2
0x420C0718 C   FIELD 00w32 H2 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C071C B  REGISTER HR3: HASH digest register 3
0x420C071C C   FIELD 00w32 H3 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C0720 B  REGISTER HR4: HASH digest register 4
0x420C0720 C   FIELD 00w32 H4 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C0724 B  REGISTER HR5: HASH supplementary digest register 5
0x420C0724 C   FIELD 00w32 H5 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C0728 B  REGISTER HR6: HASH supplementary digest register 6
0x420C0728 C   FIELD 00w32 H6 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C072C B  REGISTER HR7: HASH supplementary digest register 7
0x420C072C C   FIELD 00w32 H7 (ro): Hash data x Refer to Section 24.7.4: HASH digest registers introduction.
0x420C0800 A PERIPHERAL RNG
0x420C0800 B  REGISTER CR: RNG control register
0x420C0800 C   FIELD 02w01 RNGEN (rw): True random number generator enable
0x420C0800 C   FIELD 03w01 IE (rw): Interrupt Enable
0x420C0800 C   FIELD 05w01 CED (rw): Clock error detection The clock error detection cannot be enabled nor disabled on-the-fly when the RNG is enabled, i.e. to enable or disable CED the RNG must be disabled. Writing this bit is taken into account only if CONDRST bit is set to 1 in the same access, while CONFIGLOCK remains at 0. Writing to this bit is ignored if CONFIGLOCK = 1.
0x420C0800 C   FIELD 07w01 ARDIS (rw): Auto reset disable When auto-reset is enabled application still need to clear SEIS bit after a noise source error. Writing this bit is taken into account only if CONDRST bit is set to 1 in the same access, while CONFIGLOCK remains at 0. Writing to this bit is ignored if CONFIGLOCK = 1.
0x420C0800 C   FIELD 08w04 RNG_CONFIG3 (rw): RNG configuration 3 Reserved to the RNG configuration (bitfield 3). Refer to RNG_CONFIG1 bitfield for details. If NISTC bit is cleared in this register RNG_CONFIG3 bitfield values are ignored by RNG.
0x420C0800 C   FIELD 12w01 NISTC (rw): Non NIST compliant two conditioning loops are performed and 256 bits of noise source are used. Writing this bit is taken into account only if CONDRST bit is set to 1 in the same access, while CONFIGLOCK remains at 0. Writing to this bit is ignored if CONFIGLOCK = 1.
0x420C0800 C   FIELD 13w03 RNG_CONFIG2 (rw): RNG configuration 2 Reserved to the RNG configuration (bitfield 2). Refer to RNG_CONFIG1 bitfield for details.
0x420C0800 C   FIELD 16w04 CLKDIV (rw): Clock divider factor This value used to configure an internal programmable divider (from 1 to 16) acting on the incoming RNG clock. These bits can be written only when the core is disabled (RNGEN = 0). ... Writing these bits is taken into account only if CONDRST bit is set to 1 in the same access, while CONFIGLOCK remains at 0. Writing to this bit is ignored if CONFIGLOCK = 1.
0x420C0800 C   FIELD 20w06 RNG_CONFIG1 (rw): RNG configuration 1 Reserved to the RNG configuration (bitfield 1). Must be initialized using the recommended value documented in Section 23.6: RNG entropy source validation. Writing any bit of RNG_CONFIG1 is taken into account only if CONDRST bit is set to 1 in the same access, while CONFIGLOCK remains at 0. Writing to this bit is ignored if CONFIGLOCK = 1.
0x420C0800 C   FIELD 30w01 CONDRST (rw): Conditioning soft reset Write 1 and then write 0 to reset the conditioning logic, clear all the FIFOs and start a new RNG initialization process, with RNG_SR cleared. Registers RNG_CR and RNG_NSCR are not changed by CONDRST. This bit must be set to 1 in the same access that set any configuration bits [29:4]. In other words, when CONDRST bit is set to 1 correct configuration in bits [29:4] must also be written. When CONDRST is set to 0 by software its value goes to 0 when the reset process is done. It takes about 2 AHB clock cycles + 2 RNG clock cycles.
0x420C0800 C   FIELD 31w01 CONFIGLOCK (rw): RNG Config lock This bitfield is set once: if this bit is set it can only be reset to 0 if RNG is reset.
0x420C0804 B  REGISTER SR: RNG status register
0x420C0804 C   FIELD 00w01 DRDY (ro): Data Ready Once the output buffer becomes empty (after reading the RNG_DR register), this bit returns to 0 until a new random value is generated. Note: The DRDY bit can rise when the peripheral is disabled (RNGEN = 0 in the RNG_CR register). If IE=1 in the RNG_CR register, an interrupt is generated when DRDY = 1.
0x420C0804 C   FIELD 01w01 CECS (ro): Clock error current status Note: CECS bit is valid only if the CED bit in the RNG_CR register is set to 0.
0x420C0804 C   FIELD 02w01 SECS (ro): Seed error current status Run-time repetition count test failed (noise source has provided more than 24 consecutive bits at a constant value 0 or 1, or more than 32 consecutive occurrence of two bits patterns 01 or 10) Start-up or continuous adaptive proportion test on noise source failed. Start-up post-processing/conditioning sanity check failed.
0x420C0804 C   FIELD 05w01 CEIS (rw): Clock error interrupt status This bit is set at the same time as CECS. It is cleared by writing 0. Writing 1 has no effect. An interrupt is pending if IE = 1 in the RNG_CR register.
0x420C0804 C   FIELD 06w01 SEIS (rw): Seed error interrupt status This bit is set at the same time as SECS. It is cleared by writing 0 (unless CONDRST is used). Writing 1 has no effect. An interrupt is pending if IE = 1 in the RNG_CR register.
0x420C0808 B  REGISTER DR: RNG data register
0x420C0808 C   FIELD 00w32 RNDATA (ro): Random data 32-bit random data which are valid when DRDY = 1. When DRDY = 0 RNDATA value is zero. It is recommended to always verify that RNG_DR is different from zero. Because when it is the case a seed error occurred between RNG_SR polling and RND_DR output reading (rare event).
0x420C080C B  REGISTER NSCR: RNG noise source control register
0x420C080C C   FIELD 00w03 EN_OSC1: Each bit drives one oscillator enable signal input of instance number 1, gated with the RNGEN bit in RNG_CR (set bit to enable the oscillator).
0x420C080C C   FIELD 03w03 EN_OSC2: Each bit drives one oscillator enable signal input of instance number 2, gated with the RNGEN bit in RNG_CR (set bit to enable the oscillator).
0x420C080C C   FIELD 06w03 EN_OSC3: Each bit drives one oscillator enable signal input of instance number 3, gated with the RNGEN bit in RNG_CR (set bit to enable the oscillator).
0x420C080C C   FIELD 09w03 EN_OSC4: Each bit drives one oscillator enable signal input of instance number 4, gated with the RNGEN bit in RNG_CR (set bit to enable the oscillator).
0x420C080C C   FIELD 12w03 EN_OSC5: Each bit drives one oscillator enable signal input of instance number 5, gated with the RNGEN bit in RNG_CR (set bit to enable the oscillator).
0x420C080C C   FIELD 15w03 EN_OSC6: Each bit drives one oscillator enable signal input of instance number 6, gated with the RNGEN bit in RNG_CR (set bit to enable the oscillator).
0x420C0810 B  REGISTER HTCR: RNG health test control register
0x420C0810 C   FIELD 00w32 HTCFG (rw): health test configuration This configuration is used by RNG to configure the health tests. See Section 23.6: RNG entropy source validation for the recommended value. Note: The RNG behavior, including the read to this register, is not guaranteed if a different value from the recommended value is written.
0x44000400 A PERIPHERAL SBS
0x44000410 B  REGISTER HDPLCR: SBS temporal isolation control register
0x44000410 C   FIELD 00w08 INCR_HDPL (rw): increment HDPL value Other: all other values allow a HDPL level increment.
0x44000414 B  REGISTER HDPLSR: SBS temporal isolation status register
0x44000414 C   FIELD 00w08 HDPL (ro): temporal isolation level This bitfield returns the current temporal isolation level.
0x44000420 B  REGISTER DBGCR: SBS debug control register
0x44000420 C   FIELD 00w08 AP_UNLOCK (rw): access port unlock Write 0xB4 to this bitfield to open the device access port.
0x44000420 C   FIELD 08w08 DBG_UNLOCK (rw): debug unlock when DBG_AUTH_HDPL is reached Write 0xB4 to this bitfield to open the debug when HDPL in SBS_HDPLSR equals to DBG_AUTH_HDPL in this register.
0x44000420 C   FIELD 16w08 DBG_AUTH_HDPL (rw): authenticated debug temporal isolation level Writing to this bitfield defines at which HDPL the authenticated debug opens. Note: Writing any other values is ignored. Reading any other value means the debug never opens.
0x44000424 B  REGISTER DBGLOCKR: SBS debug lock register
0x44000424 C   FIELD 00w08 DBGCFG_LOCK (rw): debug configuration lock Reading this bitfield returns 0x6A if the bitfield value is different from 0xB4. 0xC3 is the recommended value to lock the debug configuration using this bitfield. Other: Writes to SBS_DBGCR ignored
0x44000500 B  REGISTER PMCR: SBS product mode and configuration register
0x44000500 C   FIELD 08w01 BOOSTEN (rw): booster enable Set this bit to reduce the total harmonic distortion of the analog switch when the processor supply is below 2.7 V. The booster can be activated to guaranty AC performance on analog switch when the supply is below 2.7 V. When the booster is activated, the analog switch performances are the same as with the full voltage range.
0x44000500 C   FIELD 09w01 BOOSTVDDSEL (rw): booster V DD selection Note: Booster must not be used when V DDA 2.7 V, but V DD 2.7 V (add current consumption). Note: When both V DD 2.7 V and V DDA 2.7 V, booster is needed to get full AC performances from I/O analog switches.
0x44000500 C   FIELD 16w01 PB6_FMP (rw): Fast-mode Plus command on PB(6)
0x44000500 C   FIELD 17w01 PB7_FMP (rw): Fast-mode Plus command on PB(7)
0x44000500 C   FIELD 18w01 PB8_FMP (rw): Fast-mode Plus command on PB(8)
0x44000504 B  REGISTER FPUIMR: SBS FPU interrupt mask register
0x44000504 C   FIELD 00w01 FPU_IE0: FPU interrupt enable
0x44000504 C   FIELD 01w01 FPU_IE1: FPU interrupt enable
0x44000504 C   FIELD 02w01 FPU_IE2: FPU interrupt enable
0x44000504 C   FIELD 03w01 FPU_IE3: FPU interrupt enable
0x44000504 C   FIELD 04w01 FPU_IE4: FPU interrupt enable
0x44000504 C   FIELD 05w01 FPU_IE5: FPU interrupt enable
0x44000508 B  REGISTER MESR: SBS memory erase status register
0x44000508 C   FIELD 00w01 MCLR (rw): erase after reset status This bit shows the status of the protection for SRAM2, BKPRAM, ICACHE, ICACHE. It is set by hardware and reset by software
0x44000508 C   FIELD 16w01 IPMEE (rw): end-of-erase status for ICACHE This bit shows the status of the protection for ICACHE. It is set by hardware and reset by software.
0x44000510 B  REGISTER CCCSR: SBS compensation cell for I/Os control and status register
0x44000510 C   FIELD 00w01 EN1 (rw): enable compensation cell for VDDIO power rail This bit enables the I/O compensation cell.
0x44000510 C   FIELD 01w01 CS1 (rw): code selection for VDDIO power rail (reset value set to 1) This bit selects the code to be applied for the I/O compensation cell.
0x44000510 C   FIELD 02w01 EN2 (rw): enable compensation cell for VDDIO2 power rail This bit enables the I/O compensation cell.
0x44000510 C   FIELD 03w01 CS2 (rw): code selection for VDDIO2 power rail (reset value set to 1) This bit selects the code to be applied for the I/O compensation cell.
0x44000510 C   FIELD 08w01 RDY1 (ro): VDDIO compensation cell ready flag This bit provides the status of the compensation cell.
0x44000510 C   FIELD 09w01 RDY2 (ro): VDDIO2 compensation cell ready flag This bit provides the status of the VDDIO2 compensation cell.
0x44000514 B  REGISTER CCVALR: SBS compensation cell for I/Os value register
0x44000514 C   FIELD 00w04 ANSRC1 (ro): compensation value for the NMOS transistor This value is provided by the cell and must be interpreted by the processor to compensate the slew rate in the functional range.
0x44000514 C   FIELD 04w04 APSRC1 (ro): compensation value for the PMOS transistor This value is provided by the cell and must be interpreted by the processor to compensate the slew rate in the functional range.
0x44000514 C   FIELD 08w04 ANSRC2 (ro): Compensation value for the NMOS transistor This value is provided by the cell and must be interpreted by the processor to compensate the slew rate in the functional range.
0x44000514 C   FIELD 12w04 APSRC2 (ro): compensation value for the PMOS transistor This value is provided by the cell and must be interpreted by the processor to compensate the slew rate in the functional range.
0x44000518 B  REGISTER CCSWCR: SBS compensation cell for I/Os software code register
0x44000518 C   FIELD 00w04 SW_ANSRC1 (rw): NMOS compensation code for VDD power rails This bitfield is written by software to define an I/O compensation cell code for NMOS transistors of the VDD power rail. This code is applied to the I/O when CS1 is set in SBS_CCSR.
0x44000518 C   FIELD 04w04 SW_APSRC1 (rw): PMOS compensation code for the VDD power rails This bitfield is written by software to define an I/O compensation cell code for PMOS transistors of the VDDIO power rail. This code is applied to the I/O when CS1 is set in SBS_CCSR.
0x44000518 C   FIELD 08w04 SW_ANSRC2 (rw): NMOS compensation code for VDDIO power rails This bitfield is written by software to define an I/O compensation cell code for NMOS transistors of the VDD power rail. This code is applied to the I/O when CS2 is set in SBS_CCSR.
0x44000518 C   FIELD 12w04 SW_APSRC2 (rw): PMOS compensation code for the V DDIO power rails This bitfield is written by software to define an I/O compensation cell code for PMOS transistors of the VDDIO power rail. This code is applied to the I/O when CS2 is set in SBS_CCSR.
0x44000520 B  REGISTER CFGR2: SBS Class B register
0x44000520 C   FIELD 00w01 CLL (rw): core lockup lock This bit is set by software and cleared only by a system reset. It can be used to enable and lock the lockup (HardFault) output of Cortex-M33 with TIM1 break inputs.
0x44000520 C   FIELD 01w01 SEL (rw): SRAM ECC error lock This bit is set by software and cleared only by a system reset. It can be used to enable and lock the SRAM double ECC error signal with break input of TIM1.
0x44000520 C   FIELD 02w01 PVDL (rw): PVD lock This bit is set by software and cleared only by a system reset. It can be used to enable and lock the PVD connection with TIM1 break inputs.
0x44000520 C   FIELD 03w01 ECCL (rw): ECC lock This bit is set and cleared by software. It can be used to enable and lock the Flash memory double ECC error with break input of TIM1.
0x44000544 B  REGISTER CNSLCKR: SBS CPU lock register
0x44000544 C   FIELD 00w01 LOCKNSVTOR (rw): VTOR_NS register lock This bit is set by software and cleared only by a system reset.
0x44000544 C   FIELD 01w01 LOCKNSMPU (rw): MPU register lock This bit is set by software and cleared only by a system reset. When set, this bit disables write access to MPU_CTRL_NS, MPU_RNR_NS and MPU_RBAR_NS registers.
0x4400054C B  REGISTER ECCNMIR: SBS flift ECC NMI mask register
0x4400054C C   FIELD 00w01 ECCNMI_MASK_EN (rw): NMI behavior setup when a double ECC error occurs on flitf data part
0x44002400 A PERIPHERAL LPUART
0x44002400 B  REGISTER CR1_disabled: LPUART control register 1 [alternate]
0x44002400 B  REGISTER CR1_enabled: LPUART control register 1 [alternate]
0x44002400 C   FIELD 00w01 UE (rw): LPUART enable When this bit is cleared, the LPUART prescalers and outputs are stopped immediately, and current operations are discarded. The configuration of the LPUART is kept, but all the status flags, in the LPUART_ISR are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be reset before and the software must wait for the TC bit in the LPUART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
0x44002400 C   FIELD 00w01 UE (rw): LPUART enable When this bit is cleared, the LPUART prescalers and outputs are stopped immediately, and current operations are discarded. The configuration of the LPUART is kept, but all the status flags, in the LPUART_ISR are reset. This bit is set and cleared by software. Note: To enter low-power mode without generating errors on the line, the TE bit must be reset before and the software must wait for the TC bit in the LPUART_ISR to be set before resetting the UE bit. The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.
0x44002400 C   FIELD 01w01 UESM (rw): LPUART enable in low-power mode When this bit is cleared, the LPUART cannot wake up the MCU from low-power mode. When this bit is set, the LPUART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode, and clear it when exiting low-power mode.
0x44002400 C   FIELD 01w01 UESM (rw): LPUART enable in low-power mode When this bit is cleared, the LPUART cannot wake up the MCU from low-power mode. When this bit is set, the LPUART can wake up the MCU from low-power mode. This bit is set and cleared by software. Note: It is recommended to set the UESM bit just before entering low-power mode, and clear it when exiting low-power mode.
0x44002400 C   FIELD 02w01 RE (rw): Receiver enable This bit enables the receiver. It is set and cleared by software.
0x44002400 C   FIELD 02w01 RE (rw): Receiver enable This bit enables the receiver. It is set and cleared by software.
0x44002400 C   FIELD 03w01 TE (rw): Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0' followed by '1') sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1'. To ensure the required duration, the software can poll the TEACK bit in the LPUART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.
0x44002400 C   FIELD 03w01 TE (rw): Transmitter enable This bit enables the transmitter. It is set and cleared by software. Note: During transmission, a low pulse on the TE bit ('0' followed by '1') sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1. To ensure the required duration, the software can poll the TEACK bit in the LPUART_ISR register. In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts.
0x44002400 C   FIELD 04w01 IDLEIE (rw): IDLE interrupt enable This bit is set and cleared by software.
0x44002400 C   FIELD 04w01 IDLEIE (rw): IDLE interrupt enable This bit is set and cleared by software.
0x44002400 C   FIELD 05w01 RXFNEIE (rw): RXFIFO not empty interrupt enable This bit is set and cleared by software.
0x44002400 C   FIELD 05w01 RXNEIE (rw): Receive data register not empty This bit is set and cleared by software.
0x44002400 C   FIELD 06w01 TCIE (rw): Transmission complete interrupt enable This bit is set and cleared by software.
0x44002400 C   FIELD 06w01 TCIE (rw): Transmission complete interrupt enable This bit is set and cleared by software.
0x44002400 C   FIELD 07w01 TXEIE (rw): Transmit data register empty This bit is set and cleared by software.
0x44002400 C   FIELD 07w01 TXFNFIE (rw): TXFIFO not full interrupt enable This bit is set and cleared by software.
0x44002400 C   FIELD 08w01 PEIE (rw): PE interrupt enable This bit is set and cleared by software.
0x44002400 C   FIELD 08w01 PEIE (rw): PE interrupt enable This bit is set and cleared by software.
0x44002400 C   FIELD 09w01 PS (rw): Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 09w01 PS (rw): Parity selection This bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 10w01 PCE (rw): Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M=1; 8th bit if M=0) and parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 10w01 PCE (rw): Parity control enable This bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M=1; 8th bit if M=0) and parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission). This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 11w01 WAKE (rw): Receiver wakeup method This bit determines the LPUART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 11w01 WAKE (rw): Receiver wakeup method This bit determines the LPUART wakeup method from Mute mode. It is set or cleared by software. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 12w01 M0 (rw): Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1) description). This bit can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 12w01 M0 (rw): Word length This bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1) description). This bit can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 13w01 MME (rw): Mute mode enable This bit activates the Mute mode function of the LPUART. When set, the LPUART can switch between the active and Mute modes, as defined by the WAKE bit. It is set and cleared by software.
0x44002400 C   FIELD 13w01 MME (rw): Mute mode enable This bit activates the Mute mode function of the LPUART. When set, the LPUART can switch between the active and Mute modes, as defined by the WAKE bit. It is set and cleared by software.
0x44002400 C   FIELD 14w01 CMIE (rw): Character match interrupt enable This bit is set and cleared by software.
0x44002400 C   FIELD 14w01 CMIE (rw): Character match interrupt enable This bit is set and cleared by software.
0x44002400 C   FIELD 16w05 DEDT (rw): Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal.It is expressed in lpuart_ker_ck clock cycles. For more details, refer control and RS485 Driver Enable. If the LPUART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 16w05 DEDT (rw): Driver Enable deassertion time This 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal.It is expressed in lpuart_ker_ck clock cycles. For more details, refer control and RS485 Driver Enable. If the LPUART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 21w05 DEAT (rw): Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in lpuart_ker_ck clock cycles. For more details, refer . This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 21w05 DEAT (rw): Driver Enable assertion time This 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in lpuart_ker_ck clock cycles. For more details, refer . This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002400 C   FIELD 28w01 M1 (rw): Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00': 1 Start bit, 8 Data bits, n Stop bit M[1:0] = '01': 1 Start bit, 9 Data bits, n Stop bit M[1:0] = '10': 1 Start bit, 7 Data bits, n Stop bit This bit can only be written when the LPUART is disabled (UE=0). Note: In 7-bit data length mode, the Smartcard mode, LIN master mode and auto baud rate (0x7F and 0x55 frames detection) are not supported.
0x44002400 C   FIELD 28w01 M1 (rw): Word length This bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software. M[1:0] = '00': 1 Start bit, 8 Data bits, n Stop bit M[1:0] = '01': 1 Start bit, 9 Data bits, n Stop bit M[1:0] = '10': 1 Start bit, 7 Data bits, n Stop bit This bit can only be written when the LPUART is disabled (UE=0). Note: In 7-bit data length mode, the Smartcard mode, LIN master mode and auto baud rate (0x7F and 0x55 frames detection) are not supported.
0x44002400 C   FIELD 29w01 FIFOEN (rw): FIFO mode enable This bit is set and cleared by software.
0x44002400 C   FIELD 29w01 FIFOEN (rw): FIFO mode enable This bit is set and cleared by software.
0x44002400 C   FIELD 30w01 TXFEIE (rw): TXFIFO empty interrupt enable This bit is set and cleared by software.
0x44002400 C   FIELD 31w01 RXFFIE (rw): RXFIFO Full interrupt enable This bit is set and cleared by software.
0x44002404 B  REGISTER CR2: LPUART control register 2
0x44002404 C   FIELD 04w01 ADDM7 (rw): 7-bit Address Detection/4-bit Address Detection This bit is for selection between 4-bit address detection or 7-bit address detection. This bit can only be written when the LPUART is disabled (UE=0) Note: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively.
0x44002404 C   FIELD 12w02 STOP (rw): STOP bits These bits are used for programming the stop bits. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002404 C   FIELD 15w01 SWAP (rw): Swap TX/RX pins This bit is set and cleared by software. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002404 C   FIELD 16w01 RXINV (rw): RX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the RX line. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002404 C   FIELD 17w01 TXINV (rw): TX pin active level inversion This bit is set and cleared by software. This enables the use of an external inverter on the TX line. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002404 C   FIELD 18w01 DATAINV (rw): Binary data inversion This bit is set and cleared by software. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002404 C   FIELD 19w01 MSBFIRST (rw): Most significant bit first This bit is set and cleared by software. This bitfield can only be written when the LPUART is disabled (UE=0).
0x44002404 C   FIELD 24w08 ADD (rw): Address of the LPUART node These bits give the address of the LPUART node in Mute mode or a character code to be recognized in low-power or Run mode: In Mute mode: they are used in multiprocessor communication to wakeup from Mute mode with 4-bit/7-bit address mark detection. The MSB of the character sent by the transmitter should be equal to 1. In 4-bit address mark detection, only ADD[3:0] bits are used. In low-power mode: they are used for wake up from low-power mode on character match. When WUS[1:0] is programmed to 0b00 (WUF active on address match), the wakeup from low-power mode is performed when the received character corresponds to the character programmed through ADD[6:0] or ADD[3:0] bitfield (depending on ADDM7 bit), and WUF interrupt is enabled by setting WUFIE bit. The MSB of the character sent by transmitter should be equal to 1. In Run mode with Mute mode inactive (for example, end-of-block detection in ModBus protocol): the whole received character (8 bits) is compared to ADD[7:0] value and CMF flag is set on match. An interrupt is generated if the CMIE bit is set. These bits can only be written when the reception is disabled (RE = 0) or when the USART is disabled (UE = 0).
0x44002408 B  REGISTER CR3: LPUART control register 3
0x44002408 C   FIELD 00w01 EIE (rw): Error interrupt enable Error Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error or noise flag (FE=1 or ORE=1 or NE=1 in the LPUART_ISR register).
0x44002408 C   FIELD 03w01 HDSEL (rw): Half-duplex selection Selection of Single-wire Half-duplex mode This bit can only be written when the LPUART is disabled (UE=0).
0x44002408 C   FIELD 06w01 DMAR (rw): DMA enable receiver This bit is set/reset by software
0x44002408 C   FIELD 07w01 DMAT (rw): DMA enable transmitter This bit is set/reset by software
0x44002408 C   FIELD 08w01 RTSE (rw): RTS enable This bit can only be written when the LPUART is disabled (UE=0).
0x44002408 C   FIELD 09w01 CTSE (rw): CTS enable This bit can only be written when the LPUART is disabled (UE=0)
0x44002408 C   FIELD 10w01 CTSIE (rw): CTS interrupt enable
0x44002408 C   FIELD 12w01 OVRDIS (rw): Overrun Disable This bit is used to disable the receive overrun detection. the ORE flag is not set and the new received data overwrites the previous content of the LPUART_RDR register. This bit can only be written when the LPUART is disabled (UE=0). Note: This control bit enables checking the communication flow w/o reading the data.
0x44002408 C   FIELD 13w01 DDRE (rw): DMA Disable on Reception Error This bit can only be written when the LPUART is disabled (UE=0). Note: The reception errors are: parity error, framing error or noise error.
0x44002408 C   FIELD 14w01 DEM (rw): Driver enable mode This bit enables the user to activate the external transceiver control, through the DE signal. This bit can only be written when the LPUART is disabled (UE=0).
0x44002408 C   FIELD 15w01 DEP (rw): Driver enable polarity selection This bit can only be written when the LPUART is disabled (UE=0).
0x44002408 C   FIELD 20w01 WUS0 (rw): Wakeup from low-power mode interrupt flag selection This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag). This bitfield can only be written when the LPUART is disabled (UE=0). Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2386.
0x44002408 C   FIELD 21w01 WUS1 (rw): Wakeup from low-power mode interrupt flag selection This bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag). This bitfield can only be written when the LPUART is disabled (UE=0). Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2386.
0x44002408 C   FIELD 22w01 WUFIE (rw): Wakeup from low-power mode interrupt enable This bit is set and cleared by software. Note: WUFIE must be set before entering in low-power mode. If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2386.
0x44002408 C   FIELD 23w01 TXFTIE (rw): TXFIFO threshold interrupt enable This bit is set and cleared by software.
0x44002408 C   FIELD 25w03 RXFTCFG (rw): Receive FIFO threshold configuration Remaining combinations: Reserved.
0x44002408 C   FIELD 28w01 RXFTIE (rw): RXFIFO threshold interrupt enable This bit is set and cleared by software.
0x44002408 C   FIELD 29w03 TXFTCFG (rw): TXFIFO threshold configuration Remaining combinations: Reserved.
0x4400240C B  REGISTER BRR: LPUART baud rate register
0x4400240C C   FIELD 00w20 BRR (rw): LPUART baud rate division (LPUARTDIV)
0x44002418 B  REGISTER RQR: LPUART request register
0x44002418 C   FIELD 01w01 SBKRQ (wo): Send break request Writing 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available. Note: If the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit.
0x44002418 C   FIELD 02w01 MMRQ (wo): Mute mode request Writing 1 to this bit puts the LPUART in Mute mode and resets the RWU flag.
0x44002418 C   FIELD 03w01 RXFRQ (wo): Receive data flush request Writing 1 to this bit clears the RXNE flag. This enables discarding the received data without reading it, and avoid an overrun condition.
0x44002418 C   FIELD 04w01 TXFRQ (wo): Transmit data flush request This bit is used when FIFO mode is enabled. TXFRQ bit is set to flush the whole FIFO. This sets the flag TXFE (TXFIFO empty, bit 23 in the LPUART_ISR register). Note: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register.
0x4400241C B  REGISTER ISR_disabled: LPUART interrupt and status register [alternate]
0x4400241C B  REGISTER ISR_enabled: LPUART interrupt and status register [alternate]
0x4400241C C   FIELD 00w01 PE (ro): Parity error This bit is set by hardware when a parity error occurs in Reception mode. It is cleared by software, writing 1 to the PECF in the LPUART_ICR register. An interrupt is generated if PEIE = 1 in the LPUART_CR1 register. Note: In FIFO mode, this error is associated with the character in the LPUART_RDR.
0x4400241C C   FIELD 00w01 PE (ro): Parity error This bit is set by hardware when a parity error occurs in Reception mode. It is cleared by software, writing 1 to the PECF in the LPUART_ICR register. An interrupt is generated if PEIE = 1 in the LPUART_CR1 register. Note: This error is associated with the character in the LPUART_RDR.
0x4400241C C   FIELD 01w01 FE (ro): Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the LPUART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE = 1 in the LPUART_CR1 register. Note: In FIFO mode, this error is associated with the character in the LPUART_RDR.
0x4400241C C   FIELD 01w01 FE (ro): Framing error This bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the LPUART_ICR register. When transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame). An interrupt is generated if EIE = 1 in the LPUART_CR1 register. Note: This error is associated with the character in the LPUART_RDR.
0x4400241C C   FIELD 02w01 NE (ro): Start bit noise detection flag This bit is set by hardware when noise is detected on the start bit of a received frame. It is cleared by software, writing 1 to the NFCF bit in the LPUART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. This error is associated with the character in the LPUART_RDR.
0x4400241C C   FIELD 02w01 NE (ro): Start bit noise detection flag This bit is set by hardware when noise is detected on the start bit of a received frame. It is cleared by software, writing 1 to the NFCF bit in the LPUART_ICR register. Note: This bit does not generate an interrupt as it appears at the same time as the RXNE/RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. In FIFO mode, this error is associated with the character in the LPUART_RDR.
0x4400241C C   FIELD 03w01 ORE (ro): Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the LPUART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the LPUART_ICR register. An interrupt is generated if RXFNEIE=1 or EIE = 1 in the LPUART_CR1 register. Note: When this bit is set, the LPUART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the LPUART_CR3 register.
0x4400241C C   FIELD 03w01 ORE (ro): Overrun error This bit is set by hardware when the data currently being received in the shift register is ready to be transferred into the LPUART_RDR register while RXNE=1 (RXFF = 1 in case FIFO mode is enabled). It is cleared by a software, writing 1 to the ORECF, in the LPUART_ICR register. An interrupt is generated if RXNEIE=1 or EIE = 1 in the LPUART_CR1 register. Note: When this bit is set, the LPUART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set. This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the LPUART_CR3 register.
0x4400241C C   FIELD 04w01 IDLE (ro): Idle line detected This bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE=1 in the LPUART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the LPUART_ICR register. Note: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME=1), IDLE is set if the LPUART is not mute (RWU=0), whatever the Mute mode selected by the WAKE bit. If RWU=1, IDLE is not set.
0x4400241C C   FIELD 04w01 IDLE (ro): Idle line detected This bit is set by hardware when an Idle line is detected. An interrupt is generated if IDLEIE=1 in the LPUART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the LPUART_ICR register. Note: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs). If Mute mode is enabled (MME=1), IDLE is set if the LPUART is not mute (RWU=0), whatever the Mute mode selected by the WAKE bit. If RWU=1, IDLE is not set.
0x4400241C C   FIELD 05w01 RXFNE (ro): RXFIFO not empty RXFNE bit is set by hardware when the RXFIFO is not empty, and so data can be read from the LPUART_RDR register. Every read of the LPUART_RDR frees a location in the RXFIFO. It is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the LPUART_RQR register. An interrupt is generated if RXFNEIE=1 in the LPUART_CR1 register.
0x4400241C C   FIELD 05w01 RXNE (ro): Read data register not empty RXNE bit is set by hardware when the content of the LPUART_RDR shift register has been transferred to the LPUART_RDR register. It is cleared by a read to the LPUART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the LPUART_RQR register. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the LPUART_RQR register. An interrupt is generated if RXNEIE=1 in the LPUART_CR1 register.
0x4400241C C   FIELD 06w01 TC (ro): Transmission complete This bit indicates that the last data written in the LPUART_TDR has been transmitted out of the shift register. The TC flag behaves as follows: When TDN = 0, the TC flag is set when the transmission of a frame containing data is complete and when TXFE is set. When TDN is equal to the number of data in the TXFIFO, the TC flag is set when TXFIFO is empty and TDN is reached. When TDN is greater than the number of data in the TXFIFO, TC remains cleared until the TXFIFO is filled again to reach the programmed number of data to be transferred. When TDN is less than the number of data in the TXFIFO, TC is set when TDN is reached even if the TXFIFO is not empty. An interrupt is generated if TCIE=1 in the LPUART_CR1 register. TC bit is cleared by software by writing 1 to the TCCF in the LPUART_ICR register or by writing to the LPUART_TDR register.
0x4400241C C   FIELD 06w01 TC (ro): Transmission complete This bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. The TC flag is set when the transmission of a frame containing data is complete and when TXE is set. An interrupt is generated if TCIE=1 in the USART_CR1 register. TC bit is cleared by software by writing 1 to the TCCF in the USART_ICR register or by writing to the USART_TDR register.
0x4400241C C   FIELD 07w01 TXE (ro): Transmit data register empty TXE is set by hardware when the content of the LPUART_TDR register has been transferred into the shift register. It is cleared by a write to the LPUART_TDR register. An interrupt is generated if the TXEIE bit =1 in the LPUART_CR1 register. Note: This bit is used during single buffer transmission.
0x4400241C C   FIELD 07w01 TXFNF (ro): TXFIFO not full TXFNF is set by hardware when TXFIFO is not full, and so data can be written in the LPUART_TDR. Every write in the LPUART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the LPUART_TDR. The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time). An interrupt is generated if the TXFNFIE bit =1 in the LPUART_CR1 register. Note: This bit is used during single buffer transmission.
0x4400241C C   FIELD 09w01 CTSIF (ro): CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the LPUART_ICR register. An interrupt is generated if CTSIE=1 in the LPUART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.
0x4400241C C   FIELD 09w01 CTSIF (ro): CTS interrupt flag This bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the LPUART_ICR register. An interrupt is generated if CTSIE=1 in the LPUART_CR3 register. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.
0x4400241C C   FIELD 10w01 CTS (ro): CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.
0x4400241C C   FIELD 10w01 CTS (ro): CTS flag This bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin. Note: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value.
0x4400241C C   FIELD 16w01 BUSY (ro): Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).
0x4400241C C   FIELD 16w01 BUSY (ro): Busy flag This bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not).
0x4400241C C   FIELD 17w01 CMF (ro): Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the LPUART_ICR register. An interrupt is generated if CMIE=1in the LPUART_CR1 register.
0x4400241C C   FIELD 17w01 CMF (ro): Character match flag This bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the LPUART_ICR register. An interrupt is generated if CMIE=1in the LPUART_CR1 register.
0x4400241C C   FIELD 18w01 SBKF (ro): Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the LPUART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.
0x4400241C C   FIELD 18w01 SBKF (ro): Send break flag This bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the LPUART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission.
0x4400241C C   FIELD 19w01 RWU (ro): Receiver wakeup from Mute mode This bit indicates if the LPUART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the LPUART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the LPUART_RQR register. Note: If the LPUART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value.
0x4400241C C   FIELD 19w01 RWU (ro): Receiver wakeup from Mute mode This bit indicates if the LPUART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the LPUART_CR1 register. When wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the LPUART_RQR register. Note: If the LPUART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value.
0x4400241C C   FIELD 20w01 WUF (ro): Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the LPUART_ICR register. An interrupt is generated if WUFIE=1 in the LPUART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .
0x4400241C C   FIELD 20w01 WUF (ro): Wakeup from low-power mode flag This bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the LPUART_ICR register. An interrupt is generated if WUFIE=1 in the LPUART_CR3 register. Note: When UESM is cleared, WUF flag is also cleared. If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to .
0x4400241C C   FIELD 21w01 TEACK (ro): Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the LPUART. It can be used when an idle frame request is generated by writing TE=0, followed by TE=1 in the LPUART_CR1 register, in order to respect the TE=0 minimum period.
0x4400241C C   FIELD 21w01 TEACK (ro): Transmit enable acknowledge flag This bit is set/reset by hardware, when the Transmit Enable value is taken into account by the LPUART. It can be used when an idle frame request is generated by writing TE=0, followed by TE=1 in the LPUART_CR1 register, in order to respect the TE=0 minimum period.
0x4400241C C   FIELD 22w01 REACK (ro): Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the LPUART. It can be used to verify that the LPUART is ready for reception before entering low-power mode. Note: If the LPUART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value.
0x4400241C C   FIELD 22w01 REACK (ro): Receive enable acknowledge flag This bit is set/reset by hardware, when the Receive Enable value is taken into account by the LPUART. It can be used to verify that the LPUART is ready for reception before entering low-power mode. Note: If the LPUART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value.
0x4400241C C   FIELD 23w01 TXFE (ro): TXFIFO Empty This bit is set by hardware when TXFIFO is Empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the LPUART_RQR register. An interrupt is generated if the TXFEIE bit =1 (bit 30) in the LPUART_CR1 register.
0x4400241C C   FIELD 24w01 RXFF (ro): RXFIFO Full This bit is set by hardware when the number of received data corresponds to RXFIFO size + 1 (RXFIFO full + 1 data in the LPUART_RDR register. An interrupt is generated if the RXFFIE bit =1 in the LPUART_CR1 register.
0x4400241C C   FIELD 26w01 RXFT (ro): RXFIFO threshold flag This bit is set by hardware when the RXFIFO reaches the threshold programmed in RXFTCFG in LPUART_CR3 register i.e. the Receive FIFO contains RXFTCFG data. An interrupt is generated if the RXFTIE bit =1 (bit 27) in the LPUART_CR3 register.
0x4400241C C   FIELD 27w01 TXFT (ro): TXFIFO threshold flag This bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG in LPUART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit =1 (bit 31) in the LPUART_CR3 register.
0x44002420 B  REGISTER ICR: LPUART interrupt flag clear register
0x44002420 C   FIELD 00w01 PECF (wo): Parity error clear flag Writing 1 to this bit clears the PE flag in the LPUART_ISR register.
0x44002420 C   FIELD 01w01 FECF (wo): Framing error clear flag Writing 1 to this bit clears the FE flag in the LPUART_ISR register.
0x44002420 C   FIELD 02w01 NECF (wo): Noise detected clear flag Writing 1 to this bit clears the NE flag in the LPUART_ISR register.
0x44002420 C   FIELD 03w01 ORECF (wo): Overrun error clear flag Writing 1 to this bit clears the ORE flag in the LPUART_ISR register.
0x44002420 C   FIELD 04w01 IDLECF (wo): Idle line detected clear flag Writing 1 to this bit clears the IDLE flag in the LPUART_ISR register.
0x44002420 C   FIELD 06w01 TCCF (wo): Transmission complete clear flag Writing 1 to this bit clears the TC flag in the LPUART_ISR register.
0x44002420 C   FIELD 09w01 CTSCF (wo): CTS clear flag Writing 1 to this bit clears the CTSIF flag in the LPUART_ISR register.
0x44002420 C   FIELD 17w01 CMCF (wo): Character match clear flag Writing 1 to this bit clears the CMF flag in the LPUART_ISR register.
0x44002420 C   FIELD 20w01 WUCF (wo): Wakeup from low-power mode clear flag Writing 1 to this bit clears the WUF flag in the USART_ISR register. Note: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page 2386.
0x44002424 B  REGISTER RDR: LPUART receive data register
0x44002424 C   FIELD 00w09 RDR (ro): Receive data value Contains the received data character. The RDR register provides the parallel interface between the input shift register and the internal bus (see ). When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
0x44002428 B  REGISTER TDR: LPUART transmit data register
0x44002428 C   FIELD 00w09 TDR (rw): Transmit data value Contains the data character to be transmitted. The TDR register provides the parallel interface between the internal bus and the output shift register (see ). When transmitting with the parity enabled (PCE bit set to 1 in the LPUART_CR1 register), the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect because it is replaced by the parity. Note: This register must be written only when TXE/TXFNF=1.
0x4400242C B  REGISTER PRESC: LPUART prescaler register
0x4400242C C   FIELD 00w04 PRESCALER (rw): Clock prescaler The LPUART input clock can be divided by a prescaler: Remaining combinations: Reserved. Note: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is equal to 1011 i.e. input clock divided by 256.
0x44003000 A PERIPHERAL I3C2
0x44003000 B  REGISTER I3C_CR: I3C message control register
0x44003000 B  REGISTER I3C_CR_ALTERNATE: I3C message control register alternate
0x44003000 C   FIELD 00w16 DCNT (wo): count of data to transfer during a read or write message, in bytes (whatever I3C is acting as controller/target) Linear encoding up to 64 Kbytes -1 ...
0x44003000 C   FIELD 00w16 DCNT (wo): count of data to transfer during a read or write message, in bytes (when I3C is acting as controller) Linear encoding up to 64 Kbytes -1. ...
0x44003000 C   FIELD 16w01 RNW (wo): read / non-write message (when I3C is acting as controller) When I3C is acting as controller, this field is used if MTYPE[3:0]=0010 (private message) or MTYPE[3:0]=0011 (direct message) or MTYPE[3:0]=0100 (legacy I2C message), in order to emit the RnW bit on the I3C bus.
0x44003000 C   FIELD 16w08 CCC (wo): 8-bit CCC code (when I3C is acting as controller) If Bit[23]=CCC[7]=1, this is the 1st part of an I3C SDR direct CCC command. If Bit[23]=CCC[7]=0, this is an I3C SDR broadcast CCC command (including ENTDAA and ENTHDR0).
0x44003000 C   FIELD 17w07 ADD (wo): 7-bit I3C dynamic / I2C static target address (when I3C is acting as controller) When I3C is acting as controller, this field is used if MTYPE[3:0]=0010 (private message) or MTYPE[3:0]=0011 (direct message) or MTYPE[3:0]=0100 (legacy I2C message)
0x44003000 C   FIELD 27w04 MTYPE (wo): message type (whatever I3C is acting as controller/target) Bits[26:0] are ignored. After M2 error detection on an I3C SDR message, this is needed for SCL 'stuck at' recovery. Bits[26:0] are ignored. If I3C_CFGR.EXITPTRN=1, an HDR exit pattern is emitted on the bus to generate an escalation fault. Bits[23:17] (ADD[6:0]) is the emitted 7-bit dynamic address. Bit[16] (RNW) is the emitted RnW bit. The transferred private message is: {S / S+7'h7E+RnW=0+Sr / Sr+*} + 7-bit DynAddr + RnW + (8-bit Data + T)* + Sr/P. After a S (START), depending on I3C_CFGR.NOARBH, the arbitrable header (7'h7E+RnW=0) is inserted or not. Sr+*: after a Sr (Repeated Start), the hardware automatically inserts (7'h7E+RnW=0) if needed, i.e. if it follows an I3C direct message without ending by a P (Stop). Bits[23:17] (ADD[6:0]) is the emitted 7-bit dynamic address. Bit[16] (RNW) is the emitted RnW bit. The transferred direct message is: Sr + 7-bit DynAddr + RnW + (8-bit Data + T)* + Sr/P Bits[23:17] (ADD[6:0]) is the emitted 7-bit static address. Bit[16] (RNW) is the emitted RnW bit. The transferred legacy I2C message is: {S / S+ 7'h7E+RnW=0 + Sr / Sr+*} + 7-bit StaAddr + RnW + (8-bit Data + T)* + Sr/P. After a S (START), depending on I3C_CFGR.NOARBH, the arbitrable header (7'h7E+RnW=0) is inserted or not. Sr+*: after a Sr (Repeated Start), the hardware automatically inserts (7'h7E+RnW=0) if needed, i.e. if it follows an I3C direct message without ending by a P (Stop). 1xxx: reserved (when I3C is acting as I3C controller, used when target) 0xxx: reserved {S +} 7'h02 addr + RnW=0 {S +} 7-bit I3C_DEVR0.DA[6:0] + RnW=0 after a bus available condition (the target first emits a START request), or once the controller drives a START. {S +} 7-bit I3C_DEVR0.DA[6:0] + RnW=1 (+Ack/Nack from controller) When acknowledged from controller, the next (optional, depending on I3C_BCR.BCR2) transmitted IBI payload data is defined by I3C_CR.DCNT[15:0] and must be consistently programmed vs the maximum IBI payload data size which is defined by I3C_IBIDR.IBIP[2:0]. Others: reserved
0x44003000 C   FIELD 27w04 MTYPE (wo): message type (when I3C is acting as controller) Bits[23:16] (CCC[7:0]) is the emitted 8-bit CCC code If Bit[23]=CCC[7]=1: this is the 1st part of an I3C SDR direct CCC command The transferred direct CCC command message is: {S / S+7'h7E +RnW=0 / Sr+*} + (direct CCC + T) + (8-bit Data + T)* + Sr After a S (START), depending on I3C_CFGR.NOARBH, the arbitrable header (7'h7E+RnW=0) is inserted or not. Sr+*: after a Sr (Repeated Start), the hardware automatically inserts (7'h7E+R/W). If Bit[23]=CCC[7]=0: this is an I3C SDR broadcast CCC command (including ENTDAA and ENTHDR0) The transferred broadcast CCC command message is: {S / S+7'h7E +RnW=0 / Sr+*} + (broadcast CCC + T) + (8-bit Data + T)* + Sr/P After a S (START), depending on I3C_CFGR.NOARBH, the arbitrable header (7'h7E+RnW=0) is inserted or not. Sr+*: after a Sr (Repeated Start), the hardware automatically inserts (7'h7E+R/W). others: reserved
0x44003000 C   FIELD 31w01 MEND (wo): message end type (when I3C is acting as controller)
0x44003000 C   FIELD 31w01 MEND (wo): message end type (when the I3C is acting as controller)
0x44003004 B  REGISTER I3C_CFGR: I3C configuration register
0x44003004 C   FIELD 00w01 EN (rw): I3C enable (whatever I3C is acting as controller/target) - Except registers, the peripheral is under reset (a.k.a. partial reset). - Before clearing EN, when I3C is acting as a controller, all the possible target requests must be disabled using DISEC CCC. - When I3C is acting as a target, software should not disable the I3C, unless a partial reset is needed. In this state, some register fields can not be modified (like CRINIT, HKSDAEN for the I3C_CFGR)
0x44003004 C   FIELD 01w01 CRINIT (rw): initial controller/target role This bit can be modified only when I3C_CFGR.EN = 0. Once enabled by setting I3C_CFGR.EN = 1, I3C peripheral initially acts as an I3C target. I3C does not drive SCL line and does not enable SDA pull-up, until it eventually acquires the controller role. Once enabled by setting I3C_CFGR.EN = 1, I3C peripheral initially acts as a controller. It has the I3C controller role, so drives SCL line and enables SDA pull-up, until it eventually offers the controller role to an I3C secondary controller.
0x44003004 C   FIELD 02w01 NOARBH (rw): no arbitrable header after a START (when I3C is acting as a controller) This bit can be modified only when there is no on-going frame. - The target address is emitted directly after a START in case of a legacy I2C message or an I3C SDR private read/write message. - This is a more performing option (when is useless the emission of the 0x7E arbitrable header), but this is to be used only when the controller is sure that the addressed target device can not emit concurrently an IBI or a controller-role request (to insure no misinterpretation and no potential conflict between the address emitted by the controller in open-drain mode and the same address a target device can emit after a START, for IBI or MR).
0x44003004 C   FIELD 03w01 RSTPTRN (rw): HDR reset pattern enable (when I3C is acting as a controller) This bit can be modified only when there is no on-going frame.
0x44003004 C   FIELD 04w01 EXITPTRN (rw): HDR Exit Pattern enable (when I3C is acting as a controller) This bit can be modified only when there is no on-going frame. This is used to send only the header to test ownership of the bus when there is a suspicion of problem after controller-role hand-off (new controller didn't assert its controller-role by accessing the previous one in less than Activity State time). The HDR Exit Pattern is sent even if the message header {S/Sr + 0x7E addr + W } is ACKed.
0x44003004 C   FIELD 05w01 HKSDAEN (rw): High-keeper enable on SDA line (when I3C is acting as a controller) This bit can be modified only when I3C_CFGR.EN=0.
0x44003004 C   FIELD 07w01 HJACK (rw): Hot Join request acknowledge (when I3C is acting as a controller) After the NACK, the message continues as initially programmed (the hot-joining target is aware of the NACK and surely emits another hot-join request later on). After the ACK, the message continues as initially programmed. The software is aware by the HJ interrupt (flag I3C_EVR.HJF is set) and initiates the ENTDAA sequence later on, potentially preventing others Hot Join requests with a Disable target events command (DISEC, with DISHJ=1). Independently of the HJACK configuration, further Hot Join request(s) are NACKed until the Hot Join flag, HJF, is cleared. However, a NACKed target can be assigned a dynamic address by the ENTDAA sequence initiated later on by the first HJ request, preventing this target to emit an HJ request again.
0x44003004 C   FIELD 08w01 RXDMAEN (rw): RX-FIFO DMA request enable (whatever I3C is acting as controller/target) - Software reads and pops a data byte/word from RX-FIFO i.e. reads I3C_RDR or I3C_RDWR register. - A next data byte/word is to be read by the software either via polling on the flag I3C_EVR.RXFNEF=1 or via interrupt notification (enabled by I3C_IER.RXFNEIE=1). - DMA reads and pops data byte(s)/word(s) from RX-FIFO i.e. reads I3C_RDR or I3C_RDWR register. - A next data byte/word is automatically read by the programmed hardware (i.e. via the asserted RX-FIFO DMA request from the I3C and the programmed DMA channel).
0x44003004 C   FIELD 09w01 RXFLUSH (wo): RX-FIFO flush (whatever I3C is acting as controller/target) This bit can only be written.
0x44003004 C   FIELD 10w01 RXTHRES (rw): RX-FIFO threshold (whatever I3C is acting as controller/target) This threshold defines, compared to the RX-FIFO level, when the I3C_EVR.RXFNEF flag is set (and consequently if RXDMAEN=1 when is asserted a DMA RX request). RXFNEF is set when 1 byte is to be read in RX-FIFO (i.e. in I3C_RDR). RXFNEF is set when 4 bytes are to be read in RX-FIFO (i.e. in I3C_RDWR).
0x44003004 C   FIELD 12w01 TXDMAEN (rw): TX-FIFO DMA request enable (whatever I3C is acting as controller/target) - Software writes and pushes a data byte/word into TX-FIFO i.e. writes I3C_TDR or I3C_TDWR register, to be transmitted over the I3C bus. - A next data byte/word is to be written by the software either via polling on the flag I3C_EVR.TXFNFF=1 or via interrupt notification (enabled by I3C_IER.TXFNFIE=1). - DMA writes and pushes data byte(s)/word(s) into TX-FIFO i.e. writes I3C_TDR or I3C_TDWR register. - A next data byte/word transfer is automatically pushed by the programmed hardware (i.e. via the asserted TX-FIFO DMA request from the I3C and the programmed DMA channel).
0x44003004 C   FIELD 13w01 TXFLUSH (wo): TX-FIFO flush (whatever I3C is acting as controller/target) This bit can only be written. When the I3C is acting as target, this bit can be used to flush the TX-FIFO on a private read if the controller has early ended the read data (i.e. driven low the T bit) and there is/are remaining data in the TX-FIFO (i.e. I3C_SR.ABT=1 and I3C_SR.XDCNT[15:0] I3C_TGTTDR.TGTTDCNT[15:0]).
0x44003004 C   FIELD 14w01 TXTHRES (rw): TX-FIFO threshold (whatever I3C is acting as controller/target) This threshold defines, compared to the TX-FIFO level, when the I3C_EVR.TXFNFF flag is set (and consequently if TXDMAEN=1 when is asserted a DMA TX request). TXFNFF is set when 1 byte is to be written in TX-FIFO (i.e. in I3C_TDR). TXFNFF is set when 4 bytes are to be written in TX-FIFO (i.e. in I3C_TDWR).
0x44003004 C   FIELD 16w01 SDMAEN (rw): S-FIFO DMA request enable (when I3C is acting as controller) Condition: When RMODE=1 (FIFO is enabled for the status): - Software reads and pops a status word from S-FIFO i.e. reads I3C_SR register after a completed frame (I3C_EVR.FCF=1) or an error (I3C_EVR.ERRF=1). - A status word can be read by the software either via polling on these register flags or via interrupt notification (enabled by I3C_IER.FCIE=1 and I3C_IER.ERRIE=1). - DMA reads and pops status word(s) from S-FIFO i.e. reads I3C_SR register. - Status word(s) are automatically read by the programmed hardware (i.e. via the asserted S-FIFO DMA request from the I3C and the programmed DMA channel).
0x44003004 C   FIELD 17w01 SFLUSH (wo): S-FIFO flush (when I3C is acting as controller) When I3C is acting as I3C controller, this bit can only be written (and is only used when I3C is acting as controller).
0x44003004 C   FIELD 18w01 RMODE (rw): S-FIFO enable / status receive mode (when I3C is acting as controller) When I3C is acting as I3C controller, this bit is used for the enabling the FIFO for the status (S-FIFO) vs the received status from the target on the I3C bus. When I3C is acting as target, this bit must be cleared. - Status register (i.e. I3C_SR) is used without FIFO mechanism. - There is no SCL stretch if a new status register content is not read. - Status register must be read before being lost/overwritten. All message status must be read. There is SCL stretch when there is no more space in the S-FIFO.
0x44003004 C   FIELD 19w01 TMODE (rw): transmit mode (when I3C is acting as controller) When I3C is acting as I3C controller, this bit is used for the C-FIFO and TX-FIFO management vs the emitted frame on the I3C bus. A frame transfer starts as soon as first control word is present in C-FIFO.
0x44003004 C   FIELD 20w01 CDMAEN (rw): C-FIFO DMA request enable (when I3C is acting as controller) When I3C is acting as controller: - Software writes and pushes control word(s) into C-FIFO i.e. writes I3C_CR register, as needed for a given frame. - A next control word transfer can be written by software either via polling on the flag I3C_EVR.CFNFF=1 or via interrupt notification (enabled by I3C_IER.CFNFIE=1). - DMA writes and pushes control word(s) into C-FIFO i.e. writes I3C_CR register, as needed for a given frame. - A next control word transfer is automatically written by the programmed hardware (i.e. via the asserted C-FIFO DMA request from the I3C and the programmed DMA channel).
0x44003004 C   FIELD 21w01 CFLUSH (wo): C-FIFO flush (when I3C is acting as controller) This bit can only be written.
0x44003004 C   FIELD 30w01 TSFSET (wo): frame transfer set (a.k.a. software trigger) (when I3C is acting as controller) This bit can only be written. When I3C is acting as I3C controller: Note: If this bit is not set, the other alternative for the software to initiate a frame transfer is to directly write the first control word register (i.e. I3C_CR) while C-FIFO is empty (i.e. I3C_EVR.CFEF=1). Then, if the first written control word is not tagged as a message end (i.e I3C_CR.MEND=0), it causes the hardware to assert the flag I3C_EVR.CFNFF (C-FIFO not full and a next control word is needed).
0x44003010 B  REGISTER I3C_RDR: I3C receive data byte register
0x44003010 C   FIELD 00w08 RDB0 (ro): 8-bit received data on I3C bus.
0x44003014 B  REGISTER I3C_RDWR: I3C receive data word register
0x44003014 C   FIELD 00w08 RDB0 (ro): 8-bit received data (earliest byte on I3C bus).
0x44003014 C   FIELD 08w08 RDB1 (ro): 8-bit received data (next byte after RDB0 on I3C bus).
0x44003014 C   FIELD 16w08 RDB2 (ro): 8-bit received data (next byte after RDB1 on I3C bus).
0x44003014 C   FIELD 24w08 RDB3 (ro): 8-bit received data (latest byte on I3C bus).
0x44003018 B  REGISTER I3C_TDR: I3C transmit data byte register
0x44003018 C   FIELD 00w08 TDB0 (wo): 8-bit data to transmit on I3C bus.
0x4400301C B  REGISTER I3C_TDWR: I3C transmit data word register
0x4400301C C   FIELD 00w08 TDB0 (wo): 8-bit transmit data (earliest byte on I3C bus)
0x4400301C C   FIELD 08w08 TDB1 (wo): 8-bit transmit data (next byte after TDB0[7:0] on I3C bus).
0x4400301C C   FIELD 16w08 TDB2 (wo): 8-bit transmit data (next byte after TDB1[7:0] on I3C bus).
0x4400301C C   FIELD 24w08 TDB3 (wo): 8-bit transmit data (latest byte on I3C bus).
0x44003020 B  REGISTER I3C_IBIDR: I3C IBI payload data register
0x44003020 C   FIELD 00w08 IBIDB0 (rw): 8-bit IBI payload data (earliest byte on I3C bus, i.e. MDB[7:0] mandatory data byte).
0x44003020 C   FIELD 08w08 IBIDB1 (rw): 8-bit IBI payload data (next byte on I3C bus after IBIDB0[7:0]).
0x44003020 C   FIELD 16w08 IBIDB2 (rw): 8-bit IBI payload data (next byte on I3C bus after IBIDB1[7:0]).
0x44003020 C   FIELD 24w08 IBIDB3 (rw): 8-bit IBI payload data (latest byte on I3C bus).
0x44003024 B  REGISTER I3C_TGTTDR: I3C target transmit configuration register
0x44003024 C   FIELD 00w16 TGTTDCNT (rw): transmit data counter, in bytes (when I3C is configured as target) This field must be written by software in the same access when is asserted PRELOAD, in order to define the number of bytes to preload and to transmit. This field is updated by hardware and reports, when read, the remaining number of bytes to be loaded into the TX-FIFO.
0x44003024 C   FIELD 16w01 PRELOAD (rw): preload of the TX-FIFO (when I3C is configured as target) This bit must be written and asserted by software in the same access when is written and defined the number of bytes to preload into the TX-FIFO and to transmit. This bit is cleared by hardware when all the data bytes to transmit are loaded into the TX-FIFO.
0x44003030 B  REGISTER I3C_SR: I3C status register
0x44003030 C   FIELD 00w16 XDCNT (ro): data counter - When the I3C is acting as controller: number of targets detected on the bus - When the I3C is acting as target: number of transmitted bytes - Whatever the I3C is acting as controller or target: number of data bytes read from or transmitted on the I3C bus during the MID[7:0] message
0x44003030 C   FIELD 17w01 ABT (ro): a private read message is completed/aborted prematurely by the target (when the I3C is acting as controller) When the I3C is acting as controller, this bit indicates if the private read data which is transmitted by the target early terminates (i.e. the target drives T bit low earlier vs what does expect the controller in terms of programmed number of read data bytes i.e. I3C_CR.DCNT[15:0]).
0x44003030 C   FIELD 18w01 DIR (ro): message direction Whatever the I3C is acting as controller or target, this bit indicates the direction of the related message on the I3C bus Note: ENTDAA CCC is considered as a write command.
0x44003030 C   FIELD 24w08 MID (ro): message identifier/counter of a given frame (when the I3C is acting as controller) When the I3C is acting as controller, this field identifies the control word message (i.e. I3C_CR) to which the I3C_SR status register refers. First message of a frame is identified with MID[7:0]=0. This field is incremented (by hardware) on the completion of a new message control word (i.e. I3C_CR) over I3C bus. This field is reset for every new frame start.
0x44003034 B  REGISTER I3C_SER: I3C status error register
0x44003034 C   FIELD 00w04 CODERR (ro): protocol error code/type controller detected an illegally formatted CCC controller detected that transmitted data on the bus is different from expected controller detected a not acknowledged broadcast address (7'hE) controller detected the new controller did not drive bus after controller-role hand-off target detected an invalid broadcast address 7'hE+W target detected a parity error on a CCC code via a parity check (vs T bit) target detected a parity error on a write data via a parity check (vs T bit) target detected a parity error on the assigned address during dynamic address arbitration via a parity check (vs PAR bit) target detected a 7'hE+R missing after Sr during dynamic address arbitration target detected an illegally formatted CCC target detected that transmitted data on the bus is different from expected others: reserved
0x44003034 C   FIELD 04w01 PERR (ro): protocol error
0x44003034 C   FIELD 05w01 STALL (ro): SCL stall error (when the I3C is acting as target)
0x44003034 C   FIELD 06w01 DOVR (ro): RX-FIFO overrun or TX-FIFO underrun i) a TX-FIFO underrun: TX-FIFO is empty and a write data byte has to be transmitted ii) a RX-FIFO overrun: RX-FIFO is full and a new data byte is received
0x44003034 C   FIELD 07w01 COVR (ro): C-FIFO underrun or S-FIFO overrun (when the I3C is acting as controller) i) a C-FIFO underrun: control FIFO is empty and a restart has to be emitted ii) a S-FIFO overrun: S-FIFO is full and a new message ends
0x44003034 C   FIELD 08w01 ANACK (ro): address not acknowledged (when the I3C is configured as controller) i) a legacy I2C read/write transfer ii) a direct CCC write transfer iii) the second trial of a direct CCC read transfer iv) a private read/write transfer
0x44003034 C   FIELD 09w01 DNACK (ro): data not acknowledged (when the I3C is acting as controller) i) a legacy I2C write transfer ii) the second trial when sending dynamic address during ENTDAA procedure
0x44003034 C   FIELD 10w01 DERR (ro): data error (when the I3C is acting as controller)
0x44003040 B  REGISTER I3C_RMR: I3C received message register
0x44003040 C   FIELD 00w03 IBIRDCNT (ro): IBI received payload data count (when the I3C is configured as controller) When the I3C is configured as controller, this field logs the number of data bytes effectively received in the I3C_IBIDR register.
0x44003040 C   FIELD 08w08 RCODE (ro): received CCC code (when the I3C is configured as target) When the I3C is configured as target, this field logs the received CCC code.
0x44003040 C   FIELD 17w07 RADD (ro): received target address (when the I3C is configured as controller) When the I3C is configured as controller, this field logs the received dynamic address from the target during acknowledged IBI or controller-role request.
0x44003050 B  REGISTER I3C_EVR: I3C event register
0x44003050 C   FIELD 00w01 CFEF (ro): C-FIFO empty flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that the C-FIFO is empty when controller, and that the I3C_CR register contains no control word (i.e. none IBI/CR/HJ request) when target. This flag is de-asserted by hardware to indicate that the C-FIFO is not empty when controller, and that the I3C_CR register contains one control word (i.e. a pending IBI/CR/HJ request) when target. Note: When the I3C is acting as controller, if the C-FIFO and TX-FIFO preload is configured (i.e. I3C_CFGR.TMODE=1), the software must wait for TXFEF=1 and CFEF=1 before starting a new frame transfer.
0x44003050 C   FIELD 01w01 TXFEF (ro): TX-FIFO empty flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that the TX-FIFO is empty. This flag is de-asserted by hardware to indicate that the TX-FIFO is not empty. Note: When the I3C is acting as controller, if the C-FIFO and TX-FIFO preload is configured (i.e. I3C_CFGR.TMODE=1), the software must wait for TXFEF=1 and CFEF=1 before starting a new frame transfer.
0x44003050 C   FIELD 02w01 CFNFF (ro): C-FIFO not full flag (when the I3C is acting as controller) When the I3C is acting as controller, this flag is asserted by hardware to indicate that a control word is to be written to the C-FIFO. This flag is de-asserted by hardware to indicate that a control word is not to be written to the C-FIFO. Note: The software must wait for CFNFF=1 (by polling or via the enabled interrupt) before writing to C-FIFO (i.e. writing to I3C_CR).
0x44003050 C   FIELD 03w01 SFNEF (ro): S-FIFO not empty flag (when the I3C is acting as controller) When the I3C is acting as controller, if the S-FIFO is enabled (i.e. I3C_CFGR.RMODE=1), this flag is asserted by hardware to indicate that a status word is to be read from the S-FIFO. This flag is de-asserted by hardware to indicate that a status word is not to be read from the S-FIFO.
0x44003050 C   FIELD 04w01 TXFNFF (ro): TX-FIFO not full flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that a data byte/word is to be written to the TX-FIFO. This flag is de-asserted by hardware to indicate that a data byte/word is not to be written to the TX-FIFO. Note: The software must wait for TXFNFF=1 (by polling or via the enabled interrupt) before writing to TX-FIFO (i.e. writing to I3C_TDR or I3C_TDWR depending on I3C_CFGR.TXTHRES). Note: When the I3C is acting as target, if the software intends to use the TXFNFF flag for writing into I3C_TDR/I3C_TDWR, it must have configured and set the TX-FIFO preload (i.e. write I3C_TGTTDR.PRELOAD).
0x44003050 C   FIELD 05w01 RXFNEF (ro): RX-FIFO not empty flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that a data byte is to be read from the RX-FIFO. This flag is de-asserted by hardware to indicate that a data byte is not to be read from the RX-FIFO. Note: The software must wait for RXFNEF=1 (by polling or via the enabled interrupt) before reading from RX-FIFO (i.e. writing to I3C_RDR or I3C_RDWR depending on I3C_CFGR.RXTHRES).
0x44003050 C   FIELD 06w01 TXLASTF (ro): last written data byte/word flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that the last data byte/word (depending on I3C_CFGR.TXTHRES) of a message is to be written to the TX-FIFO. This flag is de-asserted by hardware when the last data byte/word of a message is written.
0x44003050 C   FIELD 07w01 RXLASTF (ro): last read data byte/word flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that the last data byte/word (depending on I3C_CFGR.RXTHRES) of a message is to be read from the RX-FIFO. This flag is de-asserted by hardware when the last data byte/word of a message is read.
0x44003050 C   FIELD 09w01 FCF (ro): frame complete flag (whatever the I3C is acting as controller/target) When the I3C is acting as controller, this flag is asserted by hardware to indicate that a frame has been (normally) completed on the I3C bus, i.e when a stop is issued. When the I3C is acting as target, this flag is asserted by hardware to indicate that a message addressed to/by this target has been (normally) completed on the I3C bus, i.e when a next stop or repeated start is then issued by the controller. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CFCF bit.
0x44003050 C   FIELD 10w01 RXTGTENDF (ro): target-initiated read end flag (when the I3C is acting as controller) When the I3C is acting as controller, this flag is asserted by hardware to indicate that the target has prematurely ended a read transfer. Then, software should read I3C_SR to get more information on the prematurely read transfer. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CRXTGTENDF bit.
0x44003050 C   FIELD 11w01 ERRF (ro): flag (whatever the I3C is acting as controller/target) This flag is asserted by hardware to indicate that an error occurred.Then, software should read I3C_SER to get the error type. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CERRF bit.
0x44003050 C   FIELD 15w01 IBIF (ro): IBI flag (when the I3C is acting as controller) When the I3C is acting as controller, this flag is asserted by hardware to indicate that an IBI request has been received. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CIBIF bit.
0x44003050 C   FIELD 16w01 IBIENDF (ro): IBI end flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a IBI transfer has been received and completed (IBI acknowledged and IBI data bytes read by controller if any). This flag is cleared when software writes 1 into corresponding I3C_CEVR.CIBIENDF bit.
0x44003050 C   FIELD 17w01 CRF (ro): controller-role request flag (when the I3C is acting as controller) When the I3C is acting as controller, this flag is asserted by hardware to indicate that a controller-role request has been acknowledged and completed (by hardware). The software should then issue a GETACCCR CCC (get accept controller role) for the controller-role hand-off procedure. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CCRF bit.
0x44003050 C   FIELD 18w01 CRUPDF (ro): controller-role update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that it has now gained the controller role after the completed controller-role hand-off procedure. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CCRUPDF bit.
0x44003050 C   FIELD 19w01 HJF (ro): hot-join flag (when the I3C is acting as controller) When the I3C is acting as controller, this flag is asserted by hardware to indicate that an hot join request has been received. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CHJF bit.
0x44003050 C   FIELD 21w01 WKPF (ro): wakeup/missed start flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a start has been detected (i.e. a SDA falling edge followed by a SCL falling edge) but on the next SCL falling edge, the I3C kernel clock is (still) gated. Thus an I3C bus transaction may have been lost by the target. The corresponding interrupt may be used to wakeup the device from a low power mode (Sleep or Stop mode). This flag is cleared when software writes 1 into corresponding I3C_CEVR.CWKPF bit.
0x44003050 C   FIELD 22w01 GETF (ro): get flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that any direct CCC of get type (GET*** CCC) has been received. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CGETF bit.
0x44003050 C   FIELD 23w01 STAF (ro): get status flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a direct GETSTATUS CCC (get status) has been received. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CSTAF bit.
0x44003050 C   FIELD 24w01 DAUPDF (ro): dynamic address update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a dynamic address update has been received via any of the broadcast ENTDAA, RSTDAA and direct SETNEWDA CCC. Then, software should read I3C_DEVR0.DA[6:0] to get the maximum write length value. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CDAUPDF bit.
0x44003050 C   FIELD 25w01 MWLUPDF (ro): maximum write length update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a direct SETMWL CCC (set max write length) has been received. Then, software should read I3C_MAXWLR.MWL[15:0] to get the maximum write length value. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CMWLUPDF bit.
0x44003050 C   FIELD 26w01 MRLUPDF (ro): maximum read length update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a direct SETMRL CCC (set max read length) has been received. Then, software should read I3C_MAXRLR.MRL[15:0] to get the maximum read length value. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CMRLUPDF bit.
0x44003050 C   FIELD 27w01 RSTF (ro): reset pattern flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that a reset pattern has been detected (i.e. 14 SDA transitions while SCL is low, followed by repeated start, then stop). Then, software should read I3C_DEVR0.RSTACT[1:0] and I3C_DEVR0.RSTVAL, to know what reset level is required. If RSTVAL=1: when the RSTF is asserted (and/or the corresponding interrupt if enabled), I3C_DEVR0.RSTACT[1:0] dictates the reset action to be performed by the software if any. If RSTVAL=0: when the RSTF is asserted (and/or the corresponding interrupt if enabled), the software should issue an I3C reset after a first detected reset pattern, and a system reset on the second one. The corresponding interrupt may be used to wakeup the device from a low power mode (Sleep or Stop mode). This flag is cleared when software writes 1 into corresponding I3C_CEVR.CRSTF bit.
0x44003050 C   FIELD 28w01 ASUPDF (ro): activity state update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that the direct or broadcast ENTASx CCC (with x=0...3) has been received. Then, software should read I3C_DEVR0.AS[1:0]. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CASUPDF bit.
0x44003050 C   FIELD 29w01 INTUPDF (ro): interrupt/controller-role/hot-join update flag (when the I3C is acting as target) When the I3C is acting as target, this flag is asserted by hardware to indicate that the direct or broadcast ENEC/DISEC CCC (enable/disable target events) has been received, where a target event is either an interrupt/IBI request, a controller-role request, or an hot-join request. Then, software should read respectively I3C_DEVR0.IBIEN, I3C_DEVR0.CREN or I3C_DEVR0.HJEN. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CINTUPDF bit.
0x44003050 C   FIELD 30w01 DEFF (ro): DEFTGTS flag (when the I3C is acting as target) When the I3C is acting as target (and is typically controller capable), this flag is asserted by hardware to indicate that the broadcast DEFTGTS CCC (define list of targets) has been received. Then, software may store the received data for when getting the controller role. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CDEFF bit.
0x44003050 C   FIELD 31w01 GRPF (ro): group addressing flag (when the I3C is acting as target) When the I3C is acting as target (and is typically controller capable), this flag is asserted by hardware to indicate that the broadcast DEFGRPA CCC (define list of group addresses) has been received. Then, software may store the received data for when getting the controller role. This flag is cleared when software writes 1 into corresponding I3C_CEVR.CGRPF bit.
0x44003054 B  REGISTER I3C_IER: I3C interrupt enable register
0x44003054 C   FIELD 02w01 CFNFIE (ro): C-FIFO not full interrupt enable (whatever the I3C is acting as controller/target)
0x44003054 C   FIELD 03w01 SFNEIE (ro): S-FIFO not empty interrupt enable (whatever the I3C is acting as controller/target)
0x44003054 C   FIELD 04w01 TXFNFIE (ro): TX-FIFO not full interrupt enable (whatever the I3C is acting as controller/target)
0x44003054 C   FIELD 05w01 RXFNEIE (ro): RX-FIFO not empty interrupt enable (whatever the I3C is acting as controller/target)
0x44003054 C   FIELD 09w01 FCIE (ro): frame complete interrupt enable (whatever the I3C is acting as controller/target)
0x44003054 C   FIELD 10w01 RXTGTENDIE (ro): target-initiated read end interrupt enable (when the I3C is acting as controller)
0x44003054 C   FIELD 11w01 ERRIE (ro): error interrupt enable (whatever the I3C is acting as controller/target)
0x44003054 C   FIELD 15w01 IBIIE (ro): IBI request interrupt enable (when the I3C is acting as controller)
0x44003054 C   FIELD 16w01 IBIENDIE (ro): IBI end interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 17w01 CRIE (ro): controller-role request interrupt enable (when the I3C is acting as controller)
0x44003054 C   FIELD 18w01 CRUPDIE (ro): controller-role update interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 19w01 HJIE (ro): hot-join interrupt enable (when the I3C is acting as controller)
0x44003054 C   FIELD 21w01 WKPIE (ro): wakeup interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 22w01 GETIE (ro): GETxxx CCC interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 23w01 STAIE (ro): GETSTATUS CCC interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 24w01 DAUPDIE (ro): ENTDAA/RSTDAA/SETNEWDA CCC interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 25w01 MWLUPDIE (ro): SETMWL CCC interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 26w01 MRLUPDIE (ro): SETMRL CCC interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 27w01 RSTIE (ro): reset pattern interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 28w01 ASUPDIE (ro): ENTASx CCC interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 29w01 INTUPDIE (ro): ENEC/DISEC CCC interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 30w01 DEFIE (ro): DEFTGTS CCC interrupt enable (when the I3C is acting as target)
0x44003054 C   FIELD 31w01 GRPIE (ro): DEFGRPA CCC interrupt enable (when the I3C is acting as target)
0x44003058 B  REGISTER I3C_CEVR: I3C clear event register
0x44003058 C   FIELD 09w01 CFCF (wo): clear frame complete flag (whatever the I3C is acting as controller/target)
0x44003058 C   FIELD 10w01 CRXTGTENDF (wo): clear target-initiated read end flag (when the I3C is acting as controller)
0x44003058 C   FIELD 11w01 CERRF (wo): clear error flag (whatever the I3C is acting as controller/target)
0x44003058 C   FIELD 15w01 CIBIF (wo): clear IBI request flag (when the I3C is acting as controller)
0x44003058 C   FIELD 16w01 CIBIENDF (wo): clear IBI end flag (when the I3C is acting as target)
0x44003058 C   FIELD 17w01 CCRF (wo): clear controller-role request flag (when the I3C is acting as controller)
0x44003058 C   FIELD 18w01 CCRUPDF (wo): clear controller-role update flag (when the I3C is acting as target)
0x44003058 C   FIELD 19w01 CHJF (wo): clear hot-join flag (when the I3C is acting as controller)
0x44003058 C   FIELD 21w01 CWKPF (wo): clear wakeup flag (when the I3C is acting as target)
0x44003058 C   FIELD 22w01 CGETF (wo): clear GETxxx CCC flag (when the I3C is acting as target)
0x44003058 C   FIELD 23w01 CSTAF (wo): clear GETSTATUS CCC flag (when the I3C is acting as target)
0x44003058 C   FIELD 24w01 CDAUPDF (wo): clear ENTDAA/RSTDAA/SETNEWDA CCC flag (when the I3C is acting as target)
0x44003058 C   FIELD 25w01 CMWLUPDF (wo): clear SETMWL CCC flag (when the I3C is acting as target)
0x44003058 C   FIELD 26w01 CMRLUPDF (wo): clear SETMRL CCC flag (when the I3C is acting as target)
0x44003058 C   FIELD 27w01 CRSTF (wo): clear reset pattern flag (when the I3C is acting as target)
0x44003058 C   FIELD 28w01 CASUPDF (wo): clear ENTASx CCC flag (when the I3C is acting as target)
0x44003058 C   FIELD 29w01 CINTUPDF (wo): clear ENEC/DISEC CCC flag (when the I3C is acting as target)
0x44003058 C   FIELD 30w01 CDEFF (wo): clear DEFTGTS CCC flag (when the I3C is acting as target)
0x44003058 C   FIELD 31w01 CGRPF (wo): clear DEFGRPA CCC flag (when the I3C is acting as target)
0x44003060 B  REGISTER I3C_DEVR0: I3C own device characteristics register
0x44003060 C   FIELD 00w01 DAVAL (rw): dynamic address is valid (when the I3C is acting as target) When the I3C is acting as controller, this field can be written by software, for validating its own dynamic address, for example before a controller-role hand-off. When the I3C is acting as target, this field is asserted by hardware on the acknowledge of the broadcast ENTDAA CCC or the direct SETNEWDA CCC, and this field is cleared by hardware on the acknowledge of the broadcast RSTDAA CCC.
0x44003060 C   FIELD 01w07 DA (rw): 7-bit dynamic address When the I3C is acting as controller, this field can be written by software, for defining its own dynamic address. When the I3C is acting as target, this field is updated by hardware on the reception of either the broadcast ENTDAA CCC or the direct SETNEWDA CCC.
0x44003060 C   FIELD 16w01 IBIEN (rw): IBI request enable (when the I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0, and is updated by hardware on the reception of DISEC CCC with DISINT=1 (i.e. cleared) and the reception of ENEC CCC with ENINT=1 (i.e. set).
0x44003060 C   FIELD 17w01 CREN (rw): controller-role request enable (when the I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0, and is updated by hardware on the reception of DISEC CCC with DISCR=1 (i.e. cleared) and the reception of ENEC CCC with ENCR=1 (i.e. set).
0x44003060 C   FIELD 19w01 HJEN (rw): hot-join request enable (when the I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0, and is updated by hardware on the reception of DISEC CCC with DISHJ=1 (i.e. cleared) and the reception of ENEC CCC with ENHJ=1 (i.e. set).
0x44003060 C   FIELD 20w02 AS (ro): activity state (when the I3C is acting as target) This read field is updated by hardware on the reception of a ENTASx CCC (enter activity state, with x=0-3):
0x44003060 C   FIELD 22w02 RSTACT (ro): reset action/level on received reset pattern (when the I3C is acting as target) This read field is used by hardware on the reception of a direct read RSTACT CCC in order to return the corresponding data byte on the I3C bus. This read field is updated by hardware on the reception of a broadcast or direct write RSTACT CCC (target reset action).
0x44003060 C   FIELD 24w01 RSTVAL (ro): reset action is valid (when the I3C is acting as target) This read bit is asserted by hardware to indicate that the RTSACT[1:0] field has been updated on the reception of a broadcast or direct write RSTACT CCC (target reset action) and is valid. This field is cleared by hardware when the target receives a frame start. If RSTVAL=1: when the RSTF is asserted (and/or the corresponding interrupt if enabled), I3C_DEVR0.RSTACT[1:0] dictates the reset action to be performed by the software if any. If RSTVAL=0: when the RSTF is asserted (and/or the corresponding interrupt if enabled), the software should issue an I3C reset after a first detected reset pattern, and a system reset on the second one.
0x44003064 B  REGISTER I3C_DEVR1: I3C device 1 characteristics register
0x44003064 C   FIELD 01w07 DA (rw): assigned I3C dynamic address to target x (when the I3C is acting as controller) When the I3C is acting as controller, this field should be written by software to store the 7-bit dynamic address that the controller sends via a broadcast ENTDAA or a direct SETNEWDA CCC which has been acknowledged by the target x. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x44003064 C   FIELD 16w01 IBIACK (rw): IBI request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a IBI request from target x: - After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another IBI request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the controller logs the IBI payload data, if any, depending on I3C_DEVRx.IBIDEN. - The software is notified by the IBI flag (i.e. I3C_EVR.IBIF=1) and/or the corresponding interrupt if enabled; - Independently from IBIACK configuration for this or other devices, further IBI request(s) are NACKed until IBI request flag (i.e. I3C_EVR.IBIF) and controller-role request flag (i.e. I3C_EVR.CRF) are both cleared.
0x44003064 C   FIELD 17w01 CRACK (rw): controller-role request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a controller-role request from target x: After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another controller-role request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the message continues as initially programmed. The software is notified by the controller-role request flag (i.e. I3C_EVR.CRF=1) and/or the corresponding interrupt if enabled; For effectively granting the controller-role to the requesting secondary controller, software should issue a GETACCCR (formerly known as GETACCMST), followed by a STOP. - Independently of CRACK configuration for this or other devices, further controller-role request(s) are NACKed until controller-role request flag (i.e. I3C_EVR.CRF) and IBI flag (i.e. I3C_EVR.IBIF) are both cleared.
0x44003064 C   FIELD 18w01 IBIDEN (rw): IBI data enable (when the I3C is acting as controller) When the I3C is acting as controller, this bit should be written by software to store the BCR[2] bit as received from the target x during broadcast ENTDAA or direct GETBCR CCC via the received I3C_RDR. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x44003064 C   FIELD 19w01 SUSP (rw): suspend/stop I3C transfer on received IBI (when the I3C is acting as controller) When the I3C is acting as controller, this bit is used to receive an IBI from target x with pending read notification feature (i.e. with received MDB[7:5]=3'b101). If this bit is set, when an IBI is received (i.e. I3C_EVR.IBIF=1), a Stop is emitted on the I3C bus and the C-FIFO is automatically flushed by hardware; to avoid a next private read communication issue if a previous private read message to the target x was stored in the C-FIFO.
0x44003064 C   FIELD 31w01 DIS (ro): DA[6:0] write disabled (when the I3C is acting as controller) When the I3C is acting as controller, once that software set IBIACK=1 or CRACK=1, this read bit is set by hardware (i.e. DIS=1) to lock the configured DA[6:0] and IBIDEN values. Then, to be able to next modify DA[6:0] or IBIDEN, the software must wait for this field DIS to be de-asserted by hardware (i.e. polling on DIS=0) before modifying these two assigned values to the target x. Indeed, the target may be requesting an IBI or a controller-role meanwhile the controller intends to modify DA[6:0] or IBIDEN.
0x44003068 B  REGISTER I3C_DEVR2: I3C device 2 characteristics register
0x44003068 C   FIELD 01w07 DA (rw): assigned I3C dynamic address to target x (when the I3C is acting as controller) When the I3C is acting as controller, this field should be written by software to store the 7-bit dynamic address that the controller sends via a broadcast ENTDAA or a direct SETNEWDA CCC which has been acknowledged by the target x. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x44003068 C   FIELD 16w01 IBIACK (rw): IBI request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a IBI request from target x: - After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another IBI request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the controller logs the IBI payload data, if any, depending on I3C_DEVRx.IBIDEN. - The software is notified by the IBI flag (i.e. I3C_EVR.IBIF=1) and/or the corresponding interrupt if enabled; - Independently from IBIACK configuration for this or other devices, further IBI request(s) are NACKed until IBI request flag (i.e. I3C_EVR.IBIF) and controller-role request flag (i.e. I3C_EVR.CRF) are both cleared.
0x44003068 C   FIELD 17w01 CRACK (rw): controller-role request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a controller-role request from target x: After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another controller-role request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the message continues as initially programmed. The software is notified by the controller-role request flag (i.e. I3C_EVR.CRF=1) and/or the corresponding interrupt if enabled; For effectively granting the controller-role to the requesting secondary controller, software should issue a GETACCCR (formerly known as GETACCMST), followed by a STOP. - Independently of CRACK configuration for this or other devices, further controller-role request(s) are NACKed until controller-role request flag (i.e. I3C_EVR.CRF) and IBI flag (i.e. I3C_EVR.IBIF) are both cleared.
0x44003068 C   FIELD 18w01 IBIDEN (rw): IBI data enable (when the I3C is acting as controller) When the I3C is acting as controller, this bit should be written by software to store the BCR[2] bit as received from the target x during broadcast ENTDAA or direct GETBCR CCC via the received I3C_RDR. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x44003068 C   FIELD 19w01 SUSP (rw): suspend/stop I3C transfer on received IBI (when the I3C is acting as controller) When the I3C is acting as controller, this bit is used to receive an IBI from target x with pending read notification feature (i.e. with received MDB[7:5]=3'b101). If this bit is set, when an IBI is received (i.e. I3C_EVR.IBIF=1), a Stop is emitted on the I3C bus and the C-FIFO is automatically flushed by hardware; to avoid a next private read communication issue if a previous private read message to the target x was stored in the C-FIFO.
0x44003068 C   FIELD 31w01 DIS (ro): DA[6:0] write disabled (when the I3C is acting as controller) When the I3C is acting as controller, once that software set IBIACK=1 or CRACK=1, this read bit is set by hardware (i.e. DIS=1) to lock the configured DA[6:0] and IBIDEN values. Then, to be able to next modify DA[6:0] or IBIDEN, the software must wait for this field DIS to be de-asserted by hardware (i.e. polling on DIS=0) before modifying these two assigned values to the target x. Indeed, the target may be requesting an IBI or a controller-role meanwhile the controller intends to modify DA[6:0] or IBIDEN.
0x4400306C B  REGISTER I3C_DEVR3: I3C device 3 characteristics register
0x4400306C C   FIELD 01w07 DA (rw): assigned I3C dynamic address to target x (when the I3C is acting as controller) When the I3C is acting as controller, this field should be written by software to store the 7-bit dynamic address that the controller sends via a broadcast ENTDAA or a direct SETNEWDA CCC which has been acknowledged by the target x. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x4400306C C   FIELD 16w01 IBIACK (rw): IBI request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a IBI request from target x: - After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another IBI request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the controller logs the IBI payload data, if any, depending on I3C_DEVRx.IBIDEN. - The software is notified by the IBI flag (i.e. I3C_EVR.IBIF=1) and/or the corresponding interrupt if enabled; - Independently from IBIACK configuration for this or other devices, further IBI request(s) are NACKed until IBI request flag (i.e. I3C_EVR.IBIF) and controller-role request flag (i.e. I3C_EVR.CRF) are both cleared.
0x4400306C C   FIELD 17w01 CRACK (rw): controller-role request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a controller-role request from target x: After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another controller-role request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the message continues as initially programmed. The software is notified by the controller-role request flag (i.e. I3C_EVR.CRF=1) and/or the corresponding interrupt if enabled; For effectively granting the controller-role to the requesting secondary controller, software should issue a GETACCCR (formerly known as GETACCMST), followed by a STOP. - Independently of CRACK configuration for this or other devices, further controller-role request(s) are NACKed until controller-role request flag (i.e. I3C_EVR.CRF) and IBI flag (i.e. I3C_EVR.IBIF) are both cleared.
0x4400306C C   FIELD 18w01 IBIDEN (rw): IBI data enable (when the I3C is acting as controller) When the I3C is acting as controller, this bit should be written by software to store the BCR[2] bit as received from the target x during broadcast ENTDAA or direct GETBCR CCC via the received I3C_RDR. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x4400306C C   FIELD 19w01 SUSP (rw): suspend/stop I3C transfer on received IBI (when the I3C is acting as controller) When the I3C is acting as controller, this bit is used to receive an IBI from target x with pending read notification feature (i.e. with received MDB[7:5]=3'b101). If this bit is set, when an IBI is received (i.e. I3C_EVR.IBIF=1), a Stop is emitted on the I3C bus and the C-FIFO is automatically flushed by hardware; to avoid a next private read communication issue if a previous private read message to the target x was stored in the C-FIFO.
0x4400306C C   FIELD 31w01 DIS (ro): DA[6:0] write disabled (when the I3C is acting as controller) When the I3C is acting as controller, once that software set IBIACK=1 or CRACK=1, this read bit is set by hardware (i.e. DIS=1) to lock the configured DA[6:0] and IBIDEN values. Then, to be able to next modify DA[6:0] or IBIDEN, the software must wait for this field DIS to be de-asserted by hardware (i.e. polling on DIS=0) before modifying these two assigned values to the target x. Indeed, the target may be requesting an IBI or a controller-role meanwhile the controller intends to modify DA[6:0] or IBIDEN.
0x44003070 B  REGISTER I3C_DEVR4: I3C device 4 characteristics register
0x44003070 C   FIELD 01w07 DA (rw): assigned I3C dynamic address to target x (when the I3C is acting as controller) When the I3C is acting as controller, this field should be written by software to store the 7-bit dynamic address that the controller sends via a broadcast ENTDAA or a direct SETNEWDA CCC which has been acknowledged by the target x. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x44003070 C   FIELD 16w01 IBIACK (rw): IBI request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a IBI request from target x: - After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another IBI request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the controller logs the IBI payload data, if any, depending on I3C_DEVRx.IBIDEN. - The software is notified by the IBI flag (i.e. I3C_EVR.IBIF=1) and/or the corresponding interrupt if enabled; - Independently from IBIACK configuration for this or other devices, further IBI request(s) are NACKed until IBI request flag (i.e. I3C_EVR.IBIF) and controller-role request flag (i.e. I3C_EVR.CRF) are both cleared.
0x44003070 C   FIELD 17w01 CRACK (rw): controller-role request acknowledge (when the I3C is acting as controller) When the I3C is acting as controller, this bit is written by software to define the acknowledge policy to be applied on the I3C bus on the reception of a controller-role request from target x: After the NACK, the message continues as initially programmed (the target is aware of the NACK and can emit another controller-role request later on) - The field DIS is asserted by hardware to protect DA[6:0] from being modified by software meanwhile the hardware can store internally the current DA[6:0] into the kernel clock domain. - After the ACK, the message continues as initially programmed. The software is notified by the controller-role request flag (i.e. I3C_EVR.CRF=1) and/or the corresponding interrupt if enabled; For effectively granting the controller-role to the requesting secondary controller, software should issue a GETACCCR (formerly known as GETACCMST), followed by a STOP. - Independently of CRACK configuration for this or other devices, further controller-role request(s) are NACKed until controller-role request flag (i.e. I3C_EVR.CRF) and IBI flag (i.e. I3C_EVR.IBIF) are both cleared.
0x44003070 C   FIELD 18w01 IBIDEN (rw): IBI data enable (when the I3C is acting as controller) When the I3C is acting as controller, this bit should be written by software to store the BCR[2] bit as received from the target x during broadcast ENTDAA or direct GETBCR CCC via the received I3C_RDR. Writing to this field has no impact when the read field I3C_DEVRx.DIS=1.
0x44003070 C   FIELD 19w01 SUSP (rw): suspend/stop I3C transfer on received IBI (when the I3C is acting as controller) When the I3C is acting as controller, this bit is used to receive an IBI from target x with pending read notification feature (i.e. with received MDB[7:5]=3'b101). If this bit is set, when an IBI is received (i.e. I3C_EVR.IBIF=1), a Stop is emitted on the I3C bus and the C-FIFO is automatically flushed by hardware; to avoid a next private read communication issue if a previous private read message to the target x was stored in the C-FIFO.
0x44003070 C   FIELD 31w01 DIS (ro): DA[6:0] write disabled (when the I3C is acting as controller) When the I3C is acting as controller, once that software set IBIACK=1 or CRACK=1, this read bit is set by hardware (i.e. DIS=1) to lock the configured DA[6:0] and IBIDEN values. Then, to be able to next modify DA[6:0] or IBIDEN, the software must wait for this field DIS to be de-asserted by hardware (i.e. polling on DIS=0) before modifying these two assigned values to the target x. Indeed, the target may be requesting an IBI or a controller-role meanwhile the controller intends to modify DA[6:0] or IBIDEN.
0x44003090 B  REGISTER I3C_MAXRLR: I3C maximum read length register
0x44003090 C   FIELD 00w16 MRL (rw): maximum data read length (when I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0 and updated by hardware on the reception of SETMRL command (with potentially also updated IBIP[2:0]). Software is notified of a MRL update by the I3C_EVR.MRLUPF and the corresponding interrupt if enabled. This field is used by hardware to return the value on the I3C bus when the target receives a GETMRL CCC.
0x44003090 C   FIELD 16w03 IBIP (rw): IBI payload data size, in bytes (when I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0 to set the number of data bytes to be sent to the controller after an IBI request has been acknowledged.This field may be updated by hardware on the reception of SETMRL command (which potentially also updated IBIP[2:0]). Software is notified of a MRL update by the I3C_EVR.MRLUPF and the corresponding interrupt if enabled. others: same as 100
0x44003094 B  REGISTER I3C_MAXWLR: I3C maximum write length register
0x44003094 C   FIELD 00w16 MWL (rw): maximum data write length (when I3C is acting as target) This field is initially written by software when I3C_CFGR.EN=0 and updated by hardware on the reception of SETMWL command. Software is notified of a MWL update by the I3C_EVR.MWLUPF and the corresponding interrupt if enabled. This field is used by hardware to return the value on the I3C bus when the target receives a GETMWL CCC.
0x440030A0 B  REGISTER I3C_TIMINGR0: I3C timing register 0
0x440030A0 C   FIELD 00w08 SCLL_PP (rw): SCL low duration in I3C push-pull phases, in number of kernel clocks cycles: tSCLL_PP = (SCLL_PP + 1) x tI3CCLK SCLL_PP is used to generate tLOW (I3C) timing.
0x440030A0 C   FIELD 08w08 SCLH_I3C (rw): SCL high duration, used for I3C messages (both in push-pull and open-drain phases), in number of kernel clocks cycles: tSCLH_I3C = (SCLH_I3C + 1) x tI3CCLK SCLH_I3C is used to generate both tHIGH (I3C) and tHIGH_MIXED timings.
0x440030A0 C   FIELD 16w08 SCLL_OD (rw): SCL low duration in open-drain phases, used for legacy I2C commands and for I3C open-drain phases (address header phase following a START, not a Repeated START), in number of kernel clocks cycles: tSCLL_OD = (SCLL_OD + 1) x tI3CCLK SCLL_OD is used to generate both tLOW (I2C) and tLOW_OD timings (max. of the two).
0x440030A0 C   FIELD 24w08 SCLH_I2C (rw): SCL high duration, used for legacy I2C commands, in number of kernel clocks cycles: tSCLH_I2C = (SCLH_I2C + 1) x tI3CCLK SCLH_I2C is used to generate tHIGH (I2C) timing.
0x440030A4 B  REGISTER I3C_TIMINGR1: I3C timing register 1
0x440030A4 C   FIELD 00w08 AVAL (rw): number of kernel clock cycles, that is used whatever I3C is acting as controller or target, to set the following MIPI I3C timings, like bus available condition time: When the I3C is acting as target: for bus available condition time: it must wait for (bus available condition) time to be elapsed after a stop and before issuing a start request for an IBI or a controller-role request (i.e. bus free condition is sustained for at least tAVAL). refer to MIPI timing tAVAL = 1 s. This timing is defined by: tAVAL = (AVAL[7:0] + 2) x tI3CCLK for bus idle condition time: it must wait for (bus idle condition) time to be elapsed after that both SDA and SCL are continuously high and stable before issuing a hot-join event. Refer to MIPI v1.1 timing tIDLE = 200 s . This timing is defined by: tIDLE = (AVAL[7:0] + 2) x 200 x tI3CCLK When the I3C is acting as controller, it can not stall the clock beyond a maximum stall time (i.e. stall the SCL clock low), as follows: on first bit of assigned address during dynamic address assignment: it can not stall the clock beyond the MIPI timing tSTALLDAA = 15 ms. This timing is defined by: tSTALLDAA = (AVAL[7:0] + 1) x 15000 x tI3CCLK on ACK/NACK phase of I3C/I2C transfer, on parity bit of write data transfer, on transition bit of I3C read transfer: it can not stall the clock beyond the MIPI timing tSTALL = 100 s. This timing is defined by: tSTALL = (AVAL[7:0] + 1) x 100 x tI3CCLK Whatever the I3C is acting as controller or as (controller-capable) target, during a controller-role hand-off procedure: The new controller must wait for a time (refer to MIPI timing tNEWCRLock) before pulling SDA low (i.e. issuing a start). And the active controller must wait for the same time while monitoring new controller and before testing the new controller by pulling SDA low. This time to wait is dependent on the defined I3C_TIMINGR1.ANSCR[1:0], as follows: If ASNCR[1:0]=00: tNEWCRLock = (AVAL[7:0] + 1) x tI3CCLK If ASNCR[1:0]=01: tNEWCRLock = (AVAL[7:0] + 1) x 100 x tI3CCLK If ASNCR[1:0]=10: tNEWCRLock = (AVAL[7:0] + 1) x 2000 x tI3CCLK If ASNCR[1:0]=11: tNEWCRLock = (AVAL[7:0] + 1) x 50000 x tI3CCLK
0x440030A4 C   FIELD 08w02 ASNCR (rw): activity state of the new controller (when I3C is acting as active- controller) This field indicates the time to wait before being accessed as new target, refer to the other field AVAL[7:0]. This field can be modified only when the I3C is acting as controller.
0x440030A4 C   FIELD 16w07 FREE (rw): number of kernel clocks cycles that is used to set some MIPI timings like bus free condition time (when the I3C is acting as controller)
0x440030A4 C   FIELD 28w01 SDA_HD (rw): SDA hold time (when the I3C is acting as controller), in number of kernel clocks cycles (refer to MIPI timing SDA hold time in push-pull tHD_PP):
0x440030A8 B  REGISTER I3C_TIMINGR2: I3C timing register 2
0x440030A8 C   FIELD 00w01 STALLT (rw): Controller clock stall on T-bit phase of Data enable The SCL is stalled during STALL x tSCLL_PP in the T-bit phase (before 9th bit). This allows the target to prepare data to be sent.
0x440030A8 C   FIELD 01w01 STALLD (rw): controller clock stall on PAR phase of Data enable The SCL is stalled during STALL x tSCLL_PP in the T-bit phase (before 9th bit). This allows the target to read received data.
0x440030A8 C   FIELD 02w01 STALLC (rw): controller clock stall on PAR phase of CCC enable The SCL is stalled during STALL x tSCLL_PP in the T-bit phase of common command code (before 9th bit). This allows the target to decode the command.
0x440030A8 C   FIELD 03w01 STALLA (rw): controller clock stall enable on ACK phase The SCL is stalled (during tSCLL_STALLas defined by STALL) in the address ACK/NACK phase (before 9th bit). This allows the target to prepare data or the controller to respond to target interrupt.
0x440030A8 C   FIELD 08w08 STALL (rw): controller clock stall time, in number of kernel clock cycles tSCLL_STALL = STALL x tI3CCLK
0x440030C0 B  REGISTER I3C_BCR: I3C bus characteristics register
0x440030C0 C   FIELD 00w01 BCR0 (rw): max data speed limitation
0x440030C0 C   FIELD 02w01 BCR2 (rw): in-band interrupt (IBI) payload
0x440030C0 C   FIELD 06w01 BCR6 (rw): controller capable
0x440030C4 B  REGISTER I3C_DCR: I3C device characteristics register
0x440030C4 C   FIELD 00w08 DCR (rw): device characteristics ID others: ID to describe the type of the I3C sensor/device Note: The latest MIPI DCR ID assignments are available at: https://www.mipi.org/MIPI_I3C_device_characteristics_register
0x440030C8 B  REGISTER I3C_GETCAPR: I3C get capability register
0x440030C8 C   FIELD 14w01 CAPPEND (rw): IBI MDB support for pending read notification This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and indicates the support (or not) of the pending read notification via the IBI MDB[7:0] value. This bit is used to return the GETCAP3 byte in response to the GETCAPS CCC format 1.
0x440030CC B  REGISTER I3C_CRCAPR: I3C controller-role capability register
0x440030CC C   FIELD 03w01 CAPDHOFF (rw): delayed controller-role hand-off This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and indicates if this target I3C may need additional time to process a controller-role hand-off requested by the current controller. This bit is used to return the CRCAP2 byte in response to the GETCAPS CCC format 2.
0x440030CC C   FIELD 09w01 CAPGRP (rw): group management support (when acting as controller) This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and indicates if the I3C is able to support group management when it acts as a controller (after controller-role hand-off) via emitted DEFGRPA, RSTGRPA, and SETGRPA CCC. This bit is used to return the CRCAP1 byte in response to the GETCAPS CCC format 2.
0x440030D0 B  REGISTER I3C_GETMXDSR: I3C get capability register
0x440030D0 C   FIELD 00w02 HOFFAS (rw): controller hand-off activity state This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and indicates in which initial activity state the (other) current controller should expect the I3C bus after a controller-role hand-off to this controller-capable I3C, when returning the defining byte CRHDLY (0x91) to a GETMXDS CCC. This 2-bit field is used to return the CRHDLY1 byte in response to the GETCAPS CCC format 3, in order to state which is the activity state of this I3C when becoming controller after a controller-role hand-off, and consequently the time the former controller should wait before testing this I3C to be confirmed its ownership.
0x440030D0 C   FIELD 08w02 FMT (rw): GETMXDS CCC format This field is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and indicates how is returned the GETMXDS format 1 (without MaxRdTurn) and format 2 (with MaxRdTurn). This bit is used to return the 2-byte format 1 (MaxWr, MaxRd) or 5-byte format 2 (MaxWr, MaxRd, 3-byte MaxRdTurn) byte in response to the GETCAPS CCC. - 3-byte MaxRdTurn is returned with MSB=0, middle byte=0 and LSB=RDTURN[7:0]. - Max read turnaround time is less than 256 s. - 3-byte MaxRdTurn is returned with MSB=0, middle byte=RDTURN[7:0] and LSB=0. - Max read turnaround time is between 256 s and 65535 s - 3-byte MaxRdTurn is returned with MSB=RDTURN[7:0], middle byte=0 and LSB=0. - Max read turnaround time is between 65535 s and 16 s.
0x440030D0 C   FIELD 16w08 RDTURN (rw): programmed byte of the 3-byte MaxRdTurn (maximum read turnaround byte) This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and writes the value of the selected byte (via the FMT[1:0] field) of the 3-byte MaxRdTurn which is returned in response to the GETMXDS CCC format 2 to encode the maximum read turnaround time.
0x440030D0 C   FIELD 24w01 TSCO (rw): clock-to-data turnaround time (tSCO) This bit is written by software during bus initialization (i.e. I3C_CFGR.EN=0) and is used to specify the clock-to-data turnaround time tSCO (vs the value of 12 ns). This bit is used by the hardware in response to the GETMXDS CCC to return the encoded clock-to-data turnaround time via the returned MaxRd[5:3] bits.
0x440030D4 B  REGISTER I3C_EPIDR: I3C extended provisioned ID register
0x440030D4 C   FIELD 12w04 MIPIID (rw): 4-bit MIPI Instance ID This field is written by software to set and identify individually each instance of this I3C IP with a specific number on a single I3C bus. This field represents the bits[15:12] of the 48-bit provisioned ID. Note: The bits[11:0] of the provisioned ID may be 0.
0x440030D4 C   FIELD 16w01 IDTSEL (ro): provisioned ID type selector This field is set as 0 i.e. vendor fixed value. This field represents the bit[32] of the 48-bit provisioned ID. Note: The bits[31:16] of the provisioned ID may be 0.
0x440030D4 C   FIELD 17w15 MIPIMID (ro): 15-bit MIPI manufacturer ID This read field is the 15-bit STMicroelectronics MIPI ID i.e. 0x0104. This field represents the bits[47:33] of the 48-bit provisioned ID.
0x44004400 A PERIPHERAL LPTIM1
0x44004400 B  REGISTER ISR_intput: LPTIM1 interrupt and status register [alternate]
0x44004400 B  REGISTER ISR_output: LPTIM1 interrupt and status register [alternate]
0x44004400 C   FIELD 00w01 CC1IF (ro): Compare 1 interrupt flag If channel CC1 is configured as output: The CC1IF flag is set by hardware to inform application that LPTIM_CNT register value matches the compare register's value. CC1IF flag can be cleared by writing 1 to the CC1CF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 00w01 CC1IF (ro): capture 1 interrupt flag If channel CC1 is configured as input: CC1IF is set by hardware to inform application that the current value of the counter is captured in LPTIM_CCR1 register. The corresponding interrupt or DMA request is generated if enabled. The CC1OF flag is set if the CC1IF flag was already high.
0x44004400 C   FIELD 01w01 ARRM (ro): Autoreload match ARRM is set by hardware to inform application that LPTIM_CNT register's value reached the LPTIM_ARR register's value. ARRM flag can be cleared by writing 1 to the ARRMCF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 01w01 ARRM (ro): Autoreload match ARRM is set by hardware to inform application that LPTIM_CNT register's value reached the LPTIM_ARR register's value. ARRM flag can be cleared by writing 1 to the ARRMCF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 02w01 EXTTRIG (ro): External trigger edge event EXTTRIG is set by hardware to inform application that a valid edge on the selected external trigger input has occurred. If the trigger is ignored because the timer has already started, then this flag is not set. EXTTRIG flag can be cleared by writing 1 to the EXTTRIGCF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 02w01 EXTTRIG (ro): External trigger edge event EXTTRIG is set by hardware to inform application that a valid edge on the selected external trigger input has occurred. If the trigger is ignored because the timer has already started, then this flag is not set. EXTTRIG flag can be cleared by writing 1 to the EXTTRIGCF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 03w01 CMP1OK (ro): Compare register 1 update OK CMP1OK is set by hardware to inform application that the APB bus write operation to the LPTIM_CCR1 register has been successfully completed. CMP1OK flag can be cleared by writing 1 to the CMP1OKCF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 04w01 ARROK (ro): Autoreload register update OK ARROK is set by hardware to inform application that the APB bus write operation to the LPTIM_ARR register has been successfully completed. ARROK flag can be cleared by writing 1 to the ARROKCF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 04w01 ARROK (ro): Autoreload register update OK ARROK is set by hardware to inform application that the APB bus write operation to the LPTIM_ARR register has been successfully completed. ARROK flag can be cleared by writing 1 to the ARROKCF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 05w01 UP (ro): Counter direction change down to up In Encoder mode, UP bit is set by hardware to inform application that the counter direction has changed from down to up. UP flag can be cleared by writing 1 to the UPCF bit in the LPTIM_ICR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004400 C   FIELD 05w01 UP (ro): Counter direction change down to up In Encoder mode, UP bit is set by hardware to inform application that the counter direction has changed from down to up. UP flag can be cleared by writing 1 to the UPCF bit in the LPTIM_ICR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004400 C   FIELD 06w01 DOWN (ro): Counter direction change up to down In Encoder mode, DOWN bit is set by hardware to inform application that the counter direction has changed from up to down. DOWN flag can be cleared by writing 1 to the DOWNCF bit in the LPTIM_ICR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004400 C   FIELD 06w01 DOWN (ro): Counter direction change up to down In Encoder mode, DOWN bit is set by hardware to inform application that the counter direction has changed from up to down. DOWN flag can be cleared by writing 1 to the DOWNCF bit in the LPTIM_ICR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004400 C   FIELD 07w01 UE (ro): LPTIM update event occurred UE is set by hardware to inform application that an update event was generated. The corresponding interrupt or DMA request is generated if enabled. UE flag can be cleared by writing 1 to the UECF bit in the LPTIM_ICR register. The UE flag is automatically cleared by hardware once the LPTIM_ARR register is written by any bus master like CPU or DMA.
0x44004400 C   FIELD 07w01 UE (ro): LPTIM update event occurred UE is set by hardware to inform application that an update event was generated. UE flag can be cleared by writing 1 to the UECF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 08w01 REPOK (ro): Repetition register update OK REPOK is set by hardware to inform application that the APB bus write operation to the LPTIM_RCR register has been successfully completed. REPOK flag can be cleared by writing 1 to the REPOKCF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 08w01 REPOK (ro): Repetition register update OK REPOK is set by hardware to inform application that the APB bus write operation to the LPTIM_RCR register has been successfully completed. REPOK flag can be cleared by writing 1 to the REPOKCF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 09w01 CC2IF (ro): Capture 2 interrupt flag If channel CC2 is configured as input: CC2IF is set by hardware to inform application that the current value of the counter is captured in LPTIM_CCR2 register. The corresponding interrupt or DMA request is generated if enabled. The CC2OF flag is set if the CC2IF flag was already high. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004400 C   FIELD 09w01 CC2IF (ro): Compare 2 interrupt flag If channel CC2 is configured as output: The CC2IF flag is set by hardware to inform application that LPTIM_CNT register value matches the compare register's value. CC2IF flag can be cleared by writing 1 to the CC2CF bit in the LPTIM_ICR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004400 C   FIELD 12w01 CC1OF (ro): Capture 1 over-capture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing 1 to the CC1OCF bit in the LPTIM_ICR register. Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x44004400 C   FIELD 13w01 CC2OF (ro): Capture 2 over-capture flag This flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing 1 to the CC2OCF bit in the LPTIM_ICR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004400 C   FIELD 19w01 CMP2OK (ro): Compare register 2 update OK CMP2OK is set by hardware to inform application that the APB bus write operation to the LPTIM_CCR2 register has been successfully completed. CMP2OK flag can be cleared by writing 1 to the CMP2OKCF bit in the LPTIM_ICR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004400 C   FIELD 24w01 DIEROK (ro): Interrupt enable register update OK DIEROK is set by hardware to inform application that the APB bus write operation to the LPTIM_DIER register has been successfully completed. DIEROK flag can be cleared by writing 1 to the DIEROKCF bit in the LPTIM_ICR register.
0x44004400 C   FIELD 24w01 DIEROK (ro): Interrupt enable register update OK DIEROK is set by hardware to inform application that the APB bus write operation to the LPTIM_DIER register has been successfully completed. DIEROK flag can be cleared by writing 1 to the DIEROKCF bit in the LPTIM_ICR register.
0x44004404 B  REGISTER ICR_intput: LPTIM interrupt clear register
0x44004404 B  REGISTER ICR_output: LPTIM1 interrupt clear register [alternate]
0x44004404 C   FIELD 00w01 CC1CF (wo): Capture/compare 1 clear flag Writing 1 to this bit clears the CC1IF flag in the LPTIM_ISR register.
0x44004404 C   FIELD 00w01 CC1CF (wo): Capture/compare 1 clear flag Writing 1 to this bit clears the CC1IF flag in the LPTIM_ISR register.
0x44004404 C   FIELD 01w01 ARRMCF (wo): Autoreload match clear flag Writing 1 to this bit clears the ARRM flag in the LPTIM_ISR register
0x44004404 C   FIELD 01w01 ARRMCF (wo): Autoreload match clear flag Writing 1 to this bit clears the ARRM flag in the LPTIM_ISR register
0x44004404 C   FIELD 02w01 EXTTRIGCF (wo): External trigger valid edge clear flag Writing 1 to this bit clears the EXTTRIG flag in the LPTIM_ISR register
0x44004404 C   FIELD 02w01 EXTTRIGCF (wo): External trigger valid edge clear flag Writing 1 to this bit clears the EXTTRIG flag in the LPTIM_ISR register
0x44004404 C   FIELD 03w01 CMP1OKCF (wo): Compare register 1 update OK clear flag Writing 1 to this bit clears the CMP1OK flag in the LPTIM_ISR register.
0x44004404 C   FIELD 04w01 ARROKCF (wo): Autoreload register update OK clear flag Writing 1 to this bit clears the ARROK flag in the LPTIM_ISR register
0x44004404 C   FIELD 04w01 ARROKCF (wo): Autoreload register update OK clear flag Writing 1 to this bit clears the ARROK flag in the LPTIM_ISR register
0x44004404 C   FIELD 05w01 UPCF (wo): Direction change to UP clear flag Writing 1 to this bit clear the UP flag in the LPTIM_ISR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004404 C   FIELD 05w01 UPCF (wo): Direction change to UP clear flag Writing 1 to this bit clear the UP flag in the LPTIM_ISR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004404 C   FIELD 06w01 DOWNCF (wo): Direction change to down clear flag Writing 1 to this bit clear the DOWN flag in the LPTIM_ISR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004404 C   FIELD 06w01 DOWNCF (wo): Direction change to down clear flag Writing 1 to this bit clear the DOWN flag in the LPTIM_ISR register. Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004404 C   FIELD 07w01 UECF (wo): Update event clear flag Writing 1 to this bit clear the UE flag in the LPTIM_ISR register.
0x44004404 C   FIELD 07w01 UECF (wo): Update event clear flag Writing 1 to this bit clear the UE flag in the LPTIM_ISR register.
0x44004404 C   FIELD 08w01 REPOKCF (wo): Repetition register update OK clear flag Writing 1 to this bit clears the REPOK flag in the LPTIM_ISR register.
0x44004404 C   FIELD 08w01 REPOKCF (wo): Repetition register update OK clear flag Writing 1 to this bit clears the REPOK flag in the LPTIM_ISR register.
0x44004404 C   FIELD 09w01 CC2CF (wo): Capture/compare 2 clear flag Writing 1 to this bit clears the CC2IF flag in the LPTIM_ISR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004404 C   FIELD 09w01 CC2CF (wo): Capture/compare 2 clear flag Writing 1 to this bit clears the CC2IF flag in the LPTIM_ISR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004404 C   FIELD 12w01 CC1OCF (wo): Capture/compare 1 over-capture clear flag Writing 1 to this bit clears the CC1OF flag in the LPTIM_ISR register. Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x44004404 C   FIELD 13w01 CC2OCF (wo): Capture/compare 2 over-capture clear flag Writing 1 to this bit clears the CC2OF flag in the LPTIM_ISR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004404 C   FIELD 19w01 CMP2OKCF (wo): Compare register 2 update OK clear flag Writing 1 to this bit clears the CMP2OK flag in the LPTIM_ISR register. Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004404 C   FIELD 24w01 DIEROKCF (wo): Interrupt enable register update OK clear flag Writing 1 to this bit clears the DIEROK flag in the LPTIM_ISR register.
0x44004404 C   FIELD 24w01 DIEROKCF (wo): Interrupt enable register update OK clear flag Writing 1 to this bit clears the DIEROK flag in the LPTIM_ISR register.
0x44004408 B  REGISTER DIER_intput: LPTIM interrupt enable register
0x44004408 B  REGISTER DIER_output: LPTIM1 interrupt enable register [alternate]
0x44004408 C   FIELD 00w01 CC1IE (rw): Capture/compare 1 interrupt enable
0x44004408 C   FIELD 00w01 CC1IE (rw): Capture/compare 1 interrupt enable
0x44004408 C   FIELD 01w01 ARRMIE (rw): Autoreload match Interrupt Enable
0x44004408 C   FIELD 01w01 ARRMIE (rw): Autoreload match Interrupt Enable
0x44004408 C   FIELD 02w01 EXTTRIGIE (rw): External trigger valid edge Interrupt Enable
0x44004408 C   FIELD 02w01 EXTTRIGIE (rw): External trigger valid edge Interrupt Enable
0x44004408 C   FIELD 03w01 CMP1OKIE (rw): Compare register 1 update OK interrupt enable
0x44004408 C   FIELD 04w01 ARROKIE (rw): Autoreload register update OK Interrupt Enable
0x44004408 C   FIELD 04w01 ARROKIE (rw): Autoreload register update OK Interrupt Enable
0x44004408 C   FIELD 05w01 UPIE (rw): Direction change to UP Interrupt Enable Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004408 C   FIELD 05w01 UPIE (rw): Direction change to UP Interrupt Enable Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004408 C   FIELD 06w01 DOWNIE (rw): Direction change to down Interrupt Enable Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004408 C   FIELD 06w01 DOWNIE (rw): Direction change to down Interrupt Enable Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004408 C   FIELD 07w01 UEIE (rw): Update event interrupt enable
0x44004408 C   FIELD 07w01 UEIE (rw): Update event interrupt enable
0x44004408 C   FIELD 08w01 REPOKIE (rw): Repetition register update OK interrupt Enable
0x44004408 C   FIELD 08w01 REPOKIE (rw): Repetition register update OK interrupt Enable
0x44004408 C   FIELD 09w01 CC2IE (rw): Capture/compare 2 interrupt enable Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004408 C   FIELD 09w01 CC2IE (rw): Capture/compare 2 interrupt enable Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004408 C   FIELD 12w01 CC1OIE (rw): Capture/compare 1 over-capture interrupt enable Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x44004408 C   FIELD 13w01 CC2OIE (rw): Capture/compare 2 over-capture interrupt enable Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004408 C   FIELD 16w01 CC1DE (rw): Capture/compare 1 DMA request enable Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x44004408 C   FIELD 19w01 CMP2OKIE (rw): Compare register 2 update OK interrupt enable Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x44004408 C   FIELD 23w01 UEDE (rw): Update event DMA request enable Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x44004408 C   FIELD 23w01 UEDE (rw): Update event DMA request enable Note: If LPTIM does not implement at least 1 channel this bit is reserved. Please refer to .
0x44004408 C   FIELD 25w01 CC2DE (rw): Capture/compare 2 DMA request enable Note: If LPTIM does not implement at least 2 channels this bit is reserved. Please refer to .
0x4400440C B  REGISTER CFGR: LPTIM configuration register
0x4400440C C   FIELD 00w01 CKSEL (rw): Clock selector The CKSEL bit selects which clock source the LPTIM uses:
0x4400440C C   FIELD 01w02 CKPOL (rw): Clock Polarity When the LPTIM is clocked by an external clock source, CKPOL bits is used to configure the active edge or edges used by the counter: If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 1 is active. If the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 2 is active. Refer to for more details about Encoder mode sub-modes.
0x4400440C C   FIELD 03w02 CKFLT (rw): Configurable digital filter for external clock The CKFLT value sets the number of consecutive equal samples that should be detected when a level change occurs on an external clock signal before it is considered as a valid level transition. An internal clock source must be present to use this feature
0x4400440C C   FIELD 06w02 TRGFLT (rw): Configurable digital filter for trigger The TRGFLT value sets the number of consecutive equal samples that should be detected when a level change occurs on an internal trigger before it is considered as a valid level transition. An internal clock source must be present to use this feature
0x4400440C C   FIELD 09w03 PRESC (rw): Clock prescaler The PRESC bits configure the prescaler division factor. It can be one among the following division factors:
0x4400440C C   FIELD 13w03 TRIGSEL (rw): Trigger selector The TRIGSEL bits select the trigger source that serves as a trigger event for the LPTIM among the below 8 available sources: See for details.
0x4400440C C   FIELD 17w02 TRIGEN (rw): Trigger enable and polarity The TRIGEN bits controls whether the LPTIM counter is started by an external trigger or not. If the external trigger option is selected, three configurations are possible for the trigger active edge:
0x4400440C C   FIELD 19w01 TIMOUT (rw): Timeout enable The TIMOUT bit controls the Timeout feature
0x4400440C C   FIELD 20w01 WAVE (rw): Waveform shape The WAVE bit controls the output shape
0x4400440C C   FIELD 21w01 WAVPOL (rw): Waveform shape polarity The WAVPOL bit controls the output polarity Note: If the LPTIM implements at least one capture/compare channel, this bit is reserved. Please refer to .
0x4400440C C   FIELD 22w01 PRELOAD (rw): Registers update mode The PRELOAD bit controls the LPTIM_ARR, LPTIM_RCR and the LPTIM_CCRx registers update modality
0x4400440C C   FIELD 23w01 COUNTMODE (rw): counter mode enabled The COUNTMODE bit selects which clock source is used by the LPTIM to clock the counter:
0x4400440C C   FIELD 24w01 ENC (rw): Encoder mode enable The ENC bit controls the Encoder mode Note: If the LPTIM does not support encoder mode feature, this bit is reserved. Please refer to .
0x44004410 B  REGISTER CR: LPTIM control register
0x44004410 C   FIELD 00w01 ENABLE (rw): LPTIM enable The ENABLE bit is set and cleared by software.
0x44004410 C   FIELD 01w01 SNGSTRT (rw): LPTIM start in Single mode This bit is set by software and cleared by hardware. In case of software start (TRIGEN[1:0] = '00'), setting this bit starts the LPTIM in single pulse mode. If the software start is disabled (TRIGEN[1:0] different than '00'), setting this bit starts the LPTIM in single pulse mode as soon as an external trigger is detected. If this bit is set when the LPTIM is in continuous counting mode, then the LPTIM stops at the following match between LPTIM_ARR and LPTIM_CNT registers. This bit can only be set when the LPTIM is enabled. It is automatically reset by hardware.
0x44004410 C   FIELD 02w01 CNTSTRT (rw): Timer start in Continuous mode This bit is set by software and cleared by hardware. In case of software start (TRIGEN[1:0] = '00'), setting this bit starts the LPTIM in Continuous mode. If the software start is disabled (TRIGEN[1:0] different than '00'), setting this bit starts the timer in Continuous mode as soon as an external trigger is detected. If this bit is set when a single pulse mode counting is ongoing, then the timer does not stop at the next match between the LPTIM_ARR and LPTIM_CNT registers and the LPTIM counter keeps counting in Continuous mode. This bit can be set only when the LPTIM is enabled. It is automatically reset by hardware.
0x44004410 C   FIELD 03w01 COUNTRST (rw): Counter reset This bit is set by software and cleared by hardware. When set to '1' this bit triggers a synchronous reset of the LPTIM_CNT counter register. Due to the synchronous nature of this reset, it only takes place after a synchronization delay of 3 LPTimer core clock cycles (LPTimer core clock may be different from APB clock). This bit can be set only when the LPTIM is enabled. It is automatically reset by hardware. COUNTRST must never be set to '1' by software before it is already cleared to '0' by hardware. Software should consequently check that COUNTRST bit is already cleared to '0' before attempting to set it to '1'.
0x44004410 C   FIELD 04w01 RSTARE (rw): Reset after read enable This bit is set and cleared by software. When RSTARE is set to '1', any read access to LPTIM_CNT register asynchronously resets LPTIM_CNT register content. This bit can be set only when the LPTIM is enabled.
0x44004414 B  REGISTER CCR1: LPTIM compare register 1
0x44004414 C   FIELD 00w16 CCR1 (rw): Capture/compare 1 value If channel CC1 is configured as output: CCR1 is the value to be loaded in the capture/compare 1 register. Depending on the PRELOAD option, the CCR1 register is immediately updated if the PRELOAD bit is reset and updated at next LPTIM update event if PREOAD bit is reset. The capture/compare register 1 contains the value to be compared to the counter LPTIM_CNT and signaled on OC1 output. If channel CC1 is configured as input: CCR1 becomes read-only, it contains the counter value transferred by the last input capture 1 event. The LPTIM_CCR1 register is read-only and cannot be programmed.
0x44004418 B  REGISTER ARR: LPTIM autoreload register
0x44004418 C   FIELD 00w16 ARR (rw): Auto reload value ARR is the autoreload value for the LPTIM. This value must be strictly greater than the CCRx[15:0] value.
0x4400441C B  REGISTER CNT: LPTIM counter register
0x4400441C C   FIELD 00w16 CNT (ro): Counter value When the LPTIM is running with an asynchronous clock, reading the LPTIM_CNT register may return unreliable values. So in this case it is necessary to perform two consecutive read accesses and verify that the two returned values are identical.
0x44004428 B  REGISTER RCR: LPTIM repetition register
0x44004428 C   FIELD 00w08 REP (rw): Repetition register value REP is the repetition value for the LPTIM.
0x4400442C B  REGISTER CCMR1: LPTIM capture/compare mode register 1
0x4400442C C   FIELD 00w01 CC1SEL (rw): Capture/compare 1 selection This bitfield defines the direction of the channel input (capture) or output mode.
0x4400442C C   FIELD 01w01 CC1E (rw): Capture/compare 1 output enable. This bit determines if a capture of the counter value can actually be done into the input capture/compare register 1 (LPTIM_CCR1) or not.
0x4400442C C   FIELD 02w02 CC1P (rw): Capture/compare 1 output polarity. Only bit2 is used to set polarity when output mode is enabled, bit3 is don't care. This field is used to select the IC1 polarity for capture operations.
0x4400442C C   FIELD 08w02 IC1PSC (rw): Input capture 1 prescaler This bitfield defines the ratio of the prescaler acting on the CC1 input (IC1).
0x4400442C C   FIELD 12w02 IC1F (rw): Input capture 1 filter This bitfield defines the number of consecutive equal samples that should be detected when a level change occurs on an external input capture signal before it is considered as a valid level transition. An internal clock source must be present to use this feature.
0x4400442C C   FIELD 16w01 CC2SEL (rw): Capture/compare 2 selection This bitfield defines the direction of the channel, input (capture) or output mode.
0x4400442C C   FIELD 17w01 CC2E (rw): Capture/compare 2 output enable. This bit determines if a capture of the counter value can actually be done into the input capture/compare register 2 (LPTIM_CCR2) or not.
0x4400442C C   FIELD 18w02 CC2P (rw): Capture/compare 2 output polarity. Only bit2 is used to set polarity when output mode is enabled, bit3 is don't care. This field is used to select the IC2 polarity for capture operations.
0x4400442C C   FIELD 24w02 IC2PSC (rw): Input capture 2 prescaler This bitfield defines the ratio of the prescaler acting on the CC2 input (IC2).
0x4400442C C   FIELD 28w02 IC2F (rw): Input capture 2 filter This bitfield defines the number of consecutive equal samples that should be detected when a level change occurs on an external input capture signal before it is considered as a valid level transition. An internal clock source must be present to use this feature.
0x44004434 B  REGISTER CCR2: LPTIM compare register 2
0x44004434 C   FIELD 00w16 CCR2 (rw): Capture/compare 2 value If channel CC2 is configured as output: CCR2 is the value to be loaded in the capture/compare 2 register. Depending on the PRELOAD option, the CCR2 register is immediately updated if the PRELOAD bit is reset and updated at next LPTIM update event if PREOAD bit is reset. The capture/compare register 2 contains the value to be compared to the counter LPTIM_CNT and signaled on OC2 output. If channel CC2 is configured as input: CCR2 becomes read-only, it contains the counter value transferred by the last input capture 2 event. The LPTIM_CCR2 register is read-only and cannot be programmed.
0x44007800 A PERIPHERAL RTC
0x44007800 B  REGISTER TR: RTC time register
0x44007800 C   FIELD 00w04 SU (rw): Second units in BCD format
0x44007800 C   FIELD 04w03 ST (rw): Second tens in BCD format
0x44007800 C   FIELD 08w04 MNU (rw): Minute units in BCD format
0x44007800 C   FIELD 12w03 MNT (rw): Minute tens in BCD format
0x44007800 C   FIELD 16w04 HU (rw): Hour units in BCD format
0x44007800 C   FIELD 20w02 HT (rw): Hour tens in BCD format
0x44007800 C   FIELD 22w01 PM (rw): AM/PM notation
0x44007804 B  REGISTER DR: RTC date register
0x44007804 C   FIELD 00w04 DU (rw): Date units in BCD format
0x44007804 C   FIELD 04w02 DT (rw): Date tens in BCD format
0x44007804 C   FIELD 08w04 MU (rw): Month units in BCD format
0x44007804 C   FIELD 12w01 MT (rw): Month tens in BCD format
0x44007804 C   FIELD 13w03 WDU (rw): Week day units ...
0x44007804 C   FIELD 16w04 YU (rw): Year units in BCD format
0x44007804 C   FIELD 20w04 YT (rw): Year tens in BCD format
0x44007808 B  REGISTER SSR: RTC subsecond register
0x44007808 C   FIELD 00w32 SS (ro): Synchronous binary counter SS[31:16]: Synchronous binary counter MSB values When Binary or Mixed mode is selected (BIN = 01 or 10 or 11): SS[31:16] are the 16 MSB of the SS[31:0] free-running down-counter. When BCD mode is selected (BIN=00): SS[31:16] are forced by hardware to 0x0000. SS[15:0]: Subsecond value/synchronous binary counter LSB values When Binary mode is selected (BIN = 01 or 10 or 11): SS[15:0] are the 16 LSB of the SS[31:0] free-running down-counter. When BCD mode is selected (BIN=00): SS[15:0] is the value in the synchronous prescaler counter. The fraction of a second is given by the formula below: Second fraction = (PREDIV_S - SS) / (PREDIV_S + 1) SS can be larger than PREDIV_S only after a shift operation. In that case, the correct time/date is one second less than as indicated by RTC_TR/RTC_DR.
0x4400780C B  REGISTER ICSR: RTC initialization control and status register
0x4400780C C   FIELD 02w01 WUTWF (ro): Wakeup timer write flag This bit is set by hardware when WUT value can be changed, after the WUTE bit has been set to 0 in RTC_CR. It is cleared by hardware in initialization mode.
0x4400780C C   FIELD 03w01 SHPF (ro): Shift operation pending This flag is set by hardware as soon as a shift operation is initiated by a write to the RTC_SHIFTR register. It is cleared by hardware when the corresponding shift operation has been executed. Writing to the SHPF bit has no effect.
0x4400780C C   FIELD 04w01 INITS (ro): Initialization status flag This bit is set by hardware when the calendar year field is different from 0 (Backup domain reset state).
0x4400780C C   FIELD 05w01 RSF (rw): Registers synchronization flag This bit is set by hardware each time the calendar registers are copied into the shadow registers (RTC_SSR, RTC_TR and RTC_DR). This bit is cleared by hardware in initialization mode, while a shift operation is pending (SHPF = 1), or when in bypass shadow register mode (BYPSHAD = 1). This bit can also be cleared by software. It is cleared either by software or by hardware in initialization mode.
0x4400780C C   FIELD 06w01 INITF (ro): Initialization flag When this bit is set to 1, the RTC is in initialization state, and the time, date and prescaler registers can be updated.
0x4400780C C   FIELD 07w01 INIT (rw): Initialization mode
0x4400780C C   FIELD 08w02 BIN (rw): Binary mode
0x4400780C C   FIELD 10w03 BCDU (rw): BCD update (BIN = 10 or 11) In mixed mode when both BCD calendar and binary extended counter are used (BIN = 10 or 11), the calendar second is incremented using the SSR Least Significant Bits.
0x4400780C C   FIELD 16w01 RECALPF (ro): Recalibration pending Flag The RECALPF status flag is automatically set to 1 when software writes to the RTC_CALR register, indicating that the RTC_CALR register is blocked. When the new calibration settings are taken into account, this bit returns to 0. Refer to Re-calibration on-the-fly.
0x44007810 B  REGISTER PRER: RTC prescaler register
0x44007810 C   FIELD 00w15 PREDIV_S (rw): Synchronous prescaler factor This is the synchronous division factor: ck_spre frequency = ck_apre frequency/(PREDIV_S+1)
0x44007810 C   FIELD 16w07 PREDIV_A (rw): Asynchronous prescaler factor This is the asynchronous division factor: ck_apre frequency = RTCCLK frequency/(PREDIV_A+1)
0x44007814 B  REGISTER WUTR: RTC wakeup timer register
0x44007814 C   FIELD 00w16 WUT (rw): Wakeup auto-reload value bits When the wakeup timer is enabled (WUTE set to 1), the WUTF flag is set every (WUT[15:0] + 1) ck_wut cycles. The ck_wut period is selected through WUCKSEL[2:0] bits of the RTC_CR register. When WUCKSEL[2] = 1, the wakeup timer becomes 17-bits and WUCKSEL[1] effectively becomes WUT[16] the most-significant bit to be reloaded into the timer. The first assertion of WUTF occurs between WUT and (WUT + 2) ck_wut cycles after WUTE is set. Setting WUT[15:0] to 0x0000 with WUCKSEL[2:0] = 011 (RTCCLK/2) is forbidden.
0x44007814 C   FIELD 16w16 WUTOCLR (rw): Wakeup auto-reload output clear value When WUTOCLR[15:0] is different from 0x0000, WUTF is set by hardware when the auto-reload down-counter reaches 0 and is cleared by hardware when the auto-reload downcounter reaches WUTOCLR[15:0]. When WUTOCLR[15:0] = 0x0000, WUTF is set by hardware when the WUT down-counter reaches 0 and is cleared by software.
0x44007818 B  REGISTER CR: RTC control register
0x44007818 C   FIELD 00w03 WUCKSEL (rw): ck_wut wakeup clock selection 10x: ck_spre (usually 1 Hz) clock is selected in BCD mode. In binary or mixed mode, this is the clock selected by BCDU. 11x: ck_spre (usually 1 Hz) clock is selected in BCD mode. In binary or mixed mode, this is the clock selected by BCDU. Furthermore, 2sup16/sup is added to the WUT counter value.
0x44007818 C   FIELD 03w01 TSEDGE (rw): Timestamp event active edge TSE must be reset when TSEDGE is changed to avoid unwanted TSF setting.
0x44007818 C   FIELD 04w01 REFCKON (rw): RTC_REFIN reference clock detection enable (50 or 60 Hz) Note: BIN must be 0x00 and PREDIV_S must be 0x00FF.
0x44007818 C   FIELD 05w01 BYPSHAD (rw): Bypass the shadow registers Note: If the frequency of the APB1 clock is less than seven times the frequency of RTCCLK, BYPSHAD must be set to 1.
0x44007818 C   FIELD 06w01 FMT (rw): Hour format
0x44007818 C   FIELD 07w01 SSRUIE (rw): SSR underflow interrupt enable
0x44007818 C   FIELD 08w01 ALRAE (rw): Alarm A enable
0x44007818 C   FIELD 09w01 ALRBE (rw): Alarm B enable
0x44007818 C   FIELD 10w01 WUTE (rw): Wakeup timer enable Note: When the wakeup timer is disabled, wait for WUTWF = 1 before enabling it again.
0x44007818 C   FIELD 11w01 TSE (rw): timestamp enable
0x44007818 C   FIELD 12w01 ALRAIE (rw): Alarm A interrupt enable
0x44007818 C   FIELD 13w01 ALRBIE (rw): Alarm B interrupt enable
0x44007818 C   FIELD 14w01 WUTIE (rw): Wakeup timer interrupt enable
0x44007818 C   FIELD 15w01 TSIE (rw): Timestamp interrupt enable
0x44007818 C   FIELD 16w01 ADD1H (wo): Add 1 hour (summer time change) When this bit is set outside initialization mode, 1 hour is added to the calendar time. This bit is always read as 0.
0x44007818 C   FIELD 17w01 SUB1H (wo): Subtract 1 hour (winter time change) When this bit is set outside initialization mode, 1 hour is subtracted to the calendar time if the current hour is not 0. This bit is always read as 0. Setting this bit has no effect when current hour is 0.
0x44007818 C   FIELD 18w01 BKP (rw): Backup This bit can be written by the user to memorize whether the daylight saving time change has been performed or not.
0x44007818 C   FIELD 19w01 COSEL (rw): Calibration output selection When COE = 1, this bit selects which signal is output on CALIB. These frequencies are valid for RTCCLK at 32.768 kHz and prescalers at their default values (PREDIV_A = 127 and PREDIV_S = 255). Refer to Section 31.3.17: Calibration clock output.
0x44007818 C   FIELD 20w01 POL (rw): Output polarity This bit is used to configure the polarity of TAMPALRM output.
0x44007818 C   FIELD 21w02 OSEL (rw): Output selection These bits are used to select the flag to be routed to TAMPALRM output.
0x44007818 C   FIELD 23w01 COE (rw): Calibration output enable This bit enables the CALIB output
0x44007818 C   FIELD 24w01 ITSE (rw): timestamp on internal event enable
0x44007818 C   FIELD 25w01 TAMPTS (rw): Activate timestamp on tamper detection event TAMPTS is valid even if TSE = 0 in the RTC_CR register. Timestamp flag is set up to 3 ck_apre cycles after the tamper flags.
0x44007818 C   FIELD 26w01 TAMPOE (rw): Tamper detection output enable on TAMPALRM
0x44007818 C   FIELD 27w01 ALRAFCLR (rw): Alarm A flag automatic clear
0x44007818 C   FIELD 28w01 ALRBFCLR (rw): Alarm B flag automatic clear
0x44007818 C   FIELD 29w01 TAMPALRM_PU (rw): TAMPALRM pull-up enable
0x44007818 C   FIELD 30w01 TAMPALRM_TYPE (rw): TAMPALRM output type
0x44007818 C   FIELD 31w01 OUT2EN (rw): RTC_OUT2 output enable With this bit set, the RTC outputs can be remapped on RTC_OUT2 as follows: OUT2EN = 0: RTC output 2 disable If OSEL different 00 or TAMPOE = 1: TAMPALRM is output on RTC_OUT1 If OSEL = 00 and TAMPOE = 0 and COE = 1: CALIB is output on RTC_OUT1 OUT2EN = 1: RTC output 2 enable If (OSEL different 00 or TAMPOE = 1) and COE = 0: TAMPALRM is output on RTC_OUT2 If OSEL = 00 and TAMPOE = 0 and COE = 1: CALIB is output on RTC_OUT2 If (OSEL different 00 or TAMPOE = 1) and COE = 1: CALIB is output on RTC_OUT2 and TAMPALRM is output on RTC_OUT1.
0x4400781C B  REGISTER PRIVCFGR: RTC privilege mode control register
0x4400781C C   FIELD 00w01 ALRAPRIV (rw): Alarm A and SSR underflow privilege protection
0x4400781C C   FIELD 01w01 ALRBPRIV (rw): Alarm B privilege protection
0x4400781C C   FIELD 02w01 WUTPRIV (rw): Wakeup timer privilege protection
0x4400781C C   FIELD 03w01 TSPRIV (rw): Timestamp privilege protection
0x4400781C C   FIELD 13w01 CALPRIV (rw): Shift register, Delight saving, calibration and reference clock privilege protection
0x4400781C C   FIELD 14w01 INITPRIV (rw): Initialization privilege protection
0x4400781C C   FIELD 15w01 PRIV (rw): RTC privilege protection
0x44007824 B  REGISTER WPR: RTC write protection register
0x44007824 C   FIELD 00w08 KEY (wo): Write protection key This byte is written by software. Reading this byte always returns 0x00. Refer to RTC register write protection for a description of how to unlock RTC register write protection.
0x44007828 B  REGISTER CALR: RTC calibration register
0x44007828 C   FIELD 00w09 CALM (rw): Calibration minus The frequency of the calendar is reduced by masking CALM out of 2sup20/sup RTCCLK pulses (32 seconds if the input frequency is 32768 Hz). This decreases the frequency of the calendar with a resolution of 0.9537 ppm. To increase the frequency of the calendar, this feature should be used in conjunction with CALP. See Section 31.3.15: RTC smooth digital calibration on page 1092.
0x44007828 C   FIELD 12w01 LPCAL (rw): RTC low-power mode
0x44007828 C   FIELD 13w01 CALW16 (rw): Use a 16-second calibration cycle period When CALW16 is set to 1, the 16-second calibration cycle period is selected. This bit must not be set to 1 if CALW8 = 1. Note: CALM[0] is stuck at 0 when CALW16 = 1. Refer to Section 31.3.15: RTC smooth digital calibration.
0x44007828 C   FIELD 14w01 CALW8 (rw): Use an 8-second calibration cycle period When CALW8 is set to 1, the 8-second calibration cycle period is selected. Note: CALM[1:0] are stuck at 00 when CALW8 = 1. Refer to Section 31.3.15: RTC smooth digital calibration.
0x44007828 C   FIELD 15w01 CALP (rw): Increase frequency of RTC by 488.5 ppm This feature is intended to be used in conjunction with CALM, which lowers the frequency of the calendar with a fine resolution. Refer to Section 31.3.15: RTC smooth digital calibration.
0x4400782C B  REGISTER SHIFTR: RTC shift control register
0x4400782C C   FIELD 00w15 SUBFS (wo): Subtract a fraction of a second These bits are write only and is always read as zero. Writing to this bit has no effect when a shift operation is pending (when SHPF = 1, in RTC_ICSR). The value which is written to SUBFS is added to the synchronous prescaler counter. Since this counter counts down, this operation effectively subtracts from (delays) the clock by: Delay (seconds) = SUBFS / (PREDIV_S + 1) A fraction of a second can effectively be added to the clock (advancing the clock) when the ADD1S function is used in conjunction with SUBFS, effectively advancing the clock by: Advance (seconds) = (1 - (SUBFS / (PREDIV_S + 1))). In mixed BCD-binary mode (BIN=10 or 11), the SUBFS[14:BCDU+8] must be written with 0. Note: Writing to SUBFS causes RSF to be cleared. Software can then wait until RSF = 1 to be sure that the shadow registers have been updated with the shifted time.
0x4400782C C   FIELD 31w01 ADD1S (wo): Add one second This bit is write only and is always read as zero. Writing to this bit has no effect when a shift operation is pending (when SHPF = 1, in RTC_ICSR). This function is intended to be used with SUBFS (see description below) in order to effectively add a fraction of a second to the clock in an atomic operation.
0x44007830 B  REGISTER TSTR (=TR): RTC timestamp time register
0x44007834 B  REGISTER TSDR (=DR): RTC timestamp date register
0x44007838 B  REGISTER TSSSR (=SSR): RTC timestamp subsecond register
0x44007840 B  REGISTER ALRMAR: Alarm A register
0x44007840 C   FIELD 00w04 SU (rw): Second units in BCD format
0x44007840 C   FIELD 04w03 ST (rw): Second tens in BCD format
0x44007840 C   FIELD 07w01 MSK1 (rw): Alarm seconds mask
0x44007840 C   FIELD 08w04 MNU (rw): Minute units in BCD format
0x44007840 C   FIELD 12w03 MNT (rw): Minute tens in BCD format
0x44007840 C   FIELD 15w01 MSK2 (rw): Alarm minutes mask
0x44007840 C   FIELD 16w04 HU (rw): Hour units in BCD format
0x44007840 C   FIELD 20w02 HT (rw): Hour tens in BCD format
0x44007840 C   FIELD 22w01 PM (rw): AM/PM notation
0x44007840 C   FIELD 23w01 MSK3 (rw): Alarm hours mask
0x44007840 C   FIELD 24w04 DU (rw): Date units or day in BCD format
0x44007840 C   FIELD 28w02 DT (rw): Date tens in BCD format
0x44007840 C   FIELD 30w01 WDSEL (rw): Week day selection
0x44007840 C   FIELD 31w01 MSK4 (rw): Alarm date mask
0x44007844 B  REGISTER ALRMASSR: Alarm A sub-second register
0x44007844 C   FIELD 00w15 SS (rw): Subseconds value This value is compared with the contents of the synchronous prescaler counter to determine if alarm A is to be activated. Only bits 0 up MASKSS-1 are compared. This field is the mirror of SS[14:0] in the RTC_ALRMABINR, and so can also be read or written through RTC_ALRMABINR.
0x44007844 C   FIELD 24w06 MASKSS (rw): Mask the most-significant bits starting at this bit ... From 32 to 63: All 32 SS bits are compared and must match to activate alarm. Note: In BCD mode (BIN=00) the overflow bits of the synchronous counter (bits 31:15) are never compared. These bits can be different from 0 only after a shift operation.
0x44007844 C   FIELD 31w01 SSCLR (rw): Clear synchronous counter on alarm (Binary mode only) Note: SSCLR must be kept to 0 when BCD or mixed mode is used (BIN = 00, 10 or 11).
0x44007848 B  REGISTER ALRMBR: Alarm B register
0x44007848 C   FIELD 00w04 SU (rw): Second units in BCD format
0x44007848 C   FIELD 04w03 ST (rw): Second tens in BCD format
0x44007848 C   FIELD 07w01 MSK1 (rw): Alarm seconds mask
0x44007848 C   FIELD 08w04 MNU (rw): Minute units in BCD format
0x44007848 C   FIELD 12w03 MNT (rw): Minute tens in BCD format
0x44007848 C   FIELD 15w01 MSK2 (rw): Alarm minutes mask
0x44007848 C   FIELD 16w04 HU (rw): Hour units in BCD format
0x44007848 C   FIELD 20w02 HT (rw): Hour tens in BCD format
0x44007848 C   FIELD 22w01 PM (rw): AM/PM notation
0x44007848 C   FIELD 23w01 MSK3 (rw): Alarm hours mask
0x44007848 C   FIELD 24w04 DU (rw): Date units or day in BCD format
0x44007848 C   FIELD 28w02 DT (rw): Date tens in BCD format
0x44007848 C   FIELD 30w01 WDSEL (rw): Week day selection
0x44007848 C   FIELD 31w01 MSK4 (rw): Alarm date mask
0x4400784C B  REGISTER ALRMBSSR: Alarm B sub-second register
0x4400784C C   FIELD 00w15 SS (rw): Subseconds value This value is compared with the contents of the synchronous prescaler counter to determine if alarm A is to be activated. Only bits 0 up MASKSS-1 are compared. This field is the mirror of SS[14:0] in the RTC_ALRMABINR, and so can also be read or written through RTC_ALRMABINR.
0x4400784C C   FIELD 24w06 MASKSS (rw): Mask the most-significant bits starting at this bit ... From 32 to 63: All 32 SS bits are compared and must match to activate alarm. Note: In BCD mode (BIN=00) the overflow bits of the synchronous counter (bits 31:15) are never compared. These bits can be different from 0 only after a shift operation.
0x4400784C C   FIELD 31w01 SSCLR (rw): Clear synchronous counter on alarm (Binary mode only) Note: SSCLR must be kept to 0 when BCD or mixed mode is used (BIN = 00, 10 or 11).
0x44007850 B  REGISTER SR: RTC status register
0x44007850 C   FIELD 00w01 ALRAF (ro): Alarm A flag
0x44007850 C   FIELD 01w01 ALRBF (ro): Alarm B flag
0x44007850 C   FIELD 02w01 WUTF (ro): Wakeup timer flag This flag is set by hardware when the wakeup auto-reload counter reaches 0. If WUTOCLR[15:0] is different from 0x0000, WUTF is cleared by hardware when the wakeup auto-reload counter reaches WUTOCLR value. If WUTOCLR[15:0] is 0x0000, WUTF must be cleared by software. This flag must be cleared by software at least 1.5 RTCCLK periods before WUTF is set to 1 again.
0x44007850 C   FIELD 03w01 TSF (ro): Timestamp flag This flag is set by hardware when a timestamp event occurs. If ITSF flag is set, TSF must be cleared together with ITSF. Note: TSF is not set if TAMPTS = 1 and the tamper flag is read during the 3 ck_apre cycles following tamper event. Refer to Timestamp on tamper event for more details.
0x44007850 C   FIELD 04w01 TSOVF (ro): Timestamp overflow flag This flag is set by hardware when a timestamp event occurs while TSF is already set. It is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared.
0x44007850 C   FIELD 05w01 ITSF (ro): Internal timestamp flag This flag is set by hardware when a timestamp on the internal event occurs.
0x44007850 C   FIELD 06w01 SSRUF (ro): SSR underflow flag This flag is set by hardware when the SSR rolls under 0. SSRUF is not set when SSCLR=1.
0x44007854 B  REGISTER MISR: RTC masked interrupt status register
0x44007854 C   FIELD 00w01 ALRAMF (ro): Alarm A masked flag
0x44007854 C   FIELD 01w01 ALRBMF (ro): Alarm B masked flag
0x44007854 C   FIELD 02w01 WUTMF (ro): Wakeup timer masked flag This flag is set by hardware when the wakeup timer interrupt occurs. This flag must be cleared by software at least 1.5 RTCCLK periods before WUTF is set to 1 again.
0x44007854 C   FIELD 03w01 TSMF (ro): Timestamp masked flag This flag is set by hardware when a timestamp interrupt occurs. If ITSF flag is set, TSF must be cleared together with ITSF.
0x44007854 C   FIELD 04w01 TSOVMF (ro): Timestamp overflow masked flag This flag is set by hardware when a timestamp interrupt occurs while TSMF is already set. It is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared.
0x44007854 C   FIELD 05w01 ITSMF (ro): Internal timestamp masked flag This flag is set by hardware when a timestamp on the internal event occurs and timestampinterrupt is raised.
0x44007854 C   FIELD 06w01 SSRUMF (ro): SSR underflow masked flag This flag is set by hardware when the SSR underflow interrupt occurs.
0x4400785C B  REGISTER SCR: RTC status clear register
0x4400785C C   FIELD 00w01 CALRAF (wo): Clear alarm A flag Writing 1 in this bit clears the ALRAF bit in the RTC_SR register.
0x4400785C C   FIELD 01w01 CALRBF (wo): Clear alarm B flag Writing 1 in this bit clears the ALRBF bit in the RTC_SR register.
0x4400785C C   FIELD 02w01 CWUTF (wo): Clear wakeup timer flag Writing 1 in this bit clears the WUTF bit in the RTC_SR register.
0x4400785C C   FIELD 03w01 CTSF (wo): Clear timestamp flag Writing 1 in this bit clears the TSOVF bit in the RTC_SR register. If ITSF flag is set, TSF must be cleared together with ITSF by setting CRSF and CITSF.
0x4400785C C   FIELD 04w01 CTSOVF (wo): Clear timestamp overflow flag Writing 1 in this bit clears the TSOVF bit in the RTC_SR register. It is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared.
0x4400785C C   FIELD 05w01 CITSF (wo): Clear internal timestamp flag Writing 1 in this bit clears the ITSF bit in the RTC_SR register.
0x4400785C C   FIELD 06w01 CSSRUF (wo): Clear SSR underflow flag Writing '1' in this bit clears the SSRUF in the RTC_SR register.
0x44007870 B  REGISTER ALRABINR: Alarm A binary mode register
0x44007870 C   FIELD 00w32 SS (rw): Synchronous counter alarm value in Binary mode This value is compared with the contents of the synchronous counter to determine if Alarm A is to be activated. Only bits 0 up MASKSS-1 are compared. SS[14:0] is the mirror of SS[14:0] in the RTC_ALRMASSRR, and so can also be read or written through RTC_ALRMASSR.
0x44007874 B  REGISTER ALRBBINR: Alarm B binary mode register
0x44007874 C   FIELD 00w32 SS (rw): Synchronous counter alarm value in Binary mode This value is compared with the contents of the synchronous counter to determine if Alarm A is to be activated. Only bits 0 up MASKSS-1 are compared. SS[14:0] is the mirror of SS[14:0] in the RTC_ALRMASSRR, and so can also be read or written through RTC_ALRMASSR.
0x44007C00 A PERIPHERAL TAMP
0x44007C00 B  REGISTER CR1: TAMP control register 1
0x44007C00 C   FIELD 00w01 TAMP1E (rw): Tamper detection on TAMP_IN1 enable
0x44007C00 C   FIELD 01w01 TAMP2E (rw): Tamper detection on TAMP_IN2 enable
0x44007C00 C   FIELD 16w01 ITAMP1E (rw): Internal tamper 1 enable
0x44007C00 C   FIELD 17w01 ITAMP2E (rw): Internal tamper 2 enable
0x44007C00 C   FIELD 18w01 ITAMP3E (rw): Internal tamper 3 enable
0x44007C00 C   FIELD 19w01 ITAMP4E (rw): Internal tamper 4 enable
0x44007C00 C   FIELD 20w01 ITAMP5E (rw): Internal tamper 5 enable
0x44007C00 C   FIELD 21w01 ITAMP6E (rw): Internal tamper 6 enable
0x44007C00 C   FIELD 22w01 ITAMP7E (rw): Internal tamper 7 enable
0x44007C00 C   FIELD 23w01 ITAMP8E (rw): Internal tamper 8 enable
0x44007C00 C   FIELD 24w01 ITAMP9E (rw): Internal tamper 9 enable
0x44007C00 C   FIELD 26w01 ITAMP11E (rw): Internal tamper 11 enable
0x44007C00 C   FIELD 27w01 ITAMP12E (rw): Internal tamper 12 enable
0x44007C00 C   FIELD 28w01 ITAMP13E (rw): Internal tamper 13 enable
0x44007C00 C   FIELD 30w01 ITAMP15E (rw): Internal tamper 15 enable
0x44007C04 B  REGISTER CR2: TAMP control register 2
0x44007C04 C   FIELD 00w01 TAMP1NOER (rw): Tamper 1 no erase
0x44007C04 C   FIELD 01w01 TAMP2NOER (rw): Tamper 2 no erase
0x44007C04 C   FIELD 16w01 TAMP1MSK (rw): Tamper 1 mask The tamper 1 interrupt must not be enabled when TAMP1MSK is set.
0x44007C04 C   FIELD 17w01 TAMP2MSK (rw): Tamper 2 mask The tamper 2 interrupt must not be enabled when TAMP2MSK is set.
0x44007C04 C   FIELD 22w01 BKBLOCK (rw): Backup registers and device secretssup(1)/sup access blocked
0x44007C04 C   FIELD 23w01 BKERASE (wo): Backup registers and device secretssup(1)/sup erase Writing '1' to this bit reset the backup registers and device secretssup(1)/sup. Writing 0 has no effect. This bit is always read as 0.
0x44007C04 C   FIELD 24w01 TAMP1TRG (rw): Active level for tamper 1 input If TAMPFLT = 00 Tamper 1 input rising edge triggers a tamper detection event. If TAMPFLT = 00 Tamper 1 input falling edge triggers a tamper detection event.
0x44007C04 C   FIELD 25w01 TAMP2TRG (rw): Active level for tamper 2 input If TAMPFLT = 00 Tamper 2 input rising edge triggers a tamper detection event. If TAMPFLT = 00 Tamper 2 input falling edge triggers a tamper detection event.
0x44007C08 B  REGISTER CR3: TAMP control register 3
0x44007C08 C   FIELD 00w01 ITAMP1NOER (rw): Internal Tamper 1 no erase
0x44007C08 C   FIELD 01w01 ITAMP2NOER (rw): Internal Tamper 2 no erase
0x44007C08 C   FIELD 02w01 ITAMP3NOER (rw): Internal Tamper 3 no erase
0x44007C08 C   FIELD 03w01 ITAMP4NOER (rw): Internal Tamper 4 no erase
0x44007C08 C   FIELD 04w01 ITAMP5NOER (rw): Internal Tamper 5 no erase
0x44007C08 C   FIELD 05w01 ITAMP6NOER (rw): Internal Tamper 6 no erase
0x44007C08 C   FIELD 06w01 ITAMP7NOER (rw): Internal Tamper 7 no erase
0x44007C08 C   FIELD 07w01 ITAMP8NOER (rw): Internal Tamper 8 no erase
0x44007C08 C   FIELD 08w01 ITAMP9NOER (rw): Internal Tamper 9 no erase
0x44007C08 C   FIELD 10w01 ITAMP11NOER (rw): Internal Tamper 11 no erase
0x44007C08 C   FIELD 11w01 ITAMP12NOER (rw): Internal Tamper 12 no erase
0x44007C08 C   FIELD 12w01 ITAMP13NOER (rw): Internal Tamper 13 no erase
0x44007C08 C   FIELD 14w01 ITAMP15NOER (rw): Internal Tamper 15 no erase
0x44007C0C B  REGISTER FLTCR: TAMP filter control register
0x44007C0C C   FIELD 00w03 TAMPFREQ (rw): Tamper sampling frequency Determines the frequency at which each of the TAMP_INx inputs are sampled.
0x44007C0C C   FIELD 03w02 TAMPFLT (rw): TAMP_INx filter count These bits determines the number of consecutive samples at the specified level (TAMP*TRG) needed to activate a tamper event. TAMPFLT is valid for each of the TAMP_INx inputs.
0x44007C0C C   FIELD 05w02 TAMPPRCH (rw): TAMP_INx precharge duration These bit determines the duration of time during which the pull-up/is activated before each sample. TAMPPRCH is valid for each of the TAMP_INx inputs.
0x44007C0C C   FIELD 07w01 TAMPPUDIS (rw): TAMP_INx pull-up disable This bit determines if each of the TAMPx pins are precharged before each sample.
0x44007C10 B  REGISTER ATCR1: TAMP active tamper control register 1
0x44007C10 C   FIELD 00w01 TAMP1AM (rw): Tamper 1 active mode
0x44007C10 C   FIELD 01w01 TAMP2AM (rw): Tamper 2 active mode
0x44007C10 C   FIELD 08w02 ATOSEL1 (rw): Active tamper shared output 1 selection The selected output must be available in the package pinout
0x44007C10 C   FIELD 10w02 ATOSEL2 (rw): Active tamper shared output 2 selection The selected output must be available in the package pinout
0x44007C10 C   FIELD 12w02 ATOSEL3 (rw): Active tamper shared output 3 selection The selected output must be available in the package pinout
0x44007C10 C   FIELD 16w03 ATCKSEL (rw): Active tamper RTC asynchronous prescaler clock selection These bits selects the RTC asynchronous prescaler stage output. The selected clock is CK_ATPRE. f CK_ATPRE = f RTCCLK / 2supATCKSEL /supwhen (PREDIV_A+1) = 128. ... Note: These bits can be written only when all active tampers are disabled. The write protection remains for up to 1.5 CK_ATPRE cycles after all the active tampers are disable.
0x44007C10 C   FIELD 24w03 ATPER (rw): Active tamper output change period The tamper output is changed every CK_ATPER = (2supATPER /supx CK_ATPRE) cycles. Refer to Table 239: Minimum ATPER value.
0x44007C10 C   FIELD 30w01 ATOSHARE (rw): Active tamper output sharing TAMP_IN1 is compared with TAMPOUTSEL1 TAMP_IN2 is compared with TAMPOUTSEL2 TAMP_IN3 is compared with TAMPOUTSEL3 TAMP_IN4 is compared with TAMPOUTSEL4 TAMP_IN5 is compared with TAMPOUTSEL5 TAMP_IN6 is compared with TAMPOUTSEL6 TAMP_IN7 is compared with TAMPOUTSEL7 TAMP_IN8 is compared with TAMPOUTSEL8
0x44007C10 C   FIELD 31w01 FLTEN (rw): Active tamper filter enable
0x44007C14 B  REGISTER ATSEEDR: TAMP active tamper seed register
0x44007C14 C   FIELD 00w32 SEED (wo): Pseudo-random generator seed value This register must be written four times with 32-bit values to provide the 128-bit seed to the PRNG. Writing to this register automatically sends the seed value to the PRNG.
0x44007C18 B  REGISTER ATOR: TAMP active tamper output register
0x44007C18 C   FIELD 00w08 PRNG (ro): Pseudo-random generator value This field provides the values of the PRNG output. Because of potential inconsistencies due to synchronization delays, PRNG must be read at least twice. The read value is correct if it is equal to previous read value.
0x44007C18 C   FIELD 14w01 SEEDF (ro): Seed running flag This flag is set by hardware when a new seed is written in the TAMP_ATSEEDR. It is cleared by hardware when the PRNG has absorbed this new seed, and by system reset. The TAMP APB cock must not be switched off as long as SEEDF is set.
0x44007C18 C   FIELD 15w01 INITS (ro): Active tamper initialization status This flag is set by hardware when the PRNG has absorbed the first 128-bit seed, meaning that the enabled active tampers are functional. This flag is cleared when the active tampers are disabled.
0x44007C1C B  REGISTER ATCR2: TAMP active tamper control register 2
0x44007C1C C   FIELD 08w03 ATOSEL1 (rw): Active tamper shared output 1 selection The selected output must be available in the package pinout. Bits 9:8 are the mirror of ATOSEL1[1:0] in the TAMP_ATCR1, and so can also be read or written through TAMP_ATCR1.
0x44007C1C C   FIELD 11w03 ATOSEL2 (rw): Active tamper shared output 2 selection The selected output must be available in the package pinout. Bits 12:11 are the mirror of ATOSEL2[1:0] in the TAMP_ATCR1, and so can also be read or written through TAMP_ATCR1.
0x44007C1C C   FIELD 14w03 ATOSEL3 (rw): Active tamper shared output 3 selection The selected output must be available in the package pinout. Bits 15:14 are the mirror of ATOSEL3[1:0] in the TAMP_ATCR1, and so can also be read or written through TAMP_ATCR1.
0x44007C1C C   FIELD 17w03 ATOSEL4 (rw): Active tamper shared output 4 selection The selected output must be available in the package pinout. Bits 18:17 are the mirror of ATOSEL2[1:0] in the TAMP_ATCR1, and so can also be read or written through TAMP_ATCR1.
0x44007C1C C   FIELD 20w03 ATOSEL5 (rw): Active tamper shared output 5 selection The selected output must be available in the package pinout.
0x44007C1C C   FIELD 23w03 ATOSEL6 (rw): Active tamper shared output 6 selection The selected output must be available in the package pinout.
0x44007C1C C   FIELD 26w03 ATOSEL7 (rw): Active tamper shared output 7 selection The selected output must be available in the package pinout.
0x44007C1C C   FIELD 29w03 ATOSEL8 (rw): Active tamper shared output 8 selection The selected output must be available in the package pinout.
0x44007C20 B  REGISTER CFGR: TAMP configuration register
0x44007C20 C   FIELD 00w08 BKPRW (rw): Backup registers read/write protection offset Protection zone 1 is defined for backup registers from TAMP_BKP0R to TAMP_BKPxR (x = BKPRW-1, from 0 to 128). Note: If BKPRW = 0: there is no protection zone 1. Note: If BKPRWPRIV is set, BKPRW[7:0] can be written only in privileged mode.
0x44007C20 C   FIELD 16w08 BKPW (rw): Backup registers write protection offset Protection zone 2 is defined for backup registers from TAMP_BKPyR (y = BKPRW, from 0 to 128) to TAMP_BKPzR (z = BKPW-1, from 0 to 128, BKPW greater than or equal BKPRW): Protection zone 3 defined for backup registers from TAMP_BKPtR (t = BKPW, from 0 to 127)..
0x44007C24 B  REGISTER PRIVCFGR: TAMP privilege configuration register
0x44007C24 C   FIELD 15w01 CNT1PRIV (rw): Monotonic counter 1 privilege protection
0x44007C24 C   FIELD 29w01 BKPRWPRIV (rw): Backup registers zone 1 privilege protection
0x44007C24 C   FIELD 30w01 BKPWPRIV (rw): Backup registers zone 2 privilege protection
0x44007C24 C   FIELD 31w01 TAMPPRIV (rw): Tamper privilege protection (excluding backup registers) Note: Refer to Section 32.3.6: TAMP privilege protection modes for details on the read protection.
0x44007C2C B  REGISTER IER: TAMP interrupt enable register
0x44007C2C C   FIELD 00w01 TAMP1IE (rw): Tamper 1 interrupt enable
0x44007C2C C   FIELD 01w01 TAMP2IE (rw): Tamper 2 interrupt enable
0x44007C2C C   FIELD 16w01 ITAMP1IE (rw): Internal tamper 1 interrupt enable
0x44007C2C C   FIELD 17w01 ITAMP2IE (rw): Internal tamper 2 interrupt enable
0x44007C2C C   FIELD 18w01 ITAMP3IE (rw): Internal tamper 3 interrupt enable
0x44007C2C C   FIELD 19w01 ITAMP4IE (rw): Internal tamper 4 interrupt enable
0x44007C2C C   FIELD 20w01 ITAMP5IE (rw): Internal tamper 5 interrupt enable
0x44007C2C C   FIELD 21w01 ITAMP6IE (rw): Internal tamper 6 interrupt enable
0x44007C2C C   FIELD 22w01 ITAMP7IE (rw): Internal tamper 7 interrupt enable
0x44007C2C C   FIELD 23w01 ITAMP8IE (rw): Internal tamper 8 interrupt enable
0x44007C2C C   FIELD 24w01 ITAMP9IE (rw): Internal tamper 9 interrupt enable
0x44007C2C C   FIELD 26w01 ITAMP11IE (rw): Internal tamper 11 interrupt enable
0x44007C2C C   FIELD 27w01 ITAMP12IE (rw): Internal tamper 12 interrupt enable
0x44007C2C C   FIELD 28w01 ITAMP13IE (rw): Internal tamper 13 interrupt enable
0x44007C2C C   FIELD 30w01 ITAMP15IE (rw): Internal tamper 15 interrupt enable
0x44007C30 B  REGISTER SR: TAMP status register
0x44007C30 C   FIELD 00w01 TAMP1F (ro): TAMP1 detection flag This flag is set by hardware when a tamper detection event is detected on the TAMP1 input.
0x44007C30 C   FIELD 01w01 TAMP2F (ro): TAMP2 detection flag This flag is set by hardware when a tamper detection event is detected on the TAMP2 input.
0x44007C30 C   FIELD 16w01 ITAMP1F (ro): Internal tamper 1 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 1.
0x44007C30 C   FIELD 17w01 ITAMP2F (ro): Internal tamper 2 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 2.
0x44007C30 C   FIELD 18w01 ITAMP3F (ro): Internal tamper 3 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 3.
0x44007C30 C   FIELD 19w01 ITAMP4F (ro): Internal tamper 4 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 4.
0x44007C30 C   FIELD 20w01 ITAMP5F (ro): Internal tamper 5 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 5.
0x44007C30 C   FIELD 21w01 ITAMP6F (ro): Internal tamper 6 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 6.
0x44007C30 C   FIELD 22w01 ITAMP7F (ro): Internal tamper 7 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 7.
0x44007C30 C   FIELD 23w01 ITAMP8F (ro): Internal tamper 8 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 8.
0x44007C30 C   FIELD 24w01 ITAMP9F (ro): Internal tamper 9 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 9.
0x44007C30 C   FIELD 26w01 ITAMP11F (ro): Internal tamper 11 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 11.
0x44007C30 C   FIELD 27w01 ITAMP12F (ro): Internal tamper 12 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 12.
0x44007C30 C   FIELD 28w01 ITAMP13F (ro): Internal tamper 13 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 13.
0x44007C30 C   FIELD 30w01 ITAMP15F (rw): Internal tamper 15 flag This flag is set by hardware when a tamper detection event is detected on the internal tamper 15.
0x44007C34 B  REGISTER MISR: TAMP masked interrupt status register
0x44007C34 C   FIELD 00w01 TAMP1MF (ro): TAMP1 interrupt masked flag This flag is set by hardware when the tamper 1 interrupt is raised.
0x44007C34 C   FIELD 01w01 TAMP2MF (ro): TAMP2 interrupt masked flag This flag is set by hardware when the tamper 2 interrupt is raised.
0x44007C34 C   FIELD 16w01 ITAMP1MF (ro): Internal tamper 1 interrupt masked flag This flag is set by hardware when the internal tamper 1 interrupt is raised.
0x44007C34 C   FIELD 17w01 ITAMP2MF (ro): Internal tamper 2 interrupt masked flag This flag is set by hardware when the internal tamper 2 interrupt is raised.
0x44007C34 C   FIELD 18w01 ITAMP3MF (ro): Internal tamper 3 interrupt masked flag This flag is set by hardware when the internal tamper 3 interrupt is raised.
0x44007C34 C   FIELD 19w01 ITAMP4MF (ro): Internal tamper 4 interrupt masked flag This flag is set by hardware when the internal tamper 4 interrupt is raised.
0x44007C34 C   FIELD 20w01 ITAMP5MF (ro): Internal tamper 5 interrupt masked flag This flag is set by hardware when the internal tamper 5 interrupt is raised.
0x44007C34 C   FIELD 21w01 ITAMP6MF (ro): Internal tamper 6 interrupt masked flag This flag is set by hardware when the internal tamper 6 interrupt is raised.
0x44007C34 C   FIELD 22w01 ITAMP7MF (ro): Internal tamper 7 tamper interrupt masked flag This flag is set by hardware when the internal tamper 7 interrupt is raised.
0x44007C34 C   FIELD 23w01 ITAMP8MF (ro): Internal tamper 8 interrupt masked flag This flag is set by hardware when the internal tamper 8 interrupt is raised.
0x44007C34 C   FIELD 24w01 ITAMP9MF (ro): internal tamper 9 interrupt masked flag This flag is set by hardware when the internal tamper 9 interrupt is raised.
0x44007C34 C   FIELD 26w01 ITAMP11MF (ro): internal tamper 11 interrupt masked flag This flag is set by hardware when the internal tamper 11 interrupt is raised.
0x44007C34 C   FIELD 27w01 ITAMP12MF (ro): internal tamper 12 interrupt masked flag This flag is set by hardware when the internal tamper 12 interrupt is raised.
0x44007C34 C   FIELD 28w01 ITAMP13MF (ro): internal tamper 13 interrupt masked flag This flag is set by hardware when the internal tamper 13 interrupt is raised.
0x44007C34 C   FIELD 30w01 ITAMP15MF (ro): internal tamper 15 interrupt masked flag This flag is set by hardware when the internal tamper 15 interrupt is raised.
0x44007C3C B  REGISTER SCR: TAMP status clear register
0x44007C3C C   FIELD 00w01 CTAMP1F (wo): Clear TAMP1 detection flag Writing 1 in this bit clears the TAMP1F bit in the TAMP_SR register.
0x44007C3C C   FIELD 01w01 CTAMP2F (wo): Clear TAMP2 detection flag Writing 1 in this bit clears the TAMP2F bit in the TAMP_SR register.
0x44007C3C C   FIELD 16w01 CITAMP1F (wo): Clear ITAMP1 detection flag Writing 1 in this bit clears the ITAMP1F bit in the TAMP_SR register.
0x44007C3C C   FIELD 17w01 CITAMP2F (wo): Clear ITAMP2 detection flag Writing 1 in this bit clears the ITAMP2F bit in the TAMP_SR register.
0x44007C3C C   FIELD 18w01 CITAMP3F (wo): Clear ITAMP3 detection flag Writing 1 in this bit clears the ITAMP3F bit in the TAMP_SR register.
0x44007C3C C   FIELD 19w01 CITAMP4F (wo): Clear ITAMP4 detection flag Writing 1 in this bit clears the ITAMP4F bit in the TAMP_SR register.
0x44007C3C C   FIELD 20w01 CITAMP5F (wo): Clear ITAMP5 detection flag Writing 1 in this bit clears the ITAMP5F bit in the TAMP_SR register.
0x44007C3C C   FIELD 21w01 CITAMP6F (wo): Clear ITAMP6 detection flag Writing 1 in this bit clears the ITAMP6F bit in the TAMP_SR register.
0x44007C3C C   FIELD 22w01 CITAMP7F (wo): Clear ITAMP7 detection flag Writing 1 in this bit clears the ITAMP7F bit in the TAMP_SR register.
0x44007C3C C   FIELD 23w01 CITAMP8F (wo): Clear ITAMP8 detection flag Writing 1 in this bit clears the ITAMP8F bit in the TAMP_SR register.
0x44007C3C C   FIELD 24w01 CITAMP9F (wo): Clear ITAMP9 detection flag Writing 1 in this bit clears the ITAMP9F bit in the TAMP_SR register.
0x44007C3C C   FIELD 26w01 CITAMP11F (wo): Clear ITAMP11 detection flag Writing 1 in this bit clears the ITAMP11F bit in the TAMP_SR register.
0x44007C3C C   FIELD 27w01 CITAMP12F (wo): Clear ITAMP12 detection flag Writing 1 in this bit clears the ITAMP12F bit in the TAMP_SR register.
0x44007C3C C   FIELD 28w01 CITAMP13F (wo): Clear ITAMP13 detection flag Writing 1 in this bit clears the ITAMP13F bit in the TAMP_SR register.
0x44007C3C C   FIELD 30w01 CITAMP15F (wo): Clear ITAMP15 detection flag Writing 1 in this bit clears the ITAMP15F bit in the TAMP_SR register.
0x44007C40 B  REGISTER COUNT1R: TAMP monotonic counter 1 register
0x44007C40 C   FIELD 00w32 COUNT (ro): This register is read-only only and is incremented by one when a write access is done to this register. This register cannot roll-over and is frozen when reaching the maximum value.
0x44007C54 B  REGISTER ERCFGR: TAMP erase configuration register
0x44007C54 C   FIELD 00w01 ERCFG0 (rw): Configurable device secrets configuration
0x44007D00 B  REGISTER BKP0R: TAMP backup 0 register
0x44007D00 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D04 B  REGISTER BKP1R: TAMP backup 1 register
0x44007D04 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D08 B  REGISTER BKP2R: TAMP backup 2 register
0x44007D08 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D0C B  REGISTER BKP3R: TAMP backup 3 register
0x44007D0C C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D10 B  REGISTER BKP4R: TAMP backup 4 register
0x44007D10 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D14 B  REGISTER BKP5R: TAMP backup 5 register
0x44007D14 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D18 B  REGISTER BKP6R: TAMP backup 6 register
0x44007D18 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D1C B  REGISTER BKP7R: TAMP backup 7 register
0x44007D1C C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D20 B  REGISTER BKP8R: TAMP backup 8 register
0x44007D20 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D24 B  REGISTER BKP9R: TAMP backup 9 register
0x44007D24 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D28 B  REGISTER BKP10R: TAMP backup 10 register
0x44007D28 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D2C B  REGISTER BKP11R: TAMP backup 11 register
0x44007D2C C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D30 B  REGISTER BKP12R: TAMP backup 12 register
0x44007D30 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D34 B  REGISTER BKP13R: TAMP backup 13 register
0x44007D34 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D38 B  REGISTER BKP14R: TAMP backup 14 register
0x44007D38 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D3C B  REGISTER BKP15R: TAMP backup 15 register
0x44007D3C C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D40 B  REGISTER BKP16R: TAMP backup 16 register
0x44007D40 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D44 B  REGISTER BKP17R: TAMP backup 17 register
0x44007D44 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D48 B  REGISTER BKP18R: TAMP backup 18 register
0x44007D48 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D4C B  REGISTER BKP19R: TAMP backup 19 register
0x44007D4C C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D50 B  REGISTER BKP20R: TAMP backup 20 register
0x44007D50 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D54 B  REGISTER BKP21R: TAMP backup 21 register
0x44007D54 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D58 B  REGISTER BKP22R: TAMP backup 22 register
0x44007D58 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D5C B  REGISTER BKP23R: TAMP backup 23 register
0x44007D5C C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D60 B  REGISTER BKP24R: TAMP backup 24 register
0x44007D60 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D64 B  REGISTER BKP25R: TAMP backup 25 register
0x44007D64 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D68 B  REGISTER BKP26R: TAMP backup 26 register
0x44007D68 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D6C B  REGISTER BKP27R: TAMP backup 27 register
0x44007D6C C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D70 B  REGISTER BKP28R: TAMP backup 28 register
0x44007D70 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D74 B  REGISTER BKP29R: TAMP backup 29 register
0x44007D74 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D78 B  REGISTER BKP30R: TAMP backup 30 register
0x44007D78 C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44007D7C B  REGISTER BKP31R: TAMP backup 31 register
0x44007D7C C   FIELD 00w32 BKP (rw): The application can write or read data to and from these registers. In the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set.
0x44020800 A PERIPHERAL PWR
0x44020800 B  REGISTER PMCR: PWR power mode control register
0x44020800 C   FIELD 00w01 LPMS (rw): low-power mode selection This bit defines the Deepsleep mode.
0x44020800 C   FIELD 02w02 SVOS (rw): system Stop mode voltage scaling selection These bits control the V CORE voltage level in system Stop mode, to obtain the best trade-off between power consumption and performance.
0x44020800 C   FIELD 07w01 CSSF (rw): clear Standby and Stop flags (always read as 0) This bit is cleared to 0 by hardware.
0x44020800 C   FIELD 09w01 FLPS (rw): Flash memory low-power mode in Stop mode This bit is used to obtain the best trade-off between low-power consumption and restart time when exiting from Stop mode. When it is set, the Flash memory enters low-power mode when the CPU domain is in Stop mode. Note: When system enters stop mode with SVOS5 enabled, Flash memory is automatically forced in low-power mode.
0x44020800 C   FIELD 12w01 BOOSTE (rw): analog switch V BOOST control This bit enables the booster to guarantee the analog switch AC performance when the V DD supply voltage is below 2.7 V (reduction of the total harmonic distortion to have the same switch performance over the full supply voltage range) The V DD supply voltage can be monitored through the PVD and the PLS bits.
0x44020800 C   FIELD 13w01 AVD_READY (rw): analog voltage ready This bit is only used when the analog switch boost needs to be enabled (see BOOSTE bit). It must be set by software when the expected V DDA analog supply level is available. The correct analog supply level is indicated by the AVDO bit (PWR_VMSR register) after setting the AVDEN bit (PWR_VMCR register) and selecting the supply level to be monitored (ALS bits).
0x44020800 C   FIELD 25w01 SRAM2SO (rw): AHB SRAM2 shut-off in Stop mode.
0x44020800 C   FIELD 26w01 SRAM1SO (rw): AHB SRAM1 shut-off in Stop mode
0x44020804 B  REGISTER PMSR: PWR status register
0x44020804 C   FIELD 05w01 STOPF (ro): Stop flag This bit is set by hardware and cleared only by any reset or by setting the CSSF bit.
0x44020804 C   FIELD 06w01 SBF (ro): System standby flag This bit is set by hardware and cleared only by a POR or by setting the CSSF bit.
0x44020810 B  REGISTER VOSCR: PWR voltage scaling control register
0x44020810 C   FIELD 04w02 VOS (rw): voltage scaling selection according to performance These bits control the V CORE voltage level and allow to obtain the best trade-off between power consumption and performance: - In bypass mode, these bits must also be set according to the external provided core voltage level and related performance. - When increasing the performance, the voltage scaling must be changed before increasing the system frequency. - When decreasing performance, the system frequency must first be decreased before changing the voltage scaling.
0x44020814 B  REGISTER VOSSR: PWR voltage scaling status register
0x44020814 C   FIELD 03w01 VOSRDY (ro): Ready bit for V CORE voltage scaling output selection.
0x44020814 C   FIELD 13w01 ACTVOSRDY (ro): Voltage level ready for currently used VOS
0x44020814 C   FIELD 14w02 ACTVOS (ro): voltage output scaling currently applied to V CORE This field provides the last VOS value.
0x44020820 B  REGISTER BDCR: PWR Backup domain control register
0x44020820 C   FIELD 00w01 BREN (rw): Backup RAM retention in Standby and V BAT modes When this bit set, the backup regulator (used to maintain the backup RAM content in Standby and V BAT modes) is enabled. If BREN is cleared, the backup regulator is switched off. The backup RAM can still be used in Run and Stop modes. However its content is lost in Standby and V BAT modes. If BREN is set, the application must wait till the backup regulator ready flag (BRRDY) is set to indicate that the data written into the SRAM is maintained in Standby and V BAT modes.
0x44020820 C   FIELD 01w01 MONEN (rw): Backup domain voltage and temperature monitoring enable
0x44020820 C   FIELD 08w01 VBE (rw): V BAT charging enable Note: Reset only by POR,.
0x44020820 C   FIELD 09w01 VBRS (rw): V BAT charging resistor selection
0x44020824 B  REGISTER DBPCR: PWR disable backup protection control register
0x44020824 C   FIELD 00w01 DBP (rw): Disable Backup domain write protection In reset state, all registers and SRAM in Backup domain are protected against parasitic write access. This bit must be set to enable write access to these registers.
0x44020828 B  REGISTER BDSR: PWR Backup domain status register
0x44020828 C   FIELD 16w01 BRRDY (ro): backup regulator ready This bit is set by hardware to indicate that the backup regulator is ready.
0x44020828 C   FIELD 20w01 VBATL (ro): V BAT level monitoring versus low threshold
0x44020828 C   FIELD 21w01 VBATH (ro): V BAT level monitoring versus high threshold
0x44020828 C   FIELD 22w01 TEMPL (ro): temperature level monitoring versus low threshold
0x44020828 C   FIELD 23w01 TEMPH (ro): temperature level monitoring versus high threshold
0x44020830 B  REGISTER SCCR: PWR supply configuration control register
0x44020830 C   FIELD 00w01 BYPASS (rwonce): power management unit bypass
0x44020830 C   FIELD 08w01 LDOEN (ro): LDO enable The value is set by hardware when the package uses the LDO regulator.
0x44020834 B  REGISTER VMCR: PWR voltage monitor control register
0x44020834 C   FIELD 00w01 PVDE (rw): PVD enable
0x44020834 C   FIELD 01w03 PLS (rw): programmable voltage detector (PVD) level selection These bits select the voltage threshold detected by the PVD.
0x44020834 C   FIELD 08w01 AVDEN (rw): peripheral voltage monitor on V DDA enable
0x44020834 C   FIELD 09w02 ALS (rw): analog voltage detector (AVD) level selection These bits select the voltage threshold detected by the AVD.
0x4402083C B  REGISTER VMSR: PWR voltage monitor status register
0x4402083C C   FIELD 19w01 AVDO (ro): analog voltage detector output on V DDA This bit is set and cleared by hardware. It is valid only if AVD on VDDA is enabled by the AVDEN bit. Note: Since the AVD is disabled in Standby mode, this bit is equal to 0 after standby or reset until the AVDEN bit is set.
0x4402083C C   FIELD 20w01 VDDIO2RDY (ro): voltage detector output on V DDIO2 This bit is set and cleared by hardware.
0x4402083C C   FIELD 22w01 PVDO (ro): programmable voltage detect output This bit is set and cleared by hardware. It is valid only if the PVD has been enabled by the PVDE bit. Note: Since the PVD is disabled in Standby mode, this bit is equal to 0 after Standby or reset until the PVDE bit is set.
0x44020840 B  REGISTER WUSCR: PWR wakeup status clear register
0x44020840 C   FIELD 00w01 CWUF1 (wo): clear wakeup pin flag for WUFx These bits are always read as 0.
0x44020840 C   FIELD 01w01 CWUF2 (wo): clear wakeup pin flag for WUFx These bits are always read as 0.
0x44020840 C   FIELD 02w01 CWUF3 (wo): clear wakeup pin flag for WUFx These bits are always read as 0.
0x44020840 C   FIELD 03w01 CWUF4 (wo): clear wakeup pin flag for WUFx These bits are always read as 0.
0x44020840 C   FIELD 04w01 CWUF5 (wo): clear wakeup pin flag for WUFx These bits are always read as 0.
0x44020844 B  REGISTER WUSR: PWR wakeup status register
0x44020844 C   FIELD 00w01 WUF1 (ro): wakeup pin WUFx flag This bit is set by hardware and cleared only by a RESET pin or by setting the CWUFx bit in PWR_WUSCR register.
0x44020844 C   FIELD 01w01 WUF2 (ro): wakeup pin WUFx flag This bit is set by hardware and cleared only by a RESET pin or by setting the CWUFx bit in PWR_WUSCR register.
0x44020844 C   FIELD 02w01 WUF3 (ro): wakeup pin WUFx flag This bit is set by hardware and cleared only by a RESET pin or by setting the CWUFx bit in PWR_WUSCR register.
0x44020844 C   FIELD 03w01 WUF4 (ro): wakeup pin WUFx flag This bit is set by hardware and cleared only by a RESET pin or by setting the CWUFx bit in PWR_WUSCR register.
0x44020844 C   FIELD 04w01 WUF5 (ro): wakeup pin WUFx flag This bit is set by hardware and cleared only by a RESET pin or by setting the CWUFx bit in PWR_WUSCR register.
0x44020848 B  REGISTER WUCR: PWR wakeup configuration register
0x44020848 C   FIELD 00w01 WUPEN1 (rw): enable wakeup pin WUPx These bits are set and cleared by software. Note: an additional wakeup event is detected if WUPx pin is enabled (by setting the WUPENx bit) when WUPx pin level is already high when WUPPx selects rising edge, or low when WUPPx selects falling edge.
0x44020848 C   FIELD 01w01 WUPEN2 (rw): enable wakeup pin WUPx These bits are set and cleared by software. Note: an additional wakeup event is detected if WUPx pin is enabled (by setting the WUPENx bit) when WUPx pin level is already high when WUPPx selects rising edge, or low when WUPPx selects falling edge.
0x44020848 C   FIELD 02w01 WUPEN3 (rw): enable wakeup pin WUPx These bits are set and cleared by software. Note: an additional wakeup event is detected if WUPx pin is enabled (by setting the WUPENx bit) when WUPx pin level is already high when WUPPx selects rising edge, or low when WUPPx selects falling edge.
0x44020848 C   FIELD 03w01 WUPEN4 (rw): enable wakeup pin WUPx These bits are set and cleared by software. Note: an additional wakeup event is detected if WUPx pin is enabled (by setting the WUPENx bit) when WUPx pin level is already high when WUPPx selects rising edge, or low when WUPPx selects falling edge.
0x44020848 C   FIELD 04w01 WUPEN5 (rw): enable wakeup pin WUPx These bits are set and cleared by software. Note: an additional wakeup event is detected if WUPx pin is enabled (by setting the WUPENx bit) when WUPx pin level is already high when WUPPx selects rising edge, or low when WUPPx selects falling edge.
0x44020848 C   FIELD 08w01 WUPP1 (rw): wakeup pin polarity bit for WUPx These bits define the polarity used for event detection on WUPx external wakeup pin.
0x44020848 C   FIELD 09w01 WUPP2 (rw): wakeup pin polarity bit for WUPx These bits define the polarity used for event detection on WUPx external wakeup pin.
0x44020848 C   FIELD 10w01 WUPP3 (rw): wakeup pin polarity bit for WUPx These bits define the polarity used for event detection on WUPx external wakeup pin.
0x44020848 C   FIELD 11w01 WUPP4 (rw): wakeup pin polarity bit for WUPx These bits define the polarity used for event detection on WUPx external wakeup pin.
0x44020848 C   FIELD 12w01 WUPP5 (rw): wakeup pin polarity bit for WUPx These bits define the polarity used for event detection on WUPx external wakeup pin.
0x44020848 C   FIELD 16w02 WUPPUPD1 (rw): wakeup pin pull configuration for WKUPx These bits define the I/O pad pull configuration used when WUPENx = 1. The associated GPIO port pull configuration must be set to the same value or to 00. The wakeup pin pull configuration is kept in Standby mode.
0x44020848 C   FIELD 18w02 WUPPUPD2 (rw): wakeup pin pull configuration for WKUPx These bits define the I/O pad pull configuration used when WUPENx = 1. The associated GPIO port pull configuration must be set to the same value or to 00. The wakeup pin pull configuration is kept in Standby mode.
0x44020848 C   FIELD 20w02 WUPPUPD3 (rw): wakeup pin pull configuration for WKUPx These bits define the I/O pad pull configuration used when WUPENx = 1. The associated GPIO port pull configuration must be set to the same value or to 00. The wakeup pin pull configuration is kept in Standby mode.
0x44020848 C   FIELD 22w02 WUPPUPD4 (rw): wakeup pin pull configuration for WKUPx These bits define the I/O pad pull configuration used when WUPENx = 1. The associated GPIO port pull configuration must be set to the same value or to 00. The wakeup pin pull configuration is kept in Standby mode.
0x44020848 C   FIELD 24w02 WUPPUPD5 (rw): wakeup pin pull configuration for WKUPx These bits define the I/O pad pull configuration used when WUPENx = 1. The associated GPIO port pull configuration must be set to the same value or to 00. The wakeup pin pull configuration is kept in Standby mode.
0x44020850 B  REGISTER IORETR: PWR I/O retention register
0x44020850 C   FIELD 00w01 IORETEN (rw): IO retention enable: When entering into standby mode, the output is sampled, and applied to the output IO during the standby power mode. Note: the IO state is not retained if the DBG_STANDBY bit is set in DBGMCU_CR register.
0x44020850 C   FIELD 16w01 JTAGIORETEN (rw): IO retention enable for JTAG IOs when entering into standby mode, the output is sampled, and applied to the output IO during the standby power mode
0x44020904 B  REGISTER PRIVCFGR: PWR privilege configuration register
0x44020904 C   FIELD 01w01 NSPRIV (rw): PWR functions privilege configuration Set and reset by software. This bit can be written only by privileged access.
0x44020C00 A PERIPHERAL RCC
0x44020C00 B  REGISTER CR: RCC clock control register
0x44020C00 C   FIELD 00w01 HSION (rw): HSI clock enable Set and cleared by software. Set by hardware to force the HSI to ON when the product leaves Stop mode, if STOPWUCK = 1 or STOPKERWUCK = 1. Set by hardware to force the HSI to ON when the product leaves Standby mode or in case of a failure of the HSE which is used as the system clock source. This bit cannot be cleared if the HSI is used directly (via SW mux) as system clock, or if the HSI is selected as reference clock for PLL1 with PLL1 enabled (PLL1ON bit set to 1).
0x44020C00 C   FIELD 01w01 HSIRDY (ro): HSI clock ready flag Set by hardware to indicate that the HSI oscillator is stable.
0x44020C00 C   FIELD 02w01 HSIKERON (rw): HSI clock enable in Stop mode Set and reset by software to force the HSI to ON, even in Stop mode, in order to be quickly available as kernel clock for peripherals. This bit has no effect on the value of HSION.
0x44020C00 C   FIELD 03w02 HSIDIV (rw): HSI clock divider Set and reset by software. These bits allow selecting a division ratio in order to configure the wanted HSI clock frequency. The HSIDIV cannot be changed if the HSI is selected as reference clock for at least one enabled PLL (PLLxON bit set to 1). In that case, the new HSIDIV value is ignored.
0x44020C00 C   FIELD 05w01 HSIDIVF (ro): HSI divider flag Set and reset by hardware. As a write operation to HSIDIV has not an immediate effect on the frequency, this flag indicates the current status of the HSI divider. HSIDIVF goes immediately to 0 when HSIDIV value is changed, and is set back to 1 when the output frequency matches the value programmed into HSIDIV.
0x44020C00 C   FIELD 08w01 CSION (rw): CSI clock enable Set and reset by software to enable/disable CSI clock for system and/or peripheral. Set by hardware to force the CSI to ON when the system leaves Stop mode, if STOPWUCK = 1 or STOPKERWUCK = 1. This bit cannot be cleared if the CSI is used directly (via SW mux) as system clock, or if the CSI is selected as reference clock for PLL1 with PLL1 enabled (PLL1ON bit set to 1).
0x44020C00 C   FIELD 09w01 CSIRDY (ro): CSI clock ready flag Set by hardware to indicate that the CSI oscillator is stable. This bit is activated only if the RC is enabled by CSION (it is not activated if the CSI is enabled by CSIKERON or by a peripheral request).
0x44020C00 C   FIELD 10w01 CSIKERON (rw): CSI clock enable in Stop mode Set and reset by software to force the CSI to ON, even in Stop mode, in order to be quickly available as kernel clock for some peripherals. This bit has no effect on the value of CSION.
0x44020C00 C   FIELD 12w01 HSI48ON (rw): HSI48 clock enable Set by software and cleared by software or by the hardware when the system enters to Stop or Standby mode.
0x44020C00 C   FIELD 13w01 HSI48RDY (ro): HSI48 clock ready flag Set by hardware to indicate that the HSI48 oscillator is stable.
0x44020C00 C   FIELD 16w01 HSEON (rw): HSE clock enable Set and cleared by software. Cleared by hardware to stop the HSE when entering Stop or Standby mode. This bit cannot be cleared if the HSE is used directly (via SW mux) as system clock, or if the HSE is selected as reference clock for PLL1 with PLL1 enabled (PLL1ON bit set to 1).
0x44020C00 C   FIELD 17w01 HSERDY (ro): HSE clock ready flag Set by hardware to indicate that the HSE oscillator is stable.
0x44020C00 C   FIELD 18w01 HSEBYP (rw): HSE clock bypass Set and cleared by software to bypass the oscillator with an external clock. The external clock must be enabled with the HSEON bit to be used by the device. The HSEBYP bit can be written only if the HSE oscillator is disabled.
0x44020C00 C   FIELD 19w01 HSECSSON (rw): HSE clock security system enable Set by software to enable clock security system on HSE. This bit is 'set only' (disabled by a system reset or when the system enters in Standby mode). When HSECSSON is set, the clock detector is enabled by hardware when the HSE is ready and disabled by hardware if an oscillator failure is detected.
0x44020C00 C   FIELD 20w01 HSEEXT (rw): external high speed clock type in Bypass mode Set and reset by software to select the external clock type (analog or digital). The external clock must be enabled with the HSEON bit to be used by the device. The HSEEXT bit can be written only if the HSE oscillator is disabled.
0x44020C00 C   FIELD 24w01 PLL1ON (rw): PLL1 enable Set and cleared by software to enable PLL1. Cleared by hardware when entering Stop or Standby mode. Note that the hardware prevents writing this bit to 0, if the PLL1 output is used as the system clock.
0x44020C00 C   FIELD 25w01 PLL1RDY (ro): PLL1 clock ready flag Set by hardware to indicate that the PLL1 is locked.
0x44020C00 C   FIELD 26w01 PLL2ON (rw): PLL2 enable Set and cleared by software to enable PLL2. Cleared by hardware when entering Stop or Standby mode.
0x44020C00 C   FIELD 27w01 PLL2RDY (ro): PLL2 clock ready flag Set by hardware to indicate that the PLL is locked.
0x44020C10 B  REGISTER HSICFGR: RCC HSI calibration register
0x44020C10 C   FIELD 00w12 HSICAL (ro): HSI clock calibration Set by hardware by option byte loading during system reset nreset. Adjusted by software through trimming bits HSITRIM. This field represents the sum of engineering option byte calibration value and HSITRIM bits value.
0x44020C10 C   FIELD 16w07 HSITRIM (rw): HSI clock trimming Set by software to adjust calibration. HSITRIM field is added to the engineering option bytes loaded during reset phase (FLASH_HSI_OPT) in order to form the calibration trimming value. HSICAL = HSITRIM + FLASH_HSI_OPT. After a change of HSITRIM it takes one system clock cycle before the new HSITRIM value is updated Note: The reset value of the field is 0x40.
0x44020C14 B  REGISTER CRRCR: RCC clock recovery RC register
0x44020C14 C   FIELD 00w10 HSI48CAL (ro): Internal RC 48 MHz clock calibration Set by hardware by option-byte loading during system reset NRESET. Read-only.
0x44020C18 B  REGISTER CSICFGR: RCC CSI calibration register
0x44020C18 C   FIELD 00w08 CSICAL (rw): CSI clock calibration Set by hardware by option byte loading during system reset NRESET. Adjusted by software through trimming bits CSITRIM. This field represents the sum of engineering option byte calibration value and CSITRIM bits value.
0x44020C18 C   FIELD 16w06 CSITRIM (rw): CSI clock trimming Set by software to adjust calibration. CSITRIM field is added to the engineering option bytes loaded during reset phase (FLASH_CSI_OPT) in order to form the calibration trimming value. CSICAL = CSITRIM + FLASH_CSI_OPT. Note: The reset value of the field is 0x20.
0x44020C1C B  REGISTER CFGR1: RCC clock configuration register
0x44020C1C C   FIELD 00w02 SW (rw): system clock and trace clock switch Set and reset by software to select system clock and trace clock sources (sys_ck). Set by hardware in order to: - force the selection of the HSI or CSI (depending on STOPWUCK selection) when leaving a system Stop mode - force the selection of the HSI in case of failure of the HSE when used directly or indirectly as system clock others: reserved
0x44020C1C C   FIELD 03w02 SWS (ro): system clock switch status Set and reset by hardware to indicate which clock source is used as system clock. 000: HSI used as system clock (hsi_ck) (default after reset). others: reserved
0x44020C1C C   FIELD 06w01 STOPWUCK (rw): system clock selection after a wakeup from system Stop Set and reset by software to select the system wakeup clock from system Stop. The selected clock is also used as emergency clock for the clock security system (CSS) on HSE. 0: HSI selected as wakeup clock from system Stop (default after reset) STOPWUCK must not be modified when CSS is enabled (by HSECSSON bit) and the system clock is HSE (SWS = 10) or a switch on HSE is requested (SW =10).
0x44020C1C C   FIELD 07w01 STOPKERWUCK (rw): kernel clock selection after a wakeup from system Stop Set and reset by software to select the kernel wakeup clock from system Stop.
0x44020C1C C   FIELD 08w06 RTCPRE (rw): HSE division factor for RTC clock Set and cleared by software to divide the HSE to generate a clock for RTC. Caution: The software must set these bits correctly to ensure that the clock supplied to the RTC is lower than 1 MHz. These bits must be configured if needed before selecting the RTC clock source. ...
0x44020C1C C   FIELD 15w01 TIMPRE (rw): timers clocks prescaler selection This bit is set and reset by software to control the clock frequency of all the timers connected to APB1 and APB2 domains.
0x44020C1C C   FIELD 18w04 MCO1PRE (rw): MCO1 prescaler Set and cleared by software to configure the prescaler of the MCO1. Modification of this prescaler may generate glitches on MCO1. It is highly recommended to change this prescaler only after reset, before enabling the external oscillators and the PLLs. ...
0x44020C1C C   FIELD 22w03 MCO1SEL (rw): Microcontroller clock output 1 Set and cleared by software. Clock source selection may generate glitches on MCO1. It is highly recommended to configure these bits only after reset, before enabling the external oscillators and the PLLs. others: reserved
0x44020C1C C   FIELD 25w04 MCO2PRE (rw): MCO2 prescaler Set and cleared by software to configure the prescaler of the MCO2. Modification of this prescaler may generate glitches on MCO2. It is highly recommended to change this prescaler only after reset, before enabling the external oscillators and the PLLs. ...
0x44020C1C C   FIELD 29w03 MCO2SEL (rw): microcontroller clock output 2 Set and cleared by software. Clock source selection may generate glitches on MCO2. It is highly recommended to configure these bits only after reset, before enabling the external oscillators and the PLLs. others: reserved
0x44020C20 B  REGISTER CFGR2: RCC CPU domain clock configuration register 2
0x44020C20 C   FIELD 00w04 HPRE (rw): AHB prescaler Set and reset by software to control the division factor of rcc_hclk. Changing this division ratio has an impact on the frequency of all bus matrix clocks 0xxx: rcc_hclk = sys_ck (default after reset)
0x44020C20 C   FIELD 04w03 PPRE1 (rw): APB low-speed prescaler (APB1) Set and reset by software to control the division factor of rcc_pclk1. The clock is divided by the new prescaler factor from 1 to 16 cycles of rcc_hclk after PPRE write. 0xx: rcc_pclk1 = rcc_hclk1 (default after reset)
0x44020C20 C   FIELD 08w03 PPRE2 (rw): APB high-speed prescaler (APB2) Set and reset by software to control APB high-speed clocks division factor. The clocks are divided with the new prescaler factor from 1 to 16 APB cycles after PPRE2 write. 0xx: rcc_pclk2 = rcc_hclk1
0x44020C20 C   FIELD 12w03 PPRE3 (rw): APB low-speed prescaler (APB3) Set and reset by software to control APB low-speed clocks division factor. The clocks are divided with the new prescaler factor from 1 to 16 APB cycles after PPRE3 write. 0xx: rcc_pclk3 = rcc_hclk1
0x44020C20 C   FIELD 16w01 AHB1DIS (rw): AHB1 clock disable This bit can be set in order to further reduce power consumption, when none of the AHB1 peripherals from RCC_AHB1ENR are used and when their clocks are disabled in RCC_AHB1ENR. When this bit is set, all the AHB1 peripherals clocks from RCC_AHB1ENR are off. enable control bits
0x44020C20 C   FIELD 17w01 AHB2DIS (rw): AHB2 clock disable This bit can be set in order to further reduce power consumption, when none of the AHB2 peripherals from RCC_AHB2ENR are used and when their clocks are disabled in RCC_AHB2ENR. When this bit is set, all the AHB2 peripherals clocks from RCC_AHB2ENR are off. enable control bits
0x44020C20 C   FIELD 19w01 AHB4DIS (rw): AHB4 clock disable This bit can be set in order to further reduce power consumption, when none of the AHB4 peripherals from RCC_AHB4ENR are used and when their clocks are disabled in RCC_AHB4ENR. When this bit is set, all the AHB4 peripherals clocks from RCC_AHB4ENR are off. enable control bits
0x44020C20 C   FIELD 20w01 APB1DIS (rw): APB1 clock disable value This bit can be set in order to further reduce power consumption, when none of the APB1 peripherals (except IWDG) are used and when their clocks are disabled in RCC_APB1ENR. When this bit is set, all the APB1 peripherals clocks are off, except for IWDG. control bits
0x44020C20 C   FIELD 21w01 APB2DIS (rw): APB2 clock disable value This bit can be set in order to further reduce power consumption, when none of the APB2 peripherals are used and when their clocks are disabled in RCC_APB2ENR. When this bit is set, all the APB2 peripherals clocks are off. control bits
0x44020C20 C   FIELD 22w01 APB3DIS (rw): APB3 clock disable value.Set and cleared by software This bit can be set in order to further reduce power consumption, when none of the APB3 peripherals are used and when their clocks are disabled in RCC_APB3ENR. When this bit is set, all the APB3 peripherals clocks are off. control bits
0x44020C28 B  REGISTER PLL1CFGR: RCC PLL clock source selection register
0x44020C28 C   FIELD 00w02 PLL1SRC (rw): DIVMx and PLLs clock source selection Set and reset by software to select the PLL clock source. These bits can be written only when all PLLs are disabled. In order to save power, when no PLL is used, the value of PLL1SRC must be set to '00'. 00: no clock send to DIVMx divider and PLLs (default after reset).
0x44020C28 C   FIELD 02w02 PLL1RGE (rw): PLL1 input frequency range Set and reset by software to select the proper reference frequency range used for PLL1. This bit must be written before enabling the PLL1.
0x44020C28 C   FIELD 04w01 PLL1FRACEN (rw): PLL1 fractional latch enable Set and reset by software to latch the content of FRACN1 into the sigma-delta modulator. In order to latch the FRACN1 value into the sigma-delta modulator, PLL1FRACEN must be set to 0, then set to 1. The transition 0 to 1 transfers the content of FRACN1 into the modulator.
0x44020C28 C   FIELD 05w01 PLL1VCOSEL (rw): PLL1 VCO selection Set and reset by software to select the proper VCO frequency range used for PLL1. This bit must be written before enabling the PLL1.
0x44020C28 C   FIELD 08w06 PLL1M (rw): prescaler for PLL1 Set and cleared by software to configure the prescaler of the PLL1. The hardware does not allow any modification of this prescaler when PLL1 is enabled (PLL1ON = 1 or PLL1RDY = 1). In order to save power when PLL1 is not used, the value of DIVM1 must be set to 0. ... ...
0x44020C28 C   FIELD 16w01 PLL1PEN (rw): PLL1 DIVP divider output enable Set and reset by software to enable the pll1_p_ck output of the PLL1. This bit can be written only when the PLL1 is disabled (PLL1ON = 0 and PLL1RDY = 0). In order to save power, when the pll1_p_ck output of the PLL1 is not used, the pll1_p_ck must be disabled.
0x44020C28 C   FIELD 17w01 PLL1QEN (rw): PLL1 DIVQ divider output enable Set and reset by software to enable the pll1_q_ck output of the PLL1. In order to save power, when the pll1_q_ck output of the PLL1 is not used, the pll1_q_ck must be disabled. This bit can be written only when the PLL1 is disabled (PLL1ON = 0 and PLL1RDY = 0).
0x44020C28 C   FIELD 18w01 PLL1REN (rw): PLL1 DIVR divider output enable Set and reset by software to enable the pll1_r_ck output of the PLL1. To save power, DIVR1EN and DIVR1 bits must be set to 0 when the pll1_r_ck is not used. This bit can be written only when the PLL1 is disabled (PLL1ON = 0 and PLL1RDY = 0).
0x44020C2C B  REGISTER PLL2CFGR: RCC PLL clock source selection register
0x44020C2C C   FIELD 00w02 PLL2SRC (rw): DIVMx and PLLs clock source selection Set and reset by software to select the PLL clock source. These bits can be written only when all PLLs are disabled. In order to save power, when no PLL is used, the value of PLL2SRC must be set to '00'.
0x44020C2C C   FIELD 02w02 PLL2RGE (rw): PLL2 input frequency range Set and reset by software to select the proper reference frequency range used for PLL2. These bits must be written before enabling the PLL2.
0x44020C2C C   FIELD 04w01 PLL2FRACEN (rw): PLL2 fractional latch enable Set and reset by software to enable the pll2_p_ck output of the PLL2. To save power, when the pll2_p_ck output of the PLL2 is not used, the pll2_p_ck must be disabled.
0x44020C2C C   FIELD 05w01 PLL2VCOSEL (rw): PLL2 VCO selection Set and reset by software to select the proper VCO frequency range used for PLL2. This bit must be written before enabling the PLL2.
0x44020C2C C   FIELD 08w06 PLL2M (rw): prescaler for PLL2 Set and cleared by software to configure the prescaler of the PLL2. The hardware does not allow any modification of this prescaler when PLL2 is enabled (PLL2ON = 1 or PLL2RDY = 1). In order to save power when PLL2 is not used, the value of DIVM2 must be set to 0. ... ...
0x44020C2C C   FIELD 16w01 PLL2PEN (rw): PLL2 DIVP divider output enable Set and reset by software to enable the pll2_p_ck output of the PLL2. To save power, when the pll2_p_ck output of the PLL2 is not used, the pll2_p_ck must be disabled.
0x44020C2C C   FIELD 17w01 PLL2QEN (rw): PLL2 DIVQ divider output enable Set and reset by software to enable the pll2_q_ck output of the PLL2. To save power, when the pll2_q_ck output of the PLL2 is not used, the pll2_q_ck must be disabled.
0x44020C2C C   FIELD 18w01 PLL2REN (rw): PLL2 DIVR divider output enable Set and reset by software to enable the pll2_r_ck output of the PLL2. To save power, DIVR2EN and DIVR2 bits must be set to 0 when the pll2_r_ck is not used.
0x44020C34 B  REGISTER PLL1DIVR: RCC PLL1 dividers register
0x44020C34 C   FIELD 00w09 PLL1N (rw): Multiplication factor for PLL1VCO Set and reset by software to control the multiplication factor of the VCO. These bits can be written only when the PLL is disabled (PLL1ON = 0 and PLL1RDY = 0). ... ... Others: reserved
0x44020C34 C   FIELD 09w07 PLL1P (rw): PLL1 DIVP division factor Set and reset by software to control the frequency of the pll1_p_ck clock. These bits can be written only when the PLL1 is disabled (PLL1ON = 0 and PLL1RDY = 0). Note that odd division factors are not allowed. ...
0x44020C34 C   FIELD 16w07 PLL1Q (rw): PLL1 DIVQ division factor Set and reset by software to control the frequency of the pll1_q_ck clock. These bits can be written only when the PLL1 is disabled (PLL1ON = 0 and PLL1RDY = 0). ...
0x44020C34 C   FIELD 24w07 PLL1R (rw): PLL1 DIVR division factor Set and reset by software to control the frequency of the pll1_r_ck clock. These bits can be written only when the PLL1 is disabled (PLL1ON = 0 and PLL1RDY = 0). ...
0x44020C38 B  REGISTER PLL1FRACR: RCC PLL1 fractional divider register
0x44020C38 C   FIELD 03w13 PLL1FRACN (rw): fractional part of the multiplication factor for PLL1 VCO Set and reset by software to control the fractional part of the multiplication factor of the VCO. These bits can be written at any time, allowing dynamic fine-tuning of the PLL1 VCO. The software must set correctly these bits to insure that the VCO output frequency is between its valid frequency range, that is: * 128 to 560 MHz if PLL1VCOSEL = 0 * 150 to 420 MHz if PLL1VCOSEL = 1 VCO output frequency = Fref1_ck x (PLL1N + (PLL1FRACN / 213)), with * PLL1N between 8 and 420 * PLL1FRACN can be between 0 and 213- 1 * The input frequency Fref1_ck must be between 1 and 16 MHz. To change the PLL1FRACN value on-the-fly even if the PLL is enabled, the application must proceed as follows: * Set the bit PLL1FRACEN to 0 * Write the new fractional value into PLL1FRACN * Set the bit PLL1FRACEN to 1
0x44020C3C B  REGISTER PLL2DIVR: RCC PLL1 dividers register
0x44020C3C C   FIELD 00w09 PLL2N (rw): Multiplication factor for PLL2VCO Set and reset by software to control the multiplication factor of the VCO. These bits can be written only when the PLL is disabled (PLL2ON = 0 and PLL2RDY = 0). ... ... Others: reserved
0x44020C3C C   FIELD 09w07 PLL2P (rw): PLL2 DIVP division factor Set and reset by software to control the frequency of the pll2_p_ck clock. These bits can be written only when the PLL2 is disabled (PLL2ON = 0 and PLL2RDY = 0). ...
0x44020C3C C   FIELD 16w07 PLL2Q (rw): PLL2 DIVQ division factor Set and reset by software to control the frequency of the pll2_q_ck clock. These bits can be written only when the PLL2 is disabled (PLL2ON = 0 and PLL2RDY = 0). ...
0x44020C3C C   FIELD 24w07 PLL2R (rw): PLL2 DIVR division factor Set and reset by software to control the frequency of the pll2_r_ck clock. These bits can be written only when the PLL1 is disabled (PLL2ON = 0 and PLL2RDY = 0). ...
0x44020C40 B  REGISTER PLL2FRACR: RCC PLL2 fractional divider register
0x44020C40 C   FIELD 03w13 PLL2FRACN (rw): fractional part of the multiplication factor for PLL2 VCO Set and reset by software to control the fractional part of the multiplication factor of the VCO. These bits can be written at any time, allowing dynamic fine-tuning of the PLL2 VCO. The software must set correctly these bits to insure that the VCO output frequency is between its valid frequency range, that is: * 128 to 560 MHz if PLL2VCOSEL = 0 * 150 to 420 MHz if PLL2VCOSEL = 1 VCO output frequency = Fref2_ck x (PLL2N + (PLL2FRACN / 213)), with * PLL2N between 8 and 420 * PLL2FRACN can be between 0 and 213- 1 * The input frequency Fref2_ck must be between 1 and 16 MHz. To change the PLL2FRACN value on-the-fly even if the PLL is enabled, the application must proceed as follows: * Set the bit PLL2FRACEN to 0 * Write the new fractional value into PLL2FRACN * Set the bit PLL2FRACEN to 1
0x44020C50 B  REGISTER CIER: RCC clock source interrupt enable register
0x44020C50 C   FIELD 00w01 LSIRDYIE (rw): LSI ready interrupt enable Set and reset by software to enable/disable interrupt caused by the LSI oscillator stabilization.
0x44020C50 C   FIELD 01w01 LSERDYIE (rw): LSE ready interrupt enable Set and reset by software to enable/disable interrupt caused by the LSE oscillator stabilization.
0x44020C50 C   FIELD 02w01 CSIRDYIE (rw): CSI ready interrupt enable Set and reset by software to enable/disable interrupt caused by the CSI oscillator stabilization.
0x44020C50 C   FIELD 03w01 HSIRDYIE (rw): HSI ready interrupt enable Set and reset by software to enable/disable interrupt caused by the HSI oscillator stabilization.
0x44020C50 C   FIELD 04w01 HSERDYIE (rw): HSE ready interrupt enable Set and reset by software to enable/disable interrupt caused by the HSE oscillator stabilization.
0x44020C50 C   FIELD 05w01 HSI48RDYIE (rw): HSI48 ready interrupt enable Set and reset by software to enable/disable interrupt caused by the HSI48 oscillator stabilization.
0x44020C50 C   FIELD 06w01 PLL1RDYIE (rw): PLL1 ready interrupt enable Set and reset by software to enable/disable interrupt caused by PLL1 lock.
0x44020C50 C   FIELD 07w01 PLL2RDYIE (rw): PLL2 ready interrupt enable Set and reset by software to enable/disable interrupt caused by PLL2 lock.
0x44020C54 B  REGISTER CIFR: RCC clock source interrupt flag register
0x44020C54 C   FIELD 00w01 LSIRDYF (ro): LSI ready interrupt flag Reset by software by writing LSIRDYC bit. Set by hardware when the LSI clock becomes stable and LSIRDYIE is set.
0x44020C54 C   FIELD 01w01 LSERDYF (ro): LSE ready interrupt flag Reset by software by writing LSERDYC bit. Set by hardware when the LSE clock becomes stable and LSERDYIE is set.
0x44020C54 C   FIELD 02w01 CSIRDYF (ro): CSI ready interrupt flag Reset by software by writing CSIRDYC bit. Set by hardware when the CSI clock becomes stable and CSIRDYIE is set.
0x44020C54 C   FIELD 03w01 HSIRDYF (ro): HSI ready interrupt flag Reset by software by writing HSIRDYC bit. Set by hardware when the HSI clock becomes stable and HSIRDYIE is set.
0x44020C54 C   FIELD 04w01 HSERDYF (ro): HSE ready interrupt flag Reset by software by writing HSERDYC bit. Set by hardware when the HSE clock becomes stable and HSERDYIE is set.
0x44020C54 C   FIELD 05w01 HSI48RDYF (ro): HSI48 ready interrupt flag Reset by software by writing HSI48RDYC bit. Set by hardware when the HSI48 clock becomes stable and HSI48RDYIE is set.
0x44020C54 C   FIELD 06w01 PLL1RDYF (ro): PLL1 ready interrupt flag Reset by software by writing PLL1RDYC bit. Set by hardware when the PLL1 locks and PLL1RDYIE is set.
0x44020C54 C   FIELD 07w01 PLL2RDYF (ro): PLL2 ready interrupt flag Reset by software by writing PLL2RDYC bit. Set by hardware when the PLL2 locks and PLL2RDYIE is set.
0x44020C54 C   FIELD 10w01 HSECSSF (ro): HSE clock security system interrupt flag Reset by software by writing HSECSSC bit. Set by hardware in case of HSE clock failure.
0x44020C58 B  REGISTER CICR: RCC clock source interrupt clear register
0x44020C58 C   FIELD 00w01 LSIRDYC (rw): LSI ready interrupt clear Set by software to clear LSIRDYF. Reset by hardware when clear done.
0x44020C58 C   FIELD 01w01 LSERDYC (rw): LSE ready interrupt clear Set by software to clear LSERDYF. Reset by hardware when clear done.
0x44020C58 C   FIELD 02w01 CSIRDYC (rw): HSI ready interrupt clear Set by software to clear CSIRDYF. Reset by hardware when clear done.
0x44020C58 C   FIELD 03w01 HSIRDYC (rw): HSI ready interrupt clear Set by software to clear HSIRDYF. Reset by hardware when clear done.
0x44020C58 C   FIELD 04w01 HSERDYC (rw): HSE ready interrupt clear Set by software to clear HSERDYF. Reset by hardware when clear done.
0x44020C58 C   FIELD 05w01 HSI48RDYC (rw): HSI48 ready interrupt clear Set by software to clear HSI48RDYF. Reset by hardware when clear done.
0x44020C58 C   FIELD 06w01 PLL1RDYC (rw): PLL1 ready interrupt clear Set by software to clear PLL1RDYF. Reset by hardware when clear done.
0x44020C58 C   FIELD 07w01 PLL2RDYC (rw): PLL2 ready interrupt clear Set by software to clear PLL2RDYF. Reset by hardware when clear done.
0x44020C58 C   FIELD 10w01 HSECSSC (rw): HSE clock security system interrupt clear Set by software to clear HSECSSF. Reset by hardware when clear done.
0x44020C60 B  REGISTER AHB1RSTR: RCC AHB1 reset register
0x44020C60 C   FIELD 00w01 GPDMA1RST (rw): GPDMA1 block reset Set and reset by software.
0x44020C60 C   FIELD 01w01 GPDMA2RST (rw): GPDMA2 block reset Set and reset by software.
0x44020C60 C   FIELD 12w01 CRCRST (rw): CRC block reset Set and reset by software.
0x44020C60 C   FIELD 17w01 RAMCFGRST (rw): RAMCFG block reset Set and reset by software.
0x44020C64 B  REGISTER AHB2RSTR: RCC AHB2 peripheral reset register
0x44020C64 C   FIELD 00w01 GPIOARST (rw): GPIOA block reset Set and reset by software.
0x44020C64 C   FIELD 01w01 GPIOBRST (rw): GPIOB block reset Set and reset by software.
0x44020C64 C   FIELD 02w01 GPIOCRST (rw): GPIOC block reset Set and reset by software.
0x44020C64 C   FIELD 03w01 GPIODRST (rw): GPIOD block reset Set and reset by software.
0x44020C64 C   FIELD 07w01 GPIOHRST (rw): GPIOH block reset Set and reset by software.
0x44020C64 C   FIELD 10w01 ADCRST (rw): ADC block reset
0x44020C64 C   FIELD 11w01 DAC12RST (rw): DAC block reset Set and reset by software.
0x44020C64 C   FIELD 17w01 HASHRST (rw): HASH block reset Set and reset by software.
0x44020C64 C   FIELD 18w01 RNGRST (rw): RNG block reset Set and reset by software.
0x44020C74 B  REGISTER APB1LRSTR: RCC APB1 peripheral low reset register
0x44020C74 C   FIELD 00w01 TIM2RST (rw): TIM2 block reset Set and reset by software.
0x44020C74 C   FIELD 01w01 TIM3RST (rw): TIM3 block reset Set and reset by software.
0x44020C74 C   FIELD 04w01 TIM6RST (rw): TIM6 block reset Set and reset by software.
0x44020C74 C   FIELD 05w01 TIM7RST (rw): TIM7 block reset Set and reset by software.
0x44020C74 C   FIELD 13w01 OPAMPRST (rw): OPAMP block reset Set and reset by software.
0x44020C74 C   FIELD 14w01 SPI2RST (rw): SPI2 block reset Set and reset by software.
0x44020C74 C   FIELD 15w01 SPI3RST (rw): SPI3 block reset Set and reset by software.
0x44020C74 C   FIELD 16w01 COMPRST (rw): COMP block reset Set and reset by software.
0x44020C74 C   FIELD 17w01 USART2RST (rw): USART2 block reset Set and reset by software.
0x44020C74 C   FIELD 18w01 USART3RST (rw): USART3 block reset Set and reset by software.
0x44020C74 C   FIELD 21w01 I2C1RST (rw): I2C1 block reset Set and reset by software.
0x44020C74 C   FIELD 22w01 I2C2RST (rw): I2C2 block reset Set and reset by software.
0x44020C74 C   FIELD 23w01 I3C1RST (rw): I3C1 block reset Set and reset by software.
0x44020C74 C   FIELD 24w01 CRSRST (rw): CRS block reset Set and reset by software.
0x44020C78 B  REGISTER APB1HRSTR: RCC APB1 peripheral high reset register
0x44020C78 C   FIELD 03w01 DTSRST (rw): DTS block reset Set and reset by software.
0x44020C78 C   FIELD 05w01 LPTIM2RST (rw): LPTIM2 block reset Set and reset by software.
0x44020C78 C   FIELD 09w01 FDCANRST (rw): FDCAN block reset
0x44020C7C B  REGISTER APB2RSTR: RCC APB2 peripheral reset register
0x44020C7C C   FIELD 11w01 TIM1RST (rw): TIM1 block reset Set and reset by software.
0x44020C7C C   FIELD 12w01 SPI1RST (rw): SPI1 block reset Set and reset by software.
0x44020C7C C   FIELD 14w01 USART1RST (rw): USART1 block reset Set and reset by software.
0x44020C7C C   FIELD 24w01 USBRST (rw): USB block reset
0x44020C80 B  REGISTER APB3RSTR: RCC APB3 peripheral reset register
0x44020C80 C   FIELD 01w01 SBSRST (rw): SBS block reset Set and reset by software.
0x44020C80 C   FIELD 06w01 LPUART1RST (rw): LPUART1 block reset Set and reset by software.
0x44020C80 C   FIELD 09w01 I3C2RST (rw): I3C2RST block reset Set and reset by software.
0x44020C80 C   FIELD 11w01 LPTIM1RST (rw): LPTIM1 block reset Set and reset by software.
0x44020C80 C   FIELD 20w01 VREFRST (rw): VREF block reset Set and reset by software.
0x44020C88 B  REGISTER AHB1ENR: RCC AHB1 peripherals clock register
0x44020C88 C   FIELD 00w01 GPDMA1EN (rw): GPDMA1 clock enable Set and reset by software.
0x44020C88 C   FIELD 01w01 GPDMA2EN (rw): GPDMA2 clock enable Set and reset by software.
0x44020C88 C   FIELD 08w01 FLITFEN (rw): Flash interface clock enable Set and reset by software.
0x44020C88 C   FIELD 12w01 CRCEN (rw): CRC clock enable Set and reset by software.
0x44020C88 C   FIELD 17w01 RAMCFGEN (rw): RAMCFG clock enable Set and reset by software.
0x44020C88 C   FIELD 24w01 GTZC1EN (rw): GTZC1 clock enable
0x44020C88 C   FIELD 28w01 BKPRAMEN (rw): BKPRAM clock enable Set and reset by software
0x44020C88 C   FIELD 31w01 SRAM1EN (rw): SRAM1 clock enable Set and reset by software.
0x44020C8C B  REGISTER AHB2ENR: RCC AHB2 peripheral clock register
0x44020C8C C   FIELD 00w01 GPIOAEN (rw): GPIOA clock enable Set and reset by software.
0x44020C8C C   FIELD 01w01 GPIOBEN (rw): GPIOB clock enable Set and reset by software.
0x44020C8C C   FIELD 02w01 GPIOCEN (rw): GPIOC clock enable Set and reset by software.
0x44020C8C C   FIELD 03w01 GPIODEN (rw): GPIOD clock enable Set and reset by software.
0x44020C8C C   FIELD 07w01 GPIOHEN (rw): GPIOH clock enable Set and reset by software.
0x44020C8C C   FIELD 10w01 ADCEN (rw): ADC peripherals clock enabled
0x44020C8C C   FIELD 11w01 DAC12EN (rw): DAC clock enable Set and reset by software.
0x44020C8C C   FIELD 17w01 HASHEN (rw): HASH clock enable Set and reset by software.
0x44020C8C C   FIELD 18w01 RNGEN (rw): RNG clock enable Set and reset by software.
0x44020C8C C   FIELD 30w01 SRAM2EN (rw): SRAM2 clock enable Set and reset by software.
0x44020C9C B  REGISTER APB1LENR: RCC APB1 peripheral clock register
0x44020C9C C   FIELD 00w01 TIM2EN (rw): TIM2 clock enable Set and reset by software.
0x44020C9C C   FIELD 01w01 TIM3EN (rw): TIM3 clock enable Set and reset by software.
0x44020C9C C   FIELD 04w01 TIM6EN (rw): TIM6 clock enable Set and reset by software.
0x44020C9C C   FIELD 05w01 TIM7EN (rw): TIM7 clock enable Set and reset by software.
0x44020C9C C   FIELD 11w01 WWDGEN (rw): WWDG clock enable Set and reset by software.
0x44020C9C C   FIELD 13w01 OPAMPEN (rw): OPAMP clock enable Set and reset by software.
0x44020C9C C   FIELD 14w01 SPI2EN (rw): SPI2 clock enable Set and reset by software.
0x44020C9C C   FIELD 15w01 SPI3EN (rw): SPI3 clock enable Set and reset by software.
0x44020C9C C   FIELD 16w01 COMPEN (rw): COMP clock enable Set and reset by software.
0x44020C9C C   FIELD 17w01 USART2EN (rw): USART2 clock enable Set and reset by software.
0x44020C9C C   FIELD 18w01 USART3EN (rw): USART3 clock enable Set and reset by software.
0x44020C9C C   FIELD 21w01 I2C1EN (rw): I2C1 clock enable Set and reset by software.
0x44020C9C C   FIELD 22w01 I2C2EN (rw): I2C2 clock enable Set and reset by software.
0x44020C9C C   FIELD 23w01 I3C1EN (rw): I3C1 clock enable Set and reset by software.
0x44020C9C C   FIELD 24w01 CRSEN (rw): CRS clock enable Set and reset by software.
0x44020CA0 B  REGISTER APB1HENR: RCC APB1 peripheral clock register
0x44020CA0 C   FIELD 03w01 DTSEN (rw): DTS clock enable Set and reset by software.
0x44020CA0 C   FIELD 05w01 LPTIM2EN (rw): LPTIM2 clock enable Set and reset by software.
0x44020CA0 C   FIELD 09w01 FDCANEN (rw): FDCAN peripheral clock enable
0x44020CA4 B  REGISTER APB2ENR: RCC APB2 peripheral clock register
0x44020CA4 C   FIELD 11w01 TIM1EN (rw): TIM1 clock enable Set and reset by software.
0x44020CA4 C   FIELD 12w01 SPI1EN (rw): SPI1 clock enable Set and reset by software.
0x44020CA4 C   FIELD 14w01 USART1EN (rw): USART1 clock enable Set and reset by software.
0x44020CA4 C   FIELD 24w01 USBEN (rw): USB clock enable
0x44020CA8 B  REGISTER APB3ENR: RCC APB3 peripheral clock register
0x44020CA8 C   FIELD 01w01 SBSEN (rw): SBS clock enable Set and reset by software.
0x44020CA8 C   FIELD 06w01 LPUART1EN (rw): LPUART1 clock enable Set and reset by software.
0x44020CA8 C   FIELD 09w01 I3C2EN (rw): I3C2EN clock enable Set and reset by software.
0x44020CA8 C   FIELD 11w01 LPTIM1EN (rw): LPTIM1 clock enable Set and reset by software.
0x44020CA8 C   FIELD 20w01 VREFEN (rw): VREF clock enable Set and reset by software.
0x44020CA8 C   FIELD 21w01 RTCAPBEN (rw): RTC APB interface clock enable Set and reset by software.
0x44020CB0 B  REGISTER AHB1LPENR: RCC AHB1 sleep clock register
0x44020CB0 C   FIELD 00w01 GPDMA1LPEN (rw): GPDMA1 clock enable during sleep mode Set and reset by software.
0x44020CB0 C   FIELD 01w01 GPDMA2LPEN (rw): GPDMA2 clock enable during sleep mode Set and reset by software.
0x44020CB0 C   FIELD 08w01 FLITFLPEN (rw): Flash interface (FLITF) clock enable during sleep mode Set and reset by software.
0x44020CB0 C   FIELD 12w01 CRCLPEN (rw): CRC clock enable during sleep mode Set and reset by software.
0x44020CB0 C   FIELD 17w01 RAMCFGLPEN (rw): RAMCFG clock enable during sleep mode Set and reset by software.
0x44020CB0 C   FIELD 24w01 GTZC1LPEN (rw): GTZC1 clock enable during sleep mode
0x44020CB0 C   FIELD 28w01 BKPRAMLPEN (rw): BKPRAM clock enable during sleep mode Set and reset by software
0x44020CB0 C   FIELD 29w01 ICACHELPEN (rw): ICACHE clock enable during sleep mode Set and reset by software
0x44020CB0 C   FIELD 31w01 SRAM1LPEN (rw): SRAM1 clock enable during sleep mode Set and reset by software
0x44020CB4 B  REGISTER AHB2LPENR: RCC AHB2 sleep clock register
0x44020CB4 C   FIELD 00w01 GPIOALPEN (rw): GPIOA clock enable during sleep mode Set and reset by software.
0x44020CB4 C   FIELD 01w01 GPIOBLPEN (rw): GPIOB clock enable during sleep mode Set and reset by software.
0x44020CB4 C   FIELD 02w01 GPIOCLPEN (rw): GPIOC clock enable during sleep mode Set and reset by software.
0x44020CB4 C   FIELD 03w01 GPIODLPEN (rw): GPIOD clock enable during sleep mode Set and reset by software.
0x44020CB4 C   FIELD 07w01 GPIOHLPEN (rw): GPIOH clock enable during sleep mode Set and reset by software.
0x44020CB4 C   FIELD 10w01 ADCLPEN (rw): ADC peripherals clock enable during sleep mode
0x44020CB4 C   FIELD 11w01 DAC12LPEN (rw): DAC clock enable during sleep mode Set and reset by software.
0x44020CB4 C   FIELD 17w01 HASHLPEN (rw): HASH clock enable during sleep mode Set and reset by software.
0x44020CB4 C   FIELD 18w01 RNGLPEN (rw): RNG clock enable during sleep mode Set and reset by software.
0x44020CB4 C   FIELD 30w01 SRAM2LPEN (rw): SRAM2 clock enable during sleep mode Set and reset by software.
0x44020CC4 B  REGISTER APB1LLPENR: RCC APB1 sleep clock register
0x44020CC4 C   FIELD 00w01 TIM2LPEN (rw): TIM2 clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 01w01 TIM3LPEN (rw): TIM3 clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 04w01 TIM6LPEN (rw): TIM6 clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 05w01 TIM7LPEN (rw): TIM7 clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 11w01 WWDGLPEN (rw): WWDG clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 13w01 OPAMPLPEN (rw): OPAMP clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 14w01 SPI2LPEN (rw): SPI2 clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 15w01 SPI3LPEN (rw): SPI3 clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 16w01 COMPLPEN (rw): COMP clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 17w01 USART2LPEN (rw): USART2 clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 18w01 USART3LPEN (rw): USART3 clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 21w01 I2C1LPEN (rw): I2C1 clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 22w01 I2C2LPEN (rw): I2C2 clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 23w01 I3C1LPEN (rw): I3C1 clock enable during sleep mode Set and reset by software.
0x44020CC4 C   FIELD 24w01 CRSLPEN (rw): CRS clock enable during sleep mode Set and reset by software.
0x44020CC8 B  REGISTER APB1HLPENR: RCC APB1 sleep clock register
0x44020CC8 C   FIELD 03w01 DTSLPEN (rw): DTS clock enable during sleep mode Set and reset by software.
0x44020CC8 C   FIELD 05w01 LPTIM2LPEN (rw): LPTIM2 clock enable during sleep mode Set and reset by software.
0x44020CC8 C   FIELD 09w01 FDCANLPEN (rw): FDCAN peripheral clock enable during sleep mode
0x44020CCC B  REGISTER APB2LPENR: RCC APB2 sleep clock register
0x44020CCC C   FIELD 11w01 TIM1LPEN (rw): TIM1 clock enable during sleep mode Set and reset by software.
0x44020CCC C   FIELD 12w01 SPI1LPEN (rw): SPI1 clock enable during sleep mode Set and reset by software.
0x44020CCC C   FIELD 14w01 USART1LPEN (rw): USART1 clock enable during sleep mode Set and reset by software.
0x44020CCC C   FIELD 24w01 USBLPEN (rw): USB clock enable during sleep mode
0x44020CD0 B  REGISTER APB3LPENR: RCC APB3 sleep clock register
0x44020CD0 C   FIELD 01w01 SBSLPEN (rw): SBS clock enable during sleep mode Set and reset by software.
0x44020CD0 C   FIELD 06w01 LPUART1LPEN (rw): LPUART1 clock enable during sleep mode Set and reset by software.
0x44020CD0 C   FIELD 09w01 I3C2LPEN (rw): I3C2 clock enable during sleep mode Set and reset by software.
0x44020CD0 C   FIELD 11w01 LPTIM1LPEN (rw): LPTIM1 clock enable during sleep mode Set and reset by software.
0x44020CD0 C   FIELD 20w01 VREFLPEN (rw): VREF clock enable during sleep mode Set and reset by software.
0x44020CD0 C   FIELD 21w01 RTCAPBLPEN (rw): RTC APB interface clock enable during sleep mode Set and reset by software.
0x44020CD8 B  REGISTER CCIPR1: RCC kernel clock configuration register
0x44020CD8 C   FIELD 00w03 USART1SEL (rw): USART1 kernel clock source selection Set and reset by software. others: reserved, the kernel clock is disabled
0x44020CD8 C   FIELD 03w03 USART2SEL (rw): USART2 kernel clock source selection Set and reset by software. others: reserved, the kernel clock is disabled
0x44020CD8 C   FIELD 06w03 USART3SEL (rw): USART3 kernel clock source selection Set and reset by software. others: reserved, the kernel clock is disabled
0x44020CD8 C   FIELD 31w01 TIMICSEL (rw): TIM2, TIM3 and LPTIM2 input capture source selection Set and reset by software.
0x44020CDC B  REGISTER CCIPR2: RCC kernel clock configuration register
0x44020CDC C   FIELD 08w03 LPTIM1SEL (rw): LPTIM1 kernel clock source selection others: reserved, the kernel clock is disabled
0x44020CDC C   FIELD 12w03 LPTIM2SEL (rw): LPTIM2 kernel clock source selection others: reserved, the kernel clock is disabled
0x44020CE0 B  REGISTER CCIPR3: RCC kernel clock configuration register
0x44020CE0 C   FIELD 00w03 SPI1SEL (rw): SPI1 kernel clock source selection Set and reset by software. others: reserved, the kernel clock is disabled
0x44020CE0 C   FIELD 03w03 SPI2SEL (rw): SPI2 kernel clock source selection Set and reset by software. others: reserved, the kernel clock is disabled
0x44020CE0 C   FIELD 06w03 SPI3SEL (rw): SPI3 kernel clock source selection Set and reset by software. others: reserved, the kernel clock is disabled
0x44020CE0 C   FIELD 24w03 LPUART1SEL (=RCC.CCIPR1.USART1SEL) (rw): LPUART1 kernel clock source selection others: reserved, the kernel clock is disabled
0x44020CE4 B  REGISTER CCIPR4: RCC kernel clock configuration register
0x44020CE4 C   FIELD 02w02 SYSTICKSEL (rw): SYSTICK clock source selection Note: rcc_hclk frequency must be four times higher than lsi_ker_ck/lse_ck (period (LSI/LSE) greater than or equal 4 * period (HCLK).
0x44020CE4 C   FIELD 04w02 USBSEL (rw): USB kernel clock source selection
0x44020CE4 C   FIELD 16w02 I2C1SEL (rw): I2C1 kernel clock source selection
0x44020CE4 C   FIELD 18w02 I2C2SEL (rw): I2C2 kernel clock source selection
0x44020CE4 C   FIELD 24w02 I3C1SEL (rw): I3C1 kernel clock source selection
0x44020CE4 C   FIELD 26w02 I3C2SEL (rw): I3C2 kernel clock source selection
0x44020CE8 B  REGISTER CCIPR5: RCC kernel clock configuration register
0x44020CE8 C   FIELD 00w03 ADCDACSEL (rw): ADC and DAC kernel clock source selection others: reserved, the kernel clock is disabled
0x44020CE8 C   FIELD 03w01 DAC1SEL (rw): DAC1 sample and hold clock source selection
0x44020CE8 C   FIELD 04w02 RNGSEL (rw): RNG kernel clock source selection
0x44020CE8 C   FIELD 08w02 FDCANSEL (rw): FDCAN kernel clock source selection
0x44020CE8 C   FIELD 30w02 CKPERSEL (rw): per_ck clock source selection
0x44020CF0 B  REGISTER BDCR: RCC Backup domain control register
0x44020CF0 C   FIELD 00w01 LSEON (rw): LSE oscillator enabled Set and reset by software.
0x44020CF0 C   FIELD 01w01 LSERDY (rw): LSE oscillator ready Set and reset by hardware to indicate when the LSE is stable. This bit needs 6 cycles of lse_ck clock to fall down after LSEON has been set to 0.
0x44020CF0 C   FIELD 02w01 LSEBYP (rw): LSE oscillator bypass Set and reset by software to bypass oscillator in debug mode. This bit must not be written when the LSE is enabled (by LSEON) or ready (LSERDY = 1)
0x44020CF0 C   FIELD 03w02 LSEDRV (rw): LSE oscillator driving capability Set by software to select the driving capability of the LSE oscillator. These bit can be written only if LSE oscillator is disabled (LSEON = 0 and LSERDY = 0).
0x44020CF0 C   FIELD 05w01 LSECSSON (rw): LSE clock security system enable Set by software to enable the clock security system on 32 kHz oscillator. LSECSSON must be enabled after LSE is enabled (LSEON enabled) and ready (LSERDY set by hardware) and after RTCSEL is selected. Once enabled, this bit cannot be disabled, except after a LSE failure detection (LSECSSD = 1). In that case the software must disable LSECSSON.
0x44020CF0 C   FIELD 06w01 LSECSSD (rw): LSE clock security system failure detection Set by hardware to indicate when a failure has been detected by the clock security system on the external 32 kHz oscillator.
0x44020CF0 C   FIELD 07w01 LSEEXT (rw): low-speed external clock type in bypass mode Set and reset by software to select the external clock type (analog or digital). The external clock must be enabled with the LSEON bit, to be used by the device. The LSEEXT bit can be written only if the LSE oscillator is disabled.
0x44020CF0 C   FIELD 08w02 RTCSEL (rw): RTC clock source selection Set by software to select the clock source for the RTC. These bits can be written only one time (except in case of failure detection on LSE). These bits must be written before LSECSSON is enabled. The VSWRST bit can be used to reset them, then it can be written one time again. If HSE is selected as RTC clock, this clock is lost when the system is in Stop mode or in case of a pin reset (NRST).
0x44020CF0 C   FIELD 15w01 RTCEN (rw): RTC clock enable Set and reset by software.
0x44020CF0 C   FIELD 16w01 VSWRST (rw): VSwitch domain software reset Set and reset by software.
0x44020CF0 C   FIELD 24w01 LSCOEN (rw): Low-speed clock output (LSCO) enable Set and cleared by software.
0x44020CF0 C   FIELD 25w01 LSCOSEL (rw): Low-speed clock output selection Set and cleared by software.
0x44020CF0 C   FIELD 26w01 LSION (rw): LSI oscillator enable Set and cleared by software.
0x44020CF0 C   FIELD 27w01 LSIRDY (rw): LSI oscillator ready Set and cleared by hardware to indicate when the LSI oscillator is stable. After the LSION bit is cleared, LSIRDY goes low after three internal low-speed oscillator clock cycles. This bit is set when the LSI is used by IWDG or RTC, even if LSION = 0.
0x44020CF4 B  REGISTER RSR: RCC reset status register
0x44020CF4 C   FIELD 23w01 RMVF (rw): remove reset flag Set and reset by software to reset the value of the reset flags.
0x44020CF4 C   FIELD 26w01 PINRSTF (rw): pin reset flag (NRST) Reset by software by writing the RMVF bit. Set by hardware when a reset from pin occurs.
0x44020CF4 C   FIELD 27w01 BORRSTF (rw): BOR reset flag Reset by software by writing the RMVF bit. Set by hardware when a BOR reset occurs (pwr_bor_rst).
0x44020CF4 C   FIELD 28w01 SFTRSTF (rw): system reset from CPU reset flag Reset by software by writing the RMVF bit. Set by hardware when the system reset is due to CPU.The CPU can generate a system reset by writing SYSRESETREQ bit of AIRCR register of the core M33.
0x44020CF4 C   FIELD 29w01 IWDGRSTF (rw): independent watchdog reset flag Reset by software by writing the RMVF bit. Set by hardware when an independent watchdog reset occurs.
0x44020CF4 C   FIELD 30w01 WWDGRSTF (rw): window watchdog reset flag Reset by software by writing the RMVF bit. Set by hardware when a window watchdog reset occurs.
0x44020CF4 C   FIELD 31w01 LPWRRSTF (rw): Low-power reset flag Set by hardware when a reset occurs due to Stop or Standby mode entry, whereas the corresponding nRST_STOP, nRST_STBY option bit is cleared. Cleared by writing to the RMVF bit.
0x44020D14 B  REGISTER PRIVCFGR (rw): RCC privilege configuration register
0x44020D14 C   FIELD 01w01 PRIV (rw): RCC functions privilege configuration
0x44022000 A PERIPHERAL EXTI
0x44022000 B  REGISTER RTSR1: EXTI rising trigger selection register
0x44022000 C   FIELD 00w01 RT0 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 01w01 RT1 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 02w01 RT2 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 03w01 RT3 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 04w01 RT4 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 05w01 RT5 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 06w01 RT6 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 07w01 RT7 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 08w01 RT8 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 09w01 RT9 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 10w01 RT10 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 11w01 RT11 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 12w01 RT12 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 13w01 RT13 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 14w01 RT14 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 15w01 RT15 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022000 C   FIELD 16w01 RT16 (rw): Rising trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022004 B  REGISTER FTSR1: EXTI falling trigger selection register
0x44022004 C   FIELD 00w01 FT0 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 01w01 FT1 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 02w01 FT2 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 03w01 FT3 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 04w01 FT4 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 05w01 FT5 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 06w01 FT6 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 07w01 FT7 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 08w01 FT8 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 09w01 FT9 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 10w01 FT10 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 11w01 FT11 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 12w01 FT12 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 13w01 FT13 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 14w01 FT14 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 15w01 FT15 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022004 C   FIELD 16w01 FT16 (rw): Falling trigger event configuration bit of configurable event input x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022008 B  REGISTER SWIER1: EXTI software interrupt event register
0x44022008 C   FIELD 00w01 SWI0 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 01w01 SWI1 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 02w01 SWI2 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 03w01 SWI3 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 04w01 SWI4 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 05w01 SWI5 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 06w01 SWI6 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 07w01 SWI7 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 08w01 SWI8 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 09w01 SWI9 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 10w01 SWI10 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 11w01 SWI11 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 12w01 SWI12 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 13w01 SWI13 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 14w01 SWI14 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 15w01 SWI15 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022008 C   FIELD 16w01 SWI16 (rw): Software interrupt on event x (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x4402200C B  REGISTER RPR1: EXTI rising edge pending register
0x4402200C C   FIELD 00w01 RPIF0 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 01w01 RPIF1 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 02w01 RPIF2 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 03w01 RPIF3 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 04w01 RPIF4 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 05w01 RPIF5 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 06w01 RPIF6 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 07w01 RPIF7 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 08w01 RPIF8 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 09w01 RPIF9 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 10w01 RPIF10 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 11w01 RPIF11 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 12w01 RPIF12 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 13w01 RPIF13 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 14w01 RPIF14 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 15w01 RPIF15 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402200C C   FIELD 16w01 RPIF16 (rw): configurable event inputs x rising edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 B  REGISTER FPR1: EXTI falling edge pending register
0x44022010 C   FIELD 00w01 FPIF0 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 01w01 FPIF1 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 02w01 FPIF2 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 03w01 FPIF3 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 04w01 FPIF4 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 05w01 FPIF5 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 06w01 FPIF6 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 07w01 FPIF7 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 08w01 FPIF8 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 09w01 FPIF9 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 10w01 FPIF10 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 11w01 FPIF11 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 12w01 FPIF12 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 13w01 FPIF13 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 14w01 FPIF14 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 15w01 FPIF15 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022010 C   FIELD 16w01 FPIF16 (rw): configurable event inputs x falling edge pending bit (x = 16 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022018 B  REGISTER PRIVCFGR1: EXTI privilege configuration register
0x44022018 C   FIELD 00w01 PRIV0 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 01w01 PRIV1 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 02w01 PRIV2 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 03w01 PRIV3 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 04w01 PRIV4 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 05w01 PRIV5 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 06w01 PRIV6 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 07w01 PRIV7 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 08w01 PRIV8 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 09w01 PRIV9 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 10w01 PRIV10 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 11w01 PRIV11 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 12w01 PRIV12 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 13w01 PRIV13 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 14w01 PRIV14 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 15w01 PRIV15 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 16w01 PRIV16 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 17w01 PRIV17 (rw): Privilege enable on event input x (x = 17 to 0)
0x44022018 C   FIELD 19w01 PRIV19 (rw): Privilege enable on event input 19
0x44022018 C   FIELD 21w01 PRIV21 (rw): Privilege enable on event input x (x = 22 to 21)
0x44022018 C   FIELD 22w01 PRIV22 (rw): Privilege enable on event input x (x = 22 to 21)
0x44022018 C   FIELD 24w01 PRIV24 (rw): Privilege enable on event input x (x = 29 to 24)
0x44022018 C   FIELD 25w01 PRIV25 (rw): Privilege enable on event input x (x = 29 to 24)
0x44022018 C   FIELD 26w01 PRIV26 (rw): Privilege enable on event input x (x = 29 to 24)
0x44022018 C   FIELD 27w01 PRIV27 (rw): Privilege enable on event input x (x = 29 to 24)
0x44022018 C   FIELD 28w01 PRIV28 (rw): Privilege enable on event input x (x = 29 to 24)
0x44022018 C   FIELD 29w01 PRIV29 (rw): Privilege enable on event input x (x = 29 to 24)
0x44022020 B  REGISTER RTSR2: EXTI rising trigger selection register 2
0x44022020 C   FIELD 18w01 RT50 (rw): Rising trigger event configuration bit of configurable event input x When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022020 C   FIELD 21w01 RT53 (rw): Rising trigger event configuration bit of configurable event input x When EXTI_PRIVCFGR.PRIVx is disabled, RTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RTx can only be accessed with privileged access. Unprivileged write to this bit x is discarded, unprivileged read returns 0.
0x44022024 B  REGISTER FTSR2: EXTI falling trigger selection register 2
0x44022024 C   FIELD 18w01 FT50 (rw): Falling trigger event configuration bit of configurable event input x When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022024 C   FIELD 21w01 FT53 (rw): Falling trigger event configuration bit of configurable event input x When EXTI_PRIVCFGR.PRIVx is disabled, FTx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FTx can only be accessed with privileged access. Unprivileged write to this FTx is discarded, unprivileged read returns 0.
0x44022028 B  REGISTER SWIER2: EXTI software interrupt event register 2
0x44022028 C   FIELD 18w01 SWI50 (rw): Software interrupt on event x When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x44022028 C   FIELD 21w01 SWI53 (rw): Software interrupt on event x When EXTI_PRIVCFGR.PRIVx is disabled, SWIx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, SWIx can only be accessed with privileged access. Unprivileged write to this SWIx is discarded, unprivileged read returns 0. A software interrupt is generated independent from the setting in EXTI_RTSR and EXTI_FTSR. It always returns 0 when read.
0x4402202C B  REGISTER RPR2: EXTI rising edge pending register 2
0x4402202C C   FIELD 18w01 RPIF50 (rw): configurable event inputs x rising edge pending bit When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x4402202C C   FIELD 21w01 RPIF53 (rw): configurable event inputs x rising edge pending bit When EXTI_PRIVCFGR.PRIVx is disabled, RPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, RPIFx can only be accessed with privileged access. Unprivileged write to this RPIFx is discarded, unprivileged read returns 0. This bit is set when the rising edge event or an EXTI_SWIER software trigger arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022030 B  REGISTER FPR2: EXTI falling edge pending register 2
0x44022030 C   FIELD 18w01 FPIF50 (rw): configurable event inputs x falling edge pending bit When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022030 C   FIELD 21w01 FPIF53 (rw): configurable event inputs x falling edge pending bit When EXTI_PRIVCFGR.PRIVx is disabled, FPIFx can be accessed with unprivileged and privileged access. When EXTI_PRIVCFGR.PRIVx is enabled, FPIFx can only be accessed with privileged access. Unprivileged write to this FPIFx is discarded, unprivileged read returns 0. This bit is set when the falling edge event arrives on the configurable event line. This bit is cleared by writing 1 to it.
0x44022038 B  REGISTER PRIVCFGR2: EXTI privilege configuration register 2
0x44022038 C   FIELD 05w01 PRIV37 (rw): Privilege enable on event input x (x = 42 to 37)
0x44022038 C   FIELD 06w01 PRIV38 (rw): Privilege enable on event input x (x = 42 to 37)
0x44022038 C   FIELD 07w01 PRIV39 (rw): Privilege enable on event input x (x = 42 to 37)
0x44022038 C   FIELD 08w01 PRIV40 (rw): Privilege enable on event input x (x = 42 to 37)
0x44022038 C   FIELD 09w01 PRIV41 (rw): Privilege enable on event input x (x = 42 to 37)
0x44022038 C   FIELD 10w01 PRIV42 (rw): Privilege enable on event input x (x = 42 to 37)
0x44022038 C   FIELD 15w01 PRIV47 (rw): Privilege enable on event input x
0x44022038 C   FIELD 17w01 PRIV49 (rw): Privilege enable on event input x (x = 50 to 49)
0x44022038 C   FIELD 18w01 PRIV50 (rw): Privilege enable on event input x (x = 50 to 49)
0x44022038 C   FIELD 21w01 PRIV53 (rw): Privilege enable on event input x
0x44022060 B  REGISTER EXTICR1: EXTI external interrupt selection register
0x44022060 C   FIELD 00w08 EXTI0 (rw): EXTI0 GPIO port selection These bits are written by software to select the source input for EXTI0 external interrupt. When EXTI_PRIVCFGR.PRIV0 is disabled, EXTI0 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV0 is enabled, EXTI0 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022060 C   FIELD 08w08 EXTI1 (rw): EXTI1 GPIO port selection These bits are written by software to select the source input for EXTI1 external interrupt. When EXTI_PRIVCFGR.PRIV1 is disabled, EXTI1 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV1 is enabled, EXTI1 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022060 C   FIELD 16w08 EXTI2 (rw): EXTI2 GPIO port selection These bits are written by software to select the source input for EXTI2 external interrupt. When EXTI_PRIVCFGR.PRIV2 is disabled, EXTI2 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV2 is enabled, EXTI2 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022060 C   FIELD 24w08 EXTI3 (rw): EXTI3 GPIO port selectio These bits are written by software to select the source input for EXTI3 external interrupt. When EXTI_PRIVCFGR.PRIV3 is disabled, EXTI3 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV3 is enabled, EXTI3 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022064 B  REGISTER EXTICR2: EXTI external interrupt selection register
0x44022064 C   FIELD 00w08 EXTI4 (rw): EXTI4 GPIO port selection These bits are written by software to select the source input for EXTI4 external interrupt. When EXTI_PRIVCFGR.PRIV4 is disabled, EXTI4 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV4 is enabled, EXTI4 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022064 C   FIELD 08w08 EXTI5 (rw): EXTI5 GPIO port selection These bits are written by software to select the source input for EXTI5 external interrupt. When EXTI_PRIVCFGR.PRIV5 is disabled, EXTI5 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV5 is enabled, EXTI5 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022064 C   FIELD 16w08 EXTI6 (rw): EXTI6 GPIO port selection These bits are written by software to select the source input for EXTI6 external interrupt. When EXTI_PRIVCFGR.PRIV6 is disabled, EXTI6 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV6 is enabled, EXTI6 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022064 C   FIELD 24w08 EXTI7 (rw): EXTI7 GPIO port selection These bits are written by software to select the source input for EXTI7 external interrupt. When EXTI_PRIVCFGR.PRIV7 is disabled, EXTI7 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV7 is enabled, EXTI7 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022068 B  REGISTER EXTICR3: EXTI external interrupt selection register
0x44022068 C   FIELD 00w08 EXTI8 (rw): EXTI8 GPIO port selection These bits are written by software to select the source input for EXTIm external interrupt. When EXTI_PRIVCFGR.PRIV8 is disabled, EXTI8 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV8 is enabled, EXTI8 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022068 C   FIELD 08w08 EXTI9 (rw): EXTI9 GPIO port selection These bits are written by software to select the source input for EXTI9 external interrupt. When EXTI_PRIVCFGR.PRIV9 is disabled, EXTI9 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV9 is enabled, EXTI9 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022068 C   FIELD 16w08 EXTI10 (rw): EXTI10 GPIO port selection These bits are written by software to select the source input for EXTI10 external interrupt. When EXTI_PRIVCFGR.PRIV10 is disabled, EXTI10 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV10 is enabled, EXTI10 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022068 C   FIELD 24w08 EXTI11 (rw): EXTI11 GPIO port selection These bits are written by software to select the source input for EXTI11 external interrupt. When EXTI_PRIVCFGR.PRIV11 is disabled, EXTI11 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV11 is enabled, EXTI11 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x4402206C B  REGISTER EXTICR4: EXTI external interrupt selection register
0x4402206C C   FIELD 00w08 EXTI12 (rw): EXTI12 GPIO port selection These bits are written by software to select the source input for EXTI12 external interrupt. When EXTI_PRIVCFGR.PRIV12 is disabled, EXTI12 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV12 is enabled, EXTI12 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x4402206C C   FIELD 08w08 EXTI13 (rw): EXTI13 GPIO port selection These bits are written by software to select the source input for EXTI13 external interrupt. When EXTI_PRIVCFGR.PRIV13 is disabled, EXTI13 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV13 is enabled, EXTI13 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x4402206C C   FIELD 16w08 EXTI14 (rw): EXTI14 GPIO port selection These bits are written by software to select the source input for EXTI14 external interrupt. When EXTI_PRIVCFGR.PRIV14 is disabled, EXTI14 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV14 is enabled, EXTI14 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x4402206C C   FIELD 24w08 EXTI15 (rw): EXTI15 GPIO port selection These bits are written by software to select the source input for EXTI15 external interrupt. When EXTI_PRIVCFGR.PRIV15 is disabled, EXTI15 can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIV15 is enabled, EXTI15 can only be accessed with privileged access. Unprivileged write to this bit is discarded. Others: reserved
0x44022080 B  REGISTER IMR1: EXTI CPU wakeup with interrupt mask register
0x44022080 C   FIELD 00w01 IM0 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 01w01 IM1 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 02w01 IM2 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 03w01 IM3 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 04w01 IM4 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 05w01 IM5 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 06w01 IM6 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 07w01 IM7 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 08w01 IM8 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 09w01 IM9 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 10w01 IM10 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 11w01 IM11 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 12w01 IM12 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 13w01 IM13 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 14w01 IM14 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 15w01 IM15 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 16w01 IM16 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 17w01 IM17 (rw): CPU wakeup with interrupt mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 19w01 IM19 (rw): CPU wakeup with interrupt mask on event input x When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 21w01 IM21 (rw): CPU wakeup with interrupt mask on event input x (x = 22 to 21) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 22w01 IM22 (rw): CPU wakeup with interrupt mask on event input x (x = 22 to 21) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 24w01 IM24 (rw): CPU wakeup with interrupt mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 25w01 IM25 (rw): CPU wakeup with interrupt mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 26w01 IM26 (rw): CPU wakeup with interrupt mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 27w01 IM27 (rw): CPU wakeup with interrupt mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 28w01 IM28 (rw): CPU wakeup with interrupt mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022080 C   FIELD 29w01 IM29 (rw): CPU wakeup with interrupt mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 B  REGISTER EMR1: EXTI CPU wakeup with event mask register
0x44022084 C   FIELD 00w01 EM0 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 01w01 EM1 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 02w01 EM2 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 03w01 EM3 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 04w01 EM4 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 05w01 EM5 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 06w01 EM6 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 07w01 EM7 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 08w01 EM8 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 09w01 EM9 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 10w01 EM10 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 11w01 EM11 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 12w01 EM12 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 13w01 EM13 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 14w01 EM14 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 15w01 EM15 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 16w01 EM16 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 17w01 EM17 (rw): CPU wakeup with event generation mask on event input x (x = 17 to 0) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 19w01 EM19 (rw): CPU wakeup with event generation mask on event input x When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 21w01 EM21 (rw): CPU wakeup with event generation mask on event input x (x = 22 to 21) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 22w01 EM22 (rw): CPU wakeup with event generation mask on event input x (x = 22 to 21) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 24w01 EM24 (rw): CPU wakeup with event generation mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 25w01 EM25 (rw): CPU wakeup with event generation mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 26w01 EM26 (rw): CPU wakeup with event generation mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 27w01 EM27 (rw): CPU wakeup with event generation mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 28w01 EM28 (rw): CPU wakeup with event generation mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022084 C   FIELD 29w01 EM29 (rw): CPU wakeup with event generation mask on event input x (x = 29 to 24) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022090 B  REGISTER IMR2: EXTI CPU wakeup with interrupt mask register 2
0x44022090 C   FIELD 05w01 IM37 (rw): CPU wakeup with interrupt mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022090 C   FIELD 06w01 IM38 (rw): CPU wakeup with interrupt mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022090 C   FIELD 07w01 IM39 (rw): CPU wakeup with interrupt mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022090 C   FIELD 08w01 IM40 (rw): CPU wakeup with interrupt mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022090 C   FIELD 09w01 IM41 (rw): CPU wakeup with interrupt mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022090 C   FIELD 10w01 IM42 (rw): CPU wakeup with interrupt mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022090 C   FIELD 15w01 IM47 (rw): CPU wakeup with interrupt mask on event input x When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022090 C   FIELD 17w01 IM49 (rw): CPU wakeup with interrupt mask on event input x (x = 50 to 49) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022090 C   FIELD 18w01 IM50 (rw): CPU wakeup with interrupt mask on event input x (x = 50 to 49) When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022090 C   FIELD 21w01 IM53 (rw): CPU wakeup with interrupt mask on event input x When EXTI_PRIVCFGR.PRIVx is disabled, IMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, IMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022094 B  REGISTER EMR2: EXTI CPU wakeup with event mask register 2
0x44022094 C   FIELD 05w01 EM37 (rw): CPU wakeup with event generation mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022094 C   FIELD 06w01 EM38 (rw): CPU wakeup with event generation mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022094 C   FIELD 07w01 EM39 (rw): CPU wakeup with event generation mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022094 C   FIELD 08w01 EM40 (rw): CPU wakeup with event generation mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022094 C   FIELD 09w01 EM41 (rw): CPU wakeup with event generation mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022094 C   FIELD 10w01 EM42 (rw): CPU wakeup with event generation mask on event input x (x = 42 to 37) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022094 C   FIELD 15w01 EM47 (rw): CPU wakeup with event generation mask on event input x When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022094 C   FIELD 17w01 EM49 (rw): CPU wakeup with event generation mask on event input x (x = 50 to 49) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022094 C   FIELD 18w01 EM50 (rw): CPU wakeup with event generation mask on event input x (x = 50 to 49) When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44022094 C   FIELD 21w01 EM53 (rw): CPU wakeup with event generation mask on event input x When EXTI_PRIVCFGR.PRIVx is disabled, EMx can be accessed with privileged and unprivileged access. When EXTI_PRIVCFGR.PRIVx is enabled, EMx can only be accessed with privileged access. Unprivileged write to this bit is discarded.
0x44024000 A PERIPHERAL DBGMCU
0x44024000 B  REGISTER IDCODE: DBGMCU identity code register
0x44024000 C   FIELD 00w12 DEV_ID (ro): device identification
0x44024000 C   FIELD 16w16 REV_ID (ro): revision This field indicates the revision of the device.
0x44024004 B  REGISTER CR: DBGMCU configuration register
0x44024004 C   FIELD 01w01 DBG_STOP (rw): Allows debug in Stop mode All clocks are disabled automatically in Stop mode. All active clocks and oscillators continue to run during Stop mode, allowing full debug capability. On exit from Stop mode, the clock settings are set to the Stop mode exit state.
0x44024004 C   FIELD 02w01 DBG_STANDBY (rw): Allows debug in Standby mode All clocks are disabled and the core powered down automatically in Standby mode. All active clocks and oscillators continue to run during Standby mode, and the core supply is maintained, allowing full debug capability. On exit from Standby mode, a system reset is performed.
0x44024004 C   FIELD 04w01 TRACE_IOEN (rw): trace pin enable
0x44024004 C   FIELD 05w01 TRACE_EN (rw): trace port and clock enable. This bit enables the trace port clock, TRACECK.
0x44024004 C   FIELD 06w02 TRACE_MODE (rw): trace pin assignment
0x44024004 C   FIELD 16w01 DCRT (rw): Debug credentials reset type This bit selects which type of reset is used to revoke the debug authentication credentials
0x44024008 B  REGISTER APB1LFZR: DBGMCU APB1L peripheral freeze register
0x44024008 C   FIELD 00w01 DBG_TIM2_STOP (rw): TIM2 stop in debug
0x44024008 C   FIELD 01w01 DBG_TIM3_STOP (rw): TIM3 stop in debug
0x44024008 C   FIELD 04w01 DBG_TIM6_STOP (rw): TIM6 stop in debug
0x44024008 C   FIELD 05w01 DBG_TIM7_STOP (rw): TIM7 stop in debug
0x44024008 C   FIELD 11w01 DBG_WWDG_STOP (rw): WWDG stop in debug
0x44024008 C   FIELD 12w01 DBG_IWDG_STOP (rw): IWDG stop in debug
0x44024008 C   FIELD 21w01 DBG_I2C1_STOP (rw): I2C1 SMBUS timeout stop in debug
0x44024008 C   FIELD 22w01 DBG_I2C2_STOP (rw): I2C2 SMBUS timeout stop in debug
0x44024008 C   FIELD 23w01 DBG_I3C1_STOP (rw): I3C1 SCL stall counter stop in debug
0x4402400C B  REGISTER APB1HFZR: DBGMCU APB1H peripheral freeze register
0x4402400C C   FIELD 05w01 DBG_LPTIM2_STOP (rw): LPTIM2 stop in debug
0x44024010 B  REGISTER APB2FZR: DBGMCU APB2 peripheral freeze register
0x44024010 C   FIELD 11w01 DBG_TIM1_STOP (rw): TIM1 stop in debug
0x44024014 B  REGISTER APB3FZR: DBGMCU APB3 peripheral freeze register
0x44024014 C   FIELD 12w01 DBG_I3C2_STOP (rw): I3C2 SCL stall counter stop in debug
0x44024014 C   FIELD 17w01 DBG_LPTIM1_STOP (rw): LPTIM1 stop in debug
0x44024014 C   FIELD 30w01 DBG_RTC_STOP (rw): RTC stop in debug
0x44024020 B  REGISTER AHB1FZR: DBGMCU AHB1 peripheral freeze register
0x44024020 C   FIELD 00w01 DBG_GPDMA1_0_STOP (rw): GPDMA1 channel 0 stop in debug
0x44024020 C   FIELD 01w01 DBG_GPDMA1_1_STOP (rw): GPDMA1 channel 1 stop in debug
0x44024020 C   FIELD 02w01 DBG_GPDMA1_2_STOP (rw): GPDMA1 channel 2 stop in debug
0x44024020 C   FIELD 03w01 DBG_GPDMA1_3_STOP (rw): GPDMA1 channel 3 stop in debug
0x44024020 C   FIELD 04w01 DBG_GPDMA1_4_STOP (rw): GPDMA1 channel 4 stop in debug
0x44024020 C   FIELD 05w01 DBG_GPDMA1_5_STOP (rw): GPDMA1 channel 5 stop in debug
0x44024020 C   FIELD 06w01 DBG_GPDMA1_6_STOP (rw): GPDMA1 channel 6 stop in debug
0x44024020 C   FIELD 07w01 DBG_GPDMA1_7_STOP (rw): GPDMA1 channel 7 stop in debug
0x44024020 C   FIELD 16w01 DBG_GPDMA2_0_STOP (rw): GPDMA2 channel 0 stop in debug
0x44024020 C   FIELD 17w01 DBG_GPDMA2_1_STOP (rw): GPDMA2 channel 1 stop in debug
0x44024020 C   FIELD 18w01 DBG_GPDMA2_2_STOP (rw): GPDMA2 channel 2 stop in debug
0x44024020 C   FIELD 19w01 DBG_GPDMA2_3_STOP (rw): GPDMA2 channel 3 stop in debug
0x44024020 C   FIELD 20w01 DBG_GPDMA2_4_STOP (rw): GPDMA2 channel 4 stop in debug
0x44024020 C   FIELD 21w01 DBG_GPDMA2_5_STOP (rw): GPDMA2 channel 5 stop in debug
0x44024020 C   FIELD 22w01 DBG_GPDMA2_6_STOP (rw): GPDMA2 channel 6 stop in debug
0x44024020 C   FIELD 23w01 DBG_GPDMA2_7_STOP (rw): GPDMA2 channel 7 stop in debug
0x440240FC B  REGISTER SR: DBGMCU status register
0x440240FC C   FIELD 00w16 AP_PRESENT (wo): Bit n identifies whether access port AP n is present in device Bit n = 0: APn absent Bit n = 1: APn present
0x440240FC C   FIELD 16w16 AP_ENABLED (wo): Bit n identifies whether access port AP n is open (can be accessed via the debug port) or locked (debug access to the AP is blocked) Bit n = 0: APn locked Bit n = 1: APn enabled
0x44024100 B  REGISTER DBG_AUTH_HOST: DBGMCU debug authentication mailbox host register
0x44024100 C   FIELD 00w32 MESSAGE (rw): Debug host to device mailbox message. During debug authentication the debug host communicates with the device via this register.
0x44024104 B  REGISTER DBG_AUTH_DEVICE: DBGMCU debug authentication mailbox device register
0x44024104 C   FIELD 00w32 MESSAGE (ro): Device to debug host mailbox message. During debug authentication the device communicates with the debug host via this register.
0x44024108 B  REGISTER DBG_AUTH_ACK: DBGMCU debug authentication mailbox acknowledge register
0x44024108 C   FIELD 00w01 HOST_ACK (rw): Host to device acknowledge. The device sets this bit to indicate that it has placed a message in the DBGMCU_DBG_AUTH_DEVICE register. It should be reset by the host after reading the message
0x44024108 C   FIELD 01w01 DEV_ACK (rw): Device to device acknowledge. The host sets this bit to indicate that it has placed a message in the DBGMCU_DBG_AUTH_HOST register. It is reset by the device after reading the message
0x44024FD0 B  REGISTER PIDR4: DBGMCU CoreSight peripheral identity register 4
0x44024FD0 C   FIELD 00w04 JEP106CON (ro): JEP106 continuation code
0x44024FD0 C   FIELD 04w04 SIZE (ro): register file size
0x44024FE0 B  REGISTER PIDR0: DBGMCU CoreSight peripheral identity register 0
0x44024FE0 C   FIELD 00w08 PARTNUM (ro): part number bits [7:0]
0x44024FE4 B  REGISTER PIDR1: DBGMCU CoreSight peripheral identity register 1
0x44024FE4 C   FIELD 00w04 PARTNUM (ro): part number bits [11:8]
0x44024FE4 C   FIELD 04w04 JEP106ID (ro): JEP106 identity code bits [3:0]
0x44024FE8 B  REGISTER PIDR2: DBGMCU CoreSight peripheral identity register 2
0x44024FE8 C   FIELD 00w03 JEP106ID (ro): JEP106 identity code bits [6:4]
0x44024FE8 C   FIELD 03w01 JEDEC (ro): JEDEC assigned value
0x44024FE8 C   FIELD 04w04 REVISION (ro): component revision number
0x44024FEC B  REGISTER PIDR3: DBGMCU CoreSight peripheral identity register 3
0x44024FEC C   FIELD 00w04 CMOD (ro): customer modified
0x44024FEC C   FIELD 04w04 REVAND (ro): metal fix version
0x44024FF0 B  REGISTER CIDR0: DBGMCU CoreSight component identity register 0
0x44024FF0 C   FIELD 00w08 PREAMBLE (ro): component identification bits [7:0]
0x44024FF4 B  REGISTER CIDR1: DBGMCU CoreSight component identity register 1
0x44024FF4 C   FIELD 00w04 PREAMBLE (ro): component identification bits [11:8]
0x44024FF4 C   FIELD 04w04 CLASS (ro): component identification bits [15:12] - component class
0x44024FF8 B  REGISTER CIDR2: DBGMCU CoreSight component identity register 2
0x44024FF8 C   FIELD 00w08 PREAMBLE (ro): component identification bits [23:16]
0x44024FFC B  REGISTER CIDR3: DBGMCU CoreSight component identity register 3
0x44024FFC C   FIELD 00w08 PREAMBLE (ro): component identification bits [31:24]
INTERRUPT 000: WWDG (WWDG): Window Watchdog interrupt
INTERRUPT 002: RTC (RTC): RTC global interrupt
INTERRUPT 004: TAMP (TAMP): TAMP global interrupt
INTERRUPT 005: RAMCFG (RAMCFG): RAM configuration global interrupt
INTERRUPT 006: FLASH (FLASH): FLASH non-secure global interrupt
INTERRUPT 009: RCC (RCC): RCC global interrupt
INTERRUPT 011: EXTI0 (EXTI): EXTI Line0 interrupt
INTERRUPT 012: EXTI1 (EXTI): EXTI Line1 interrupt
INTERRUPT 013: EXTI2 (EXTI): EXTI Line2 interrupt
INTERRUPT 014: EXTI3 (EXTI): EXTI Line3 interrupt
INTERRUPT 015: EXTI4 (EXTI): EXTI Line4 interrupt
INTERRUPT 016: EXTI5 (EXTI): EXTI Line5 interrupt
INTERRUPT 017: EXTI6 (EXTI): EXTI Line6 interrupt
INTERRUPT 018: EXTI7 (EXTI): EXTI Line7 interrupt
INTERRUPT 019: EXTI8 (EXTI): EXTI Line8 interrupt
INTERRUPT 020: EXTI9 (EXTI): EXTI Line9 interrupt
INTERRUPT 021: EXTI10 (EXTI): EXTI Line10 interrupt
INTERRUPT 022: EXTI11 (EXTI): EXTI Line11 interrupt
INTERRUPT 023: EXTI12 (EXTI): EXTI Line12 interrupt
INTERRUPT 024: EXTI13 (EXTI): EXTI Line13 interrupt
INTERRUPT 025: EXTI14 (EXTI): EXTI Line14 interrupt
INTERRUPT 026: EXTI15 (EXTI): EXTI Line15 interrupt
INTERRUPT 027: GPDMA1_CH0 (GPDMA1): GPDMA1 channel 0 global interrupt
INTERRUPT 028: GPDMA1_CH1 (GPDMA1): GPDMA1 channel 1 global interrupt
INTERRUPT 029: GPDMA1_CH2 (GPDMA1): GPDMA1 channel 2 global interrupt
INTERRUPT 030: GPDMA1_CH3 (GPDMA1): GPDMA1 channel 3 global interrupt
INTERRUPT 031: GPDMA1_CH4 (GPDMA1): GPDMA1 channel 4 global interrupt
INTERRUPT 032: GPDMA1_CH5 (GPDMA1): GPDMA1 channel 5 global interrupt
INTERRUPT 033: GPDMA1_CH6 (GPDMA1): GPDMA1 channel 6 global interrupt
INTERRUPT 034: GPDMA1_CH7 (GPDMA1): GPDMA1 channel 7 global interrupt
INTERRUPT 035: IWDG (IWDG): IWDG interrupt
INTERRUPT 037: ADC1 (ADC1): ADC1 global interrupt
INTERRUPT 038: DAC1 (DAC): DAC1 global interrupt
INTERRUPT 039: FDCAN1_IT0 (FDCAN1): FDCAN1 interrupt 0
INTERRUPT 040: FDCAN1_IT1 (FDCAN1): FDCAN1 interrupt 1
INTERRUPT 041: TIM1_BRK_TERR_IERR (TIM1): TIM1 break/TIM1 transition error/TIM1 index error
INTERRUPT 042: TIM1_UP (TIM1): TIM1 Update
INTERRUPT 043: TIM1_TRG_COM_DIR_IDX (TIM1): TIM1 trigger and commutation/TIM1 direction change interrupt/TIM1 index
INTERRUPT 044: TIM1_CC (TIM1): TIM1 capture compare interrupt
INTERRUPT 045: TIM2 (TIM2): TIM2 global interrupt
INTERRUPT 046: TIM3 (TIM3): TIM3 global interrupt
INTERRUPT 049: TIM6 (TIM6): TIM6 global interrupt
INTERRUPT 050: TIM7 (TIM7): TIM7 global interrupt
INTERRUPT 051: I2C1_EV (I2C1): I2C1 event interrupt
INTERRUPT 052: I2C1_ER (I2C1): I2C1 error interrupt
INTERRUPT 053: I2C2_EV (I2C2): I2C2 event interrupt
INTERRUPT 054: I2C2_ER (I2C2): I2C2 error interrupt
INTERRUPT 055: SPI1 (SPI1): SPI1 global interrupt
INTERRUPT 056: SPI2 (SPI2): SPI2 global interrupt
INTERRUPT 057: SPI3 (SPI3): SPI3 global interrupt
INTERRUPT 058: USART1 (USART1): USART1 global interrupt
INTERRUPT 059: USART2 (USART2): USART2 global interrupt
INTERRUPT 060: USART3 (USART3): USART3 global interrupt
INTERRUPT 063: LPUART1 (LPUART): LPUART1 global interrupt
INTERRUPT 064: LPTIM1 (LPTIM1): LPTIM1 global interrupt
INTERRUPT 070: LPTIM2 (LPTIM2): LPTIM2 global interrupt
INTERRUPT 074: USB_FS (USB): USB OTG FS global interrupt
INTERRUPT 075: CRS (CRS): Clock Recovery System global interrupt
INTERRUPT 090: GPDMA2_CH0 (GPDMA2): GPDMA2 channel 0 global interrupt
INTERRUPT 091: GPDMA2_CH1 (GPDMA2): GPDMA2 channel 1 global interrupt
INTERRUPT 092: GPDMA2_CH2 (GPDMA2): GPDMA2 channel 2 global interrupt
INTERRUPT 093: GPDMA2_CH3 (GPDMA2): GPDMA2 channel 3 global interrupt
INTERRUPT 094: GPDMA2_CH4 (GPDMA2): GPDMA2 channel 4 global interrupt
INTERRUPT 095: GPDMA2_CH5 (GPDMA2): GPDMA2 channel 5 global interrupt
INTERRUPT 096: GPDMA2_CH6 (GPDMA2): GPDMA2 channel 6 global interrupt
INTERRUPT 097: GPDMA2_CH7 (GPDMA2): GPDMA2 channel 7 global interrupt
INTERRUPT 104: ICACHE (ICACHE): Instruction cache global interrupt
INTERRUPT 113: DTS_WKUP (DTS): DTS interrupt or DTS AIT through EXTI line
INTERRUPT 114: RNG (RNG): RNG global interrupt
INTERRUPT 117: HASH (HASH): HASH interrupt
INTERRUPT 123: I3C1_EV (I3C1): I3C1 event interrupt
INTERRUPT 124: I3C1_ER (I3C1): I3C1 error interrupt
INTERRUPT 131: I3C2_EV (I3C2): I3C2 event interrupt
INTERRUPT 132: I3C2_ER (I3C2): I3C2 error interrupt
INTERRUPT 133: COMP (COMP): COMP global interrupt
